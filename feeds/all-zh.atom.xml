<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>yuex (悟道洞穴人)</title><link href="http://yuex.in/" rel="alternate"></link><link href="http://yuex.in/feeds/all-zh.atom.xml" rel="self"></link><id>http://yuex.in/</id><updated>2017-03-06T00:00:00+08:00</updated><entry><title>Black Art in Machine Learning</title><link href="http://yuex.in/post/2017/03/ml-black-art.html" rel="alternate"></link><published>2017-03-06T00:00:00+08:00</published><updated>2017-03-06T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2017-03-06:/post/2017/03/ml-black-art.html</id><summary type="html">&lt;p&gt;I came across a paper called &lt;a href="http://homes.cs.washington.edu/~pedrod/papers/cacm12.pdf"&gt;A Few Useful Things to Know about Machine Learning&lt;/a&gt;
which summarized some black arts in machine learning.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Learning = Representation + Evaluation + Optimization&lt;/li&gt;
&lt;li&gt;It's generalization that counts&lt;/li&gt;
&lt;li&gt;Data alone is not enough (we also need knowledge)&lt;/li&gt;
&lt;li&gt;Overfitting has many faces&lt;/li&gt;
&lt;li&gt;Intuition fails in high dimensions&lt;/li&gt;
&lt;li&gt;Theoretical guarantee are not what they seem&lt;/li&gt;
&lt;li&gt;Feature engineering is the …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;I came across a paper called &lt;a href="http://homes.cs.washington.edu/~pedrod/papers/cacm12.pdf"&gt;A Few Useful Things to Know about Machine Learning&lt;/a&gt;
which summarized some black arts in machine learning.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Learning = Representation + Evaluation + Optimization&lt;/li&gt;
&lt;li&gt;It's generalization that counts&lt;/li&gt;
&lt;li&gt;Data alone is not enough (we also need knowledge)&lt;/li&gt;
&lt;li&gt;Overfitting has many faces&lt;/li&gt;
&lt;li&gt;Intuition fails in high dimensions&lt;/li&gt;
&lt;li&gt;Theoretical guarantee are not what they seem&lt;/li&gt;
&lt;li&gt;Feature engineering is the key&lt;/li&gt;
&lt;li&gt;More data beats a clever algorithm&lt;/li&gt;
&lt;li&gt;Learn many models, not just one (model ensembles)&lt;/li&gt;
&lt;li&gt;Simplicity does not imply accuracy&lt;/li&gt;
&lt;li&gt;Representable does not imply learnable&lt;/li&gt;
&lt;li&gt;Correlation does not imply causation&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The author also recommended his book &lt;a href="https://www.amazon.com/Master-Algorithm-Ultimate-Learning-Machine/dp/0465065708/"&gt;The Master Algorithm&lt;/a&gt; and his &lt;a href="http://www.cs.washington.edu/homes/pedrod/class"&gt;ML course&lt;/a&gt;.&lt;/p&gt;</content><category term="ML"></category></entry><entry><title>"All the Single Ladies, Now Put Your Hands Up"</title><link href="http://yuex.in/post/2017/01/single-number.html" rel="alternate"></link><published>2017-01-17T00:00:00+08:00</published><updated>2017-01-17T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2017-01-17:/post/2017/01/single-number.html</id><summary type="html">&lt;p&gt;&lt;a href="https://leetcode.com/problems/single-number-ii/"&gt;LeetCode 137&lt;/a&gt; is to find the number which apprears exactly once in an array
assuming other numbers always appear exactly three times. It's very easy to come
up with a linear runtime algorithm by using hash table which takes O(n) space. A
better approach is to modulo count the number of occurrences of 1 at every bit
and compose …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://leetcode.com/problems/single-number-ii/"&gt;LeetCode 137&lt;/a&gt; is to find the number which apprears exactly once in an array
assuming other numbers always appear exactly three times. It's very easy to come
up with a linear runtime algorithm by using hash table which takes O(n) space. A
better approach is to modulo count the number of occurrences of 1 at every bit
and compose the final result based on this information. But to implement it
efficiently, some bitwise tricks are used which remind me some good old college
time when I was learning Digital Circuit and CPU Architeture. So I think I
should take these notes down here. Also, this problem could be generalize to
find the number which apprears exactly p times in an array while others always
appear k times, assuming (p &amp;lt; k). And for &lt;a href="https://leetcode.com/problems/single-number-ii/"&gt;LeetCode 137&lt;/a&gt;, there is also a
two-line solution based on the special parameters (k, p) = (3, 1). I will talk
about it at the end.&lt;/p&gt;
&lt;p&gt;First, we can use hash table to count the appearance of every number and then
check which number's count is exactly one. This can give a linear runtime
algorithm having linear space complexity. Some people argues that this is gonna
be practically slow because hashing is an expensive operation. But for this
special problem, we can use a simple modulo function to compute the hash
number. But one thing to note is that although we can choose a prime large
enough to give extremely low collision rate, this algorithm is not strictly
guaranteed to be always correct.&lt;/p&gt;
&lt;p&gt;Another idea is that we can count the occurence of 1 at every bit of the
numbers. The difference is that whenever the count reaches k we reset it to 0
and carry on. At the end, since all numbers except one appear k times, the final
value of the count is actually p or 0. We can easily construct the number itself
based on this information. The only thing here is how to implement these
counters efficiently. A trivial implementation could use an array and calculate
every bit of every number and count it accordingly. Definitely, the time
complexity will be &lt;code&gt;O(nlog(MAX_INT))&lt;/code&gt;and the space complexity
&lt;code&gt;O(log(MAX_INT))&lt;/code&gt;. But by using some bitwise tricks, we can change these two
metrics to have a &lt;code&gt;log(k)&lt;/code&gt; scale factor. When k is less than MAX_INT, we can
have an algorithm with better asymptotic performance.&lt;/p&gt;
&lt;p&gt;For simplicity, we will assume the numbers are 32 bits long. So we need 32
counters in total. The key observation here is that if k is of m bits, we are
having a (32, m) matrix of 1-bit value. The above algorithm we mentioned are
updating the counters from a row based point of view. But we can also update it
in a column based way.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    m...321  count  n1  n2  n3  &lt;span class="kc"&gt;...&lt;/span&gt;  nk  &lt;span class="kc"&gt;...&lt;/span&gt;
 &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;....&lt;/span&gt;&lt;span class="kc"&gt;...&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;    &lt;span class="m"&gt;.&lt;/span&gt;   &lt;span class="m"&gt;.&lt;/span&gt;   &lt;span class="m"&gt;.&lt;/span&gt;        &lt;span class="m"&gt;.&lt;/span&gt;
 &lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="m"&gt;....&lt;/span&gt;&lt;span class="kc"&gt;...&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;    &lt;span class="m"&gt;.&lt;/span&gt;   &lt;span class="m"&gt;.&lt;/span&gt;   &lt;span class="m"&gt;.&lt;/span&gt;        &lt;span class="m"&gt;.&lt;/span&gt;
 &lt;span class="m"&gt;3&lt;/span&gt;  &lt;span class="m"&gt;....&lt;/span&gt;&lt;span class="kc"&gt;...&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;    &lt;span class="m"&gt;.&lt;/span&gt;   &lt;span class="m"&gt;.&lt;/span&gt;   &lt;span class="m"&gt;.&lt;/span&gt;        &lt;span class="m"&gt;.&lt;/span&gt;
 &lt;span class="m"&gt;.&lt;/span&gt;     &lt;span class="m"&gt;.&lt;/span&gt;        &lt;span class="m"&gt;.&lt;/span&gt;    &lt;span class="m"&gt;.&lt;/span&gt;   &lt;span class="m"&gt;.&lt;/span&gt;   &lt;span class="m"&gt;.&lt;/span&gt;        &lt;span class="m"&gt;.&lt;/span&gt;
 &lt;span class="m"&gt;.&lt;/span&gt;     &lt;span class="m"&gt;.&lt;/span&gt;        &lt;span class="m"&gt;.&lt;/span&gt;    &lt;span class="m"&gt;.&lt;/span&gt;   &lt;span class="m"&gt;.&lt;/span&gt;   &lt;span class="m"&gt;.&lt;/span&gt;        &lt;span class="m"&gt;.&lt;/span&gt;
&lt;span class="m"&gt;32&lt;/span&gt;  &lt;span class="m"&gt;....&lt;/span&gt;&lt;span class="kc"&gt;...&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;    &lt;span class="m"&gt;.&lt;/span&gt;   &lt;span class="m"&gt;.&lt;/span&gt;   &lt;span class="m"&gt;.&lt;/span&gt;        &lt;span class="m"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we can found a way to update &lt;code&gt;counter[i][1]&lt;/code&gt;..&lt;code&gt;counter[i][m]&lt;/code&gt; bitwisely with
1-bit number n. Then we can pack the updates of all 32 counters at an
integer. We can see this technique as a bitwise level parallel computation. But
how can we update &lt;code&gt;counter[i][1..m]&lt;/code&gt; bitwisely? For simplicity, we use xm...x1
to represent the counter. There are two things we need to work out&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How to add 1 to it&lt;/li&gt;
&lt;li&gt;How to reset it to 0 when it reaches k&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The reset part is relative easy. If you have experience with circuit design, it
is easily to see that we can check if k reaches by compute a value out of
xm..x1. The fundamental rule of circuit design or digital logic is that you can
work out a mapping between any bit pattern once you have written down the truth
table. Assume k = 0b101, we are expecting following truth table for reset&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;x 321  -&amp;gt;  x 321
  000        000
  001        001
  010        010
  011        011
  100        100
k 101        000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can see only when &lt;code&gt;x3x2x1 == 101&lt;/code&gt;, &lt;code&gt;x3 &amp;amp; (~x2) &amp;amp; (x1) == 1&lt;/code&gt;. Then the reset
could be expressed as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mask = ~(x3 &amp;amp; (~x2) &amp;amp; x1)
x3 = x3 &amp;amp; mask
x2 = x2 &amp;amp; mask
x1 = x1 &amp;amp; mask
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To work out the add part, we start with x1. Because for x1, this is no
carry. We are expecting following truth table&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;x 0 n -&amp;gt; x 0
  0 0      0
  1 0      1
  0 1      1
  1 1      0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The mapping could be written out directly as &lt;code&gt;x0 = ((x0) &amp;amp; (~n)) | ((~x0) &amp;amp; (n))
= x0 ^ n&lt;/code&gt;. Perhaps, this is why XOR sign is chosen to be a circle plus, just to
remind you of its ability to act as a circle around in-place plus without carry
for circuit design.&lt;/p&gt;
&lt;p&gt;To calculate x2..xm, we need to take carry into consideration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;x i carry -&amp;gt; x i
  0   0        0
  1   0        1
  0   1        1
  1   1        0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Actually, it's the same table for x0. So we can write out &lt;code&gt;xi = xi ^ carry_i&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But how to compute carry? Just think when we will have a carry for xi. Only when
xi-1, ..., x1, and n are all 1. This leads to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;carry_i = xi-1 &amp;amp; .. &amp;amp; x1 &amp;amp; n
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we can write out the code to update these counters. Note, we generalize the
compuatation of x0 by using n as carry0&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s s-Atom"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="s s-Atom"&gt;for&lt;/span&gt; &lt;span class="k"&gt;_&lt;/span&gt; &lt;span class="s s-Atom"&gt;in&lt;/span&gt; &lt;span class="nf"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="s s-Atom"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s s-Atom"&gt;::-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="s s-Atom"&gt;for&lt;/span&gt; &lt;span class="s s-Atom"&gt;n&lt;/span&gt; &lt;span class="s s-Atom"&gt;in&lt;/span&gt; &lt;span class="nn"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s s-Atom"&gt;carry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;n&lt;/span&gt;
    &lt;span class="s s-Atom"&gt;for&lt;/span&gt; &lt;span class="s s-Atom"&gt;i&lt;/span&gt; &lt;span class="s s-Atom"&gt;in&lt;/span&gt; &lt;span class="nf"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;
        &lt;span class="s s-Atom"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s s-Atom"&gt;carry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s s-Atom"&gt;^&lt;/span&gt; &lt;span class="s s-Atom"&gt;carry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s s-Atom"&gt;carry&lt;/span&gt;
    &lt;span class="s s-Atom"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="s s-Atom"&gt;for&lt;/span&gt; &lt;span class="s s-Atom"&gt;i&lt;/span&gt; &lt;span class="s s-Atom"&gt;in&lt;/span&gt; &lt;span class="nf"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;
        &lt;span class="s s-Atom"&gt;mi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s s-Atom"&gt;if&lt;/span&gt; &lt;span class="s s-Atom"&gt;k&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;1&amp;#39;&lt;/span&gt; &lt;span class="s s-Atom"&gt;else&lt;/span&gt; &lt;span class="s s-Atom"&gt;~x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="s s-Atom"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;mask&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s s-Atom"&gt;mi&lt;/span&gt;
    &lt;span class="s s-Atom"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;~mask&lt;/span&gt;
    &lt;span class="s s-Atom"&gt;for&lt;/span&gt; &lt;span class="s s-Atom"&gt;i&lt;/span&gt; &lt;span class="s s-Atom"&gt;in&lt;/span&gt; &lt;span class="nf"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;
        &lt;span class="s s-Atom"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s s-Atom"&gt;mask&lt;/span&gt;

&lt;span class="s s-Atom"&gt;the_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="s s-Atom"&gt;for&lt;/span&gt; &lt;span class="s s-Atom"&gt;i&lt;/span&gt; &lt;span class="s s-Atom"&gt;in&lt;/span&gt; &lt;span class="nf"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;
    &lt;span class="s s-Atom"&gt;the_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;the_number&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="s s-Atom"&gt;return&lt;/span&gt; &lt;span class="s s-Atom"&gt;the_number&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At the end of above code, we add a loop to compute the single number. Since its
final occurence count of '1' at any bit is either p or 0, the bit value at ith
bit of the single number can be computed the single number by&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;the_number = xm | ... | x1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Besides the general solution, there could also be a specialized solution for
specific k. If we know any specific k for sure, we can do better. As
in &lt;a href="https://leetcode.com/problems/single-number-ii/"&gt;LeetCode 137&lt;/a&gt;, k = 3. The truth table to update count is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;x 10 n -&amp;gt; x 10
  00 0      00
  01 0      01 .
  10 0      10
  00 1      01 .
  01 1      10
  10 1      00
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here comes the true beauty of digital logic. We can write out the mapping
directly as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;x0 = ((~x1) &amp;amp; x0 &amp;amp; (~n)) | ((~x1) &amp;amp; (~x0) &amp;amp; n)
   = (~x1) &amp;amp; ((x0 &amp;amp; (~n)) | ((~x0) &amp;amp; n))
   = (~x1) &amp;amp; (x0 ^ n)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can save the original value of x0, and then use it to calculate x1 in the
smae way above. But we can also use the computed value of x0 as a new input to
calculate x1. Namely, we substitute the left x0 column with the right x0 column
in above truth table. Then we have&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;x 10 n -&amp;gt; x 10
  00 0      00
  01 0      01
  10 0    . 10
  01 1      01
  00 1    . 10
  10 1      00
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remeber, the true beauty. We have&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;x1 = (x1 &amp;amp; (~x0) &amp;amp; (~n)) | ((~x1) &amp;amp; (~x0) &amp;amp; n)
   = (~x0) &amp;amp; ((x1 &amp;amp; (~n)) | (~x1) &amp;amp; n)
   = (~x0) &amp;amp; (x1 ^ n)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we have following lines of magic to solve &lt;a href="https://leetcode.com/problems/single-number-ii/"&gt;LeetCode 137&lt;/a&gt;. Note p = 1.  It
means x1 will always be 0 at the end.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;x = [0, 0]
for n in nums:
    x[0] = (~x[1]) &amp;amp; (x[0] ^ n)
    x[1] = (~x[0]) &amp;amp; (x[1] ^ n)
return x[0]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At the end of this post, take a while to savor the true beauty of digital
logic. It could be singular as well as single.&lt;/p&gt;</content><category term="leetcode"></category></entry><entry><title>Install Gentoo to VirtualBox and Package It to Vagrant</title><link href="http://yuex.in/post/2017/01/gentoo-install-virtualbox-and-vagrant.html" rel="alternate"></link><published>2017-01-04T00:00:00+08:00</published><updated>2017-01-04T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2017-01-04:/post/2017/01/gentoo-install-virtualbox-and-vagrant.html</id><summary type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I have been fiddling with MacBook Pro in the past few days. The Quartz Desktop
is really awesome. MacOS has got some software supports as pretty as Windows.
Graphical applications like Steam and BattleNet are available. But still I
didn't get used to BSD toolchains.&lt;/p&gt;
&lt;p&gt;At first thought, I told myself not to be so close-minded.  So I tried …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I have been fiddling with MacBook Pro in the past few days. The Quartz Desktop
is really awesome. MacOS has got some software supports as pretty as Windows.
Graphical applications like Steam and BattleNet are available. But still I
didn't get used to BSD toolchains.&lt;/p&gt;
&lt;p&gt;At first thought, I told myself not to be so close-minded.  So I tried Gentoo
Prefix, then MacPorts and HomeBrew. Gentoo Prefix was bootstrapped successfully
after manually patched several packages. But the support is not excellent (as
stated on Gentoo Prefix's Gentoo wiki page). Some packages' compilations are
broken on MacOS because the environment is so different to Linux. Let alone some
Linux-specific packages like procps are no way to compile. It seems that there
is also a lack of maintainers for Gentoo Prefix on Mac. After all, it's the
amd64 Linux where Gentoo shines.&lt;/p&gt;
&lt;p&gt;So I turned to MacPorts and HomeBrew.&lt;/p&gt;
&lt;p&gt;HomeBrew is awesome. The development is active. The community is large. But the
problem is it doesn't handle dependencies well. To me, after the revelation to
emerge, this is a huge defect.  But it doesn't mean the HomeBrew finds no place
in my toolbox. Still I am very happy to use HomeBrew Cask to install GUI apps
which has no dependencies. Besides, HomeBrew doesn't provide packages to install
pip or cabal modules yet.&lt;/p&gt;
&lt;p&gt;Like Portage, MacPorts derives from Unix Port too. But its toolkits are somehow
primitive to Portage. You have no way to search files with packages like &lt;code&gt;yum
whatprovides&lt;/code&gt; unless you have installed it. For Portage, this function is
provided by &lt;code&gt;e-file&lt;/code&gt; command of pfl which search in an external indexing
database. And there are also some broken dependencies. For example, VirtualBox
Guestion Additions requires gcc-42 to build. But this package is not provided
for MacOS beyond El Capitan. Also the ghc package has been broken for quite a
while and doesn't show any indication to change (the maintainer explained the
obstacles in the mailing list in Q3 or Q4 of 2016).&lt;/p&gt;
&lt;p&gt;The conclusion is that to my knowledge Gentoo Portage on amd64 is still the best
choice. Let alone there is also &lt;code&gt;layman&lt;/code&gt; by which you can introduce an extra
layer to the Portage tree where you can customize your our own versions of some
packages. This feature is not provided by HomeBrew or MacPorts yet.&lt;/p&gt;
&lt;p&gt;Now the problem is how to get myself a Linux environment on MacOS. First, I
tried Docker. But with no Linux kernel, Docker for Mac also has to use a VM to
map Linux API to OSX. Well, this just give it no pros. The cons comes from
ctrl-p. I have no idea why I have to type ctrl-p twice in the Docker tty to go
last command. The ctrl-n and up arrow are good. Also by using Docker, we have
no way to customize the kernel.&lt;/p&gt;
&lt;p&gt;So finally, I decided to go to virtual machine. One of the cons is that you have
to go through the installation again. Like I said, it's fun but tedious. The
first thought was that I had to use vagrant. The second thought is that if
someone had already prepared some Gentoo images. I checked out the most
downloaded Gentoo image from vagrant box list. But later I found it was using
OpenRC instead of systemd. and disk was not using LVM. That was why I decided to
DIY a vagrant box.&lt;/p&gt;
&lt;p&gt;I also tried chroot. But I can not do it natively on MacOS. Because I want a
pure GNU/Linux environment. I tried to use docker or virtualbox to start a Linux
kernel and then chroot to shared folder to install Gentoo Portage. But the
problem is that both vboxfs and osxfs have some problems. vboxfs doesn't allow
permission change within the guest OS which will cause you a permission deny
hell even if you switched to root. osxfs has some performance issue just like
vboxfs. But the most severe problem is that osxfs will just hang. I have to
reset Docker for Mac to kill it. But this way works on Linux. So I guess it's a
bug related to Moby VM or osxfs.&lt;/p&gt;
&lt;p&gt;Anyway, to get yourself a vagrant box, there are just two steps&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, you install a Gentoo to a VM&lt;/li&gt;
&lt;li&gt;Second, you packge the VM and put it online&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Install Gentoo to VirtualBox&lt;/h1&gt;
&lt;p&gt;The process is very similar to install it to a PC but somehow different to my
previous post. First, we have to prepare the disk using parted. Second, we also
need to configure VirtualBox a little bit to be able to ssh to.&lt;/p&gt;
&lt;p&gt;Still, we use [SystemRescueCD][]. Insert it into the Optical Drive of the VM. By
default, VirtualBox's network uses NAT. To make ssh easier, we change it to
Bridged Adapter to get the VM a dedicated IP address so that we needn't to
configure port forwarding. Configure CPU cores and memory close to host machine
so that the compilation will be quicker. 20 or 30 Gib should be enough for
Gentoo system. We don't taken into user data here because I am sure you want to
mount it as a shared folder. Because the disk image is always configured as
dynamically allocated, I recomment to double it to 60GiB just in case. I use the
vmdk format. It's more popularly supported than vdi. Remember to enable EFI in
the VM setting.&lt;/p&gt;
&lt;p&gt;Now boot the VM, enter &lt;CR&gt; until you see the prompt.&lt;/p&gt;
&lt;p&gt;First, we start sshd&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/ssh/sshd_config
PasswordAuthentication yes
PermitRootLogin yes

/etc/init.d/sshd restart
passwd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Check out the IP address and ssh to the VM.&lt;/p&gt;
&lt;p&gt;Now we prepare the disk using &lt;code&gt;parted&lt;/code&gt;. Still, I don't use a swap here. Because
I think that sleep or hibernate a VM is pretty rare. In case the memory is used
up, you can just allocate more or even over-allocate. But this time we need a
EFI partition to install Grub. Again I use LVM here. Just in case you ran out of
memory, you can still add a second disk image and extend your LVM VG and still
present a single disk to OS. But Luks is not needed anymore. Entrypted a VM? We
should encrypt the host OS.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;parted /dev/sda
mklabel gpt
mkpart efi fat32 # hundreds of MB should be enough
mkpart root ext4 # all remaining
set 1 boot on
set 2 lvm on
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Quit the &lt;code&gt;parted&lt;/code&gt;. Since the EFI partition has to be FAT32, we format it as
needed&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkfs.vfat -F32 /dev/sda1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then the LVM partition&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pvcreate /dev/sda2
vgcreate vg /dev/sda2
lvcreate -l 100%FREE -n root vg
mkfs.ext4 /dev/vg/root
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, mount the filesystems and download stage3 and portage&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mount /dev/vg/root /mnt
cd /mnt
wget http://distfiles.gentoo.org/releases/amd64/autobuilds/current-stage3-amd64-systemd/&amp;lt;latest&amp;gt;
tar xvf stage3*
wget http://distfiles.gentoo.org/releases/snapshots/current/portage-latest.tar.xz
tar xvf portage* -C usr
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, prepare to chroot&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mount -t proc /proc proc/
mount -o bind /sys sys/
mount -o bind /dev dev/
cp -L /etc/resolv.conf etc/
chroot . /bin/bash
env-update
source /etc/profile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After that, you may want to install vim and configure &lt;code&gt;/etc/portage/make.conf&lt;/code&gt;.
The most imoprtant thing is to add &lt;code&gt;MAKEOPTS&lt;/code&gt; and &lt;code&gt;CPU_FLAGS_X86&lt;/code&gt;. The later one
can be automatically generated by &lt;code&gt;cpuid2cpuflags&lt;/code&gt;. But first you need to
installed.&lt;/p&gt;
&lt;p&gt;Before compiling kernel, we modify &lt;code&gt;/etc/fstab&lt;/code&gt; to reflect our disk scheme.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim /etc/fstab
/dev/sda1      /boot/efi    vfat    defaults,noauto,noatime,discard    1 2
/dev/vg/root   /            ext4    defaults,noauto,noatime,discard    0 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, let's compile the kernel. Because we are using a VM, we don't need to worry
about drivers. linux-firmware is not need. Just&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;emerge gentoo-sources genkernel-next
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Edit &lt;code&gt;/etc/genkernel.conf&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;INSTALL=&amp;quot;yes&amp;quot;
OLDCONFIG=&amp;quot;yes&amp;quot;
MENUCONFIG=&amp;quot;yes&amp;quot;
NCONFIG=&amp;quot;no&amp;quot;
CLEAN=&amp;quot;yes&amp;quot;
MRPROPER=&amp;quot;no&amp;quot;
MOUNTBOOT=&amp;quot;no&amp;quot;
SAVE_CONFIG=&amp;quot;yes&amp;quot;
USECOLOR=&amp;quot;yes&amp;quot;
MAKEOPTS=&amp;quot;-j5&amp;quot;
LVM=&amp;quot;yes&amp;quot;
UDEV=&amp;quot;yes&amp;quot;
BOOTLOADER=&amp;quot;grub&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, we use kernel's default configurations. Thus exit the menuconfig&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;genkernel all
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After a while, the kernel will be compiled and installed. Let's turn to
bootloader. First, mount the EFI partition&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p /boot/efi
mount /dev/sda1 boot/efi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then install grub&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo &amp;quot;sys-boot/grub device-mapper&amp;quot; &amp;gt;&amp;gt; /etc/portage/package.use/grub
emerge grub
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, install it. But before that, configure and restart LVM&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim /etc/lvm/lvm.conf
use_lvmetad = 0
/etc/init.d/lvm restart
grub-install --efi-directory=/boot/efi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you forget to enable EFI for the VM, &lt;code&gt;grub-install&lt;/code&gt; will tell not able to
embed to BIOS. Just reboot after enable it.&lt;/p&gt;
&lt;p&gt;Finally, configure grub and generate the cfg file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim /etc/default/grub
GRUB_CMDLINE_LINUX=&amp;quot;init=/usr/lib/systemd/systemd root=/dev/vg/root dolvm rootfstype=ext4&amp;quot;
grub-mkconfig -o /boot/grub/grub.cfg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can now verify EFI boot configuration by&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;efibootmgr -v

efibootmgr -o # change order
efibootmgr --create --label Gentoo --loader &amp;quot;\EFI\gentoo\grubx64.efi&amp;quot; # add new entry
efibootmgr -Bb &amp;lt;hex&amp;gt; # remove entry
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Before reboot, remember to check profile and update world&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;eselect profile set default/linux/amd64/13.0/systemd
emerge --ask --update --deep --newuse @world
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There shouldn't be too much to update if you are using the latest stage3 and
portage.&lt;/p&gt;
&lt;p&gt;Also remember to install NetworkManager and passwd root so that you can login&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;emerge networkmanager
passwd
reboot
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If it goes well, you should be prompt to login. But it seems VirtualBox will
lost the EFI boot configuration when devices change like remove install image
from optical drive. In that case, you will be prompted a EFI shell. Then&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Shell&amp;gt;fs0:
FS0:\&amp;gt;edit startup.nsh

FS0:\EFI\gentoo\grubx64.efi
&amp;lt;ctrl-s&amp;gt;&amp;lt;CR&amp;gt;&amp;lt;CR&amp;gt; to save
&amp;lt;ctrl-q&amp;gt;&amp;lt;CR&amp;gt; to quit
&amp;lt;reboot&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And afterwards, when the EFI have no way to boot you can just type &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;
several times to activate this default script to boot grub.&lt;/p&gt;
&lt;p&gt;You can also quickly type &lt;code&gt;&amp;lt;F12&amp;gt;&lt;/code&gt; when you see the splash after booting the VM
to enter VirtualBox's EFI Manager Program to change the order.&lt;/p&gt;
&lt;h1&gt;Package It as A Vagrant Box&lt;/h1&gt;
&lt;p&gt;Before packaging it as a vagrant box, we have to finish some configurations.&lt;/p&gt;
&lt;p&gt;First, we finalize systemd's configuration&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemd-machine-id-setup
systemctl enable NetworkManager
systemctl start NetworkManager
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also setup hostname or timezone here. After that, go check the
requirements of a vagrant box, if you like&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.vagrantup.com/docs/boxes/base.html"&gt;https://www.vagrantup.com/docs/boxes/base.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.vagrantup.com/docs/virtualbox/boxes.html"&gt;https://www.vagrantup.com/docs/virtualbox/boxes.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The things are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set up a normal user named vagrant&lt;/li&gt;
&lt;li&gt;add an insecure pubkey for vagrant&lt;/li&gt;
&lt;li&gt;add it to sudo&lt;/li&gt;
&lt;li&gt;passwd root&lt;/li&gt;
&lt;li&gt;setup and enable sshd&lt;/li&gt;
&lt;li&gt;install VirtualBox Guest Additions and enable it as startup services&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'll go through this list one by one. Create user vagrant is easy&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;useradd -m vagrant
su vagrant
passwd
&amp;lt;vagrant&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, we add an insecure pubkey to enable private key ssh. This key will be
replaced with a randomly generated one upon the first time login of vagrant
automatically.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd ~/.ssh
wget https://raw.githubusercontent.com/mitchellh/vagrant/master/keys/vagrant.pub
mv vagrant.pub authorized_keys
chmod 600 authorized_keys
chmod 700 ~/.ssh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we add vagrant to sudoer. But first you may need to install sudo&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;emerge sys-admin/sudo
vim /etc/sudoers
vagrant ALL=(ALL) NOPASSWD:ALL
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next passwd root&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;passwd
&amp;lt;vagrant&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then enable sshd&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemctl enable sshd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And finally, we need to install VirtualBox Guest Additions. You may need to
download it with the same version of the VirtualBox from their
mirror
&lt;a href="http://download.virtualbox.org/virtualbox/"&gt;http://download.virtualbox.org/virtualbox/&lt;/a&gt;.
Insert into the optical drive of the VM and reboot. After that, you need to
mount it&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lsblk # to check out the right device to mount
mount /dev/sr0 /mnt
sh /mnt/VBoxLinuxAdditions.run
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It will install some service scripts to &lt;code&gt;/etc/init.d/&lt;/code&gt;. But since we are using
systemd here, we have to write some unit files and enable them. [Riann's Post][]
has already provided some examples. You can take them from there. Just remember
to enable them&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemctl enable vboxadd
systemctl enable vboxadd-service
systemctl enable vboxadd-x11
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Before packaging, we can do two things to reduce the image size. First, we can
remove the gentoo-sources. Second, we can remove the portage tree. These can
save nearly 2GiB.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;emerge -ac gentoo-sources
emerge --depclean
rm -rf /usr/portage
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now poweroff the VM and change the network back to NAT and run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vagrant package --base &amp;lt;name-of-the-VM-as-showed-in-VirtualBox&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will generate a &lt;code&gt;package.box&lt;/code&gt; file. Before uploading it to vagrant's boxes
list, we can test it locally&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vagrant box add gentoo /path/to/the/package.box
vagrant init gentoo
vagrant up
vagrant ssh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Acutally, your can skip the steps to add unit files for vboxadd. But then you
need to install a vagrant plugin&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vagrant plugin install vagrant-vbguest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This automatically detect if the vboxadd is installed. If it is installed but
not enabled, it will automatically start it.&lt;/p&gt;
&lt;p&gt;Now, you can register an accound on Vagrant's website and upload the box. Next
time, you add your box from the box list before start a VM&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vagrant box add yuex/gentoo
vagrant up
vagrant ssh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On MacOS, you can also install vagrant-manager. It will add an system tray to
the menubar to help to monitor and manage your vagrant VMs.&lt;/p&gt;</content><category term="gentoo"></category></entry><entry><title>Gentoo Installation on MacBook Pro (Mid 2015) - Base System</title><link href="http://yuex.in/post/2016/12/gentoo-install-mbp-1.html" rel="alternate"></link><published>2016-12-26T00:00:00+08:00</published><updated>2016-12-26T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2016-12-26:/post/2016/12/gentoo-install-mbp-1.html</id><summary type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I got a MacBook Pro recently, the mid 2015 15" version. I have to admit that
MacOs and Homebrew are cool. But still I want Gentoo Portage back. Actually I
doubt if anyone can still date with other package system after you have seen
the true beauty of Gentoo Portage. So I tried Gentoo Prefix. But unfortunately,
at this …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I got a MacBook Pro recently, the mid 2015 15" version. I have to admit that
MacOs and Homebrew are cool. But still I want Gentoo Portage back. Actually I
doubt if anyone can still date with other package system after you have seen
the true beauty of Gentoo Portage. So I tried Gentoo Prefix. But unfortunately,
at this point, due to the new release of MacOS Sierra and LLVM, bintutils-apple
failed to compile with clang-3.9. I tried to use the system clang (Apple 8.0.0)
and clang-3.8.  binutils-apple could compile. But later on glib failed to
compile. It looks like glib used some new features supported in clang-3.9. That
was where I gave up.  Maybe I will try it again later.&lt;/p&gt;
&lt;p&gt;Anyway, here I am, going to install Gentoo natively on this MacBook Pro mid
2015 15" laptop. Its product number is MJLT2LL/A if you want details. Believe
me, we're gonna have a lot of details here. I think there are not too many
differences between installation on Mac or on PC. The biggest one comes from
the kernel configuration since hardware always varies from laptop to laptop,
even under same brand same product number. So generally, the installation guide
below also applies to PC except the kernel options configuration part.&lt;/p&gt;
&lt;p&gt;Installation of Gentoo is not easy. You may have successfully installed
ArchLinux once or two. Gentoo installation is a little bit harder than that.
But not too much, just that you need to configure the kernel yourself using
some Gentoo-specific tools. But if your only Linux installation exprience comes
from Ubuntu, Fedora, or CentOS with a nice graphics installation interface,
then you're gonna have troubles. You can still try.  But my advice is to find
yourself two or three days and follow &lt;a href="https://wiki.gentoo.org/wiki/Sakaki%27s_EFI_Install_Guide"&gt;Sakaki's Guide&lt;/a&gt;. Because there
are gonna be a lot new concepts.&lt;/p&gt;
&lt;h1&gt;Acknoledgements&lt;/h1&gt;
&lt;p&gt;Thanks to Artem and, parts of this guide are adapted from their installation
guide. In case you have troubles in following this guide, you may want to check
out theirs. BTW, they use 2013 models.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.artembutusov.com/gentoo-on-macbook-pro-retina-part-1-base-system/"&gt;Artem's Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vitobotta.com/encrypted-gentoo-macbook-pro/"&gt;Vito's Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And of course, I want to thank Sakaki. My first Gentoo installation is
following &lt;a href="https://wiki.gentoo.org/wiki/Sakaki%27s_EFI_Install_Guide"&gt;his guide&lt;/a&gt;. But the problem is that he uses his own
tools like buildkernel and showem which are provided by adding a portage
overlay. I think that's too much for a Gentoo newbie and obscure the original
installation process and the relationships among Gentoo Portage, Kernel, Xorg,
and Gnome or KDE. So here I will stick with genkernel.&lt;/p&gt;
&lt;h1&gt;Expectation&lt;/h1&gt;
&lt;p&gt;In this guide, I will introduce step by step how to install a dual-boot Gentoo
on MacBook Pro 15" (mid 2015). The filesystem will be encrypted by using luks
and lvm. We use systemd and grub2 here. After the installation, you should be
able to boot into Gentoo to see a console command line or into MacOs to see
GUI. In following posts, I will introduce how to install KDE from there. Once
you have a bootable Gentoo, it's pretty easy to install KDE or Gnome.&lt;/p&gt;
&lt;p&gt;Besides, following guide assuems that you have a wireless network (you don't
have Ethernet port on Mac, right?). Though not necessary, another laptop with
SSH client at your hands will be much pretty handier.&lt;/p&gt;
&lt;h1&gt;Prepare Boot Media and Disk&lt;/h1&gt;
&lt;p&gt;Unlike PC, Mac is an UEFI-only system. We cannot just &lt;code&gt;dd&lt;/code&gt; an ISO image to an
USB stick and boot. We have to make an UEFI-bootable USB stick. It's just a
little bit more than &lt;code&gt;dd&lt;/code&gt;. You need to install and configure a bootloader like
grub or syslinux on that USB sticks.  That's a little bit tedious. So here I
will use some tool.&lt;/p&gt;
&lt;p&gt;Here, you may be interested of the difference between BIOS and UEFI, and
perhaps Linus's comments on UEFI&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface"&gt;Wikipedia UEFI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/BIOS"&gt;Wikipedia BIOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://yarchive.net/comp/linux/efi.html"&gt;Linus on UEFI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In &lt;a href="https://wiki.gentoo.org/wiki/UEFI_Gentoo_Quick_Install_Guide"&gt;UEFI Gentoo Quick Install Gudie&lt;/a&gt;, it is recommended to use
&lt;a href="http://www.system-rescue-cd.org/SystemRescueCd_Homepage"&gt;SystemRescureCD&lt;/a&gt;. It's a Gentoo-based rescue system. You need to download it
from their website.&lt;/p&gt;
&lt;p&gt;To make the USB stick, we will use [UNetbootin][] here. It supports all three
platform. After download, the burning is easy. Just remeber, before burning,
you have to format the USB stick as a FAT filesystem. If you are using Linux,
you need to mount it then.&lt;/p&gt;
&lt;p&gt;Suppose your USB stick is &lt;code&gt;/dev/sdb1&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkfs.fat /dev/sdb1
mount /dev/sdb1 /media
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, use unetbootin to make the USB stick.&lt;/p&gt;
&lt;p&gt;Then, if you want dual boot to MacOS, you need to resize the disk to save some
space for Gentoo. It can be done by using Disk Utility. The filesystem format
doesn't matter. We will re-format it later. The label doesn't matter right too
because we can set it later. But I recommend you set it now, just name it as
Gentoo HD or some thing else you like. Usually, fresh Gentoo needs 20GiB.  But
if you are planning to use it afterwards, I recommend no less than 100GiB.&lt;/p&gt;
&lt;h1&gt;Boot from USB Stick&lt;/h1&gt;
&lt;p&gt;Plug in your USB stick and reboot. Hold Alt (or Option) key after you hear the
boot sound. Then choose to boot from USB stick. Press Enter until you see the
welcome message to command line and the prompt is ready.&lt;/p&gt;
&lt;h1&gt;Setup Remote Access&lt;/h1&gt;
&lt;p&gt;You can install by using the console command line. But probably you have found
that the fonts are too small. Even if they were large enough, typing commands
there is still painful. So here we are gonna set up remote access so that you
can login remotely by using SSH.&lt;/p&gt;
&lt;p&gt;First, we need to connect to the WIFI&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nmcli dev wifi connect &amp;quot;ap-name&amp;quot; password &amp;quot;pass&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you are using Ethernet or you want GUI, you can try&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;net-setup
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But personally, I prefer &lt;code&gt;nmcli&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, modify&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# /etc/ssh/sshd_config
PasswordAuthentication yes
PermitRootLogin yes
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, since the resuce system is using OpenRC, you need to restart sshd by&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/init.d/sshd restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And last, don't forget to setup the password for root by&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;passwd
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Create the Disk&lt;/h1&gt;
&lt;p&gt;To create some encrypted disk, we need to load the encryption modules first&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;modprobe dm-crypt
modprobe aes
# error means no hardware cryptographic device
# run modprobe aes_generic
modprobe sha256
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, check out your partition for Gentoo&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;blkid
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure which one you want to format. You should be able to identify the
label when you resize the disk for Gentoo. In my case it is &lt;code&gt;/dev/sda4&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cryptsetup luksFormat /dev/sda4 # enter your passphrase
cryptsetup luksOpen /dev/sda4 gentoo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, we formated the disk and opened it as &lt;code&gt;/dev/mapper/gentoo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then, create lvm which enable you to adjust your disk's size without
reformating. This is the thing that Windows still doesn't support.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pvcreate /dev/mapper/gentoo
vgcreate vg /dev/mapper/gentoo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, we created a virtual group named as &lt;code&gt;vg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Finally, we create a partion for root and format it as Ext4&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lvcreate -l 100%FREE -n root vg
mkfs.ext4 /dev/vg/root
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since we are using SSD with 8 or 16 GiB memory, I think swap is not necessary.
People may argue that we need swap to support hibernation. But usually for
laptop with a buit-in battery, what we need is sleep instead of hibernation.&lt;/p&gt;
&lt;p&gt;Please checkout&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Hibernation_(computing)#Comparison_to_sleep_mode"&gt;Wikipedia Hibernation Comparison to Sleep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Logical_Volume_Manager_(Linux)"&gt;Wikipedia LVM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Prepare Portage&lt;/h1&gt;
&lt;p&gt;Gentoo's package system is Portage.  You can simply think Portage as a
collections of recipes defining how to accquire, compile, and install some
source code.  It use tools like &lt;code&gt;emerge&lt;/code&gt; to install packages. Like Debian,
&lt;code&gt;emerge&lt;/code&gt; uses other tools to search. To compiler kernel, we need to setup
Portage first.&lt;/p&gt;
&lt;p&gt;Synchronize time is not necessary, but it doesn't hurt&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ntpdate -s time.nist.gov
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mount the file system we created&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mount /dev/vg/root /mnt/gentoo
cd /mnt/gentoo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Get the Gentoo stage3 snapshot, you should check &lt;a href="http://distfiles.gentoo.org/releases/amd64/autobuilds/current-stage3-amd64-systemd/"&gt;Gentoo Mirror&lt;/a&gt;
to get the latest snapshot for systemd.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://distfiles.gentoo.org/releases/amd64/autobuilds/current-stage3-amd64-systemd/stage3-amd64-systemd-20161218.tar.bz2
tar xvf stage3*
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For what is stage3, please checkout &lt;a href="https://wiki.gentoo.org/wiki/Stage_tarball"&gt;Gentoo Stage&lt;/a&gt;. Actually, if you try
Gentoo Prefix, all stages will be went through. But here, stage3 is enough.&lt;/p&gt;
&lt;p&gt;Get the latest Portage&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://distfiles.gentoo.org/releases/snapshots/current/portage-latest.tar.xz
tar xvf portage* -C /mnt/gentoo/usr
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But still Portage needs some configuration. First we change root to our future
file system. But before that, we need to mount it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mount -t proc none /mnt/gentoo/proc
mount -o bind /dev /mnt/gentoo/dev
mount -o bind /sys /mnt/gentoo/sys
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, copy the name resolution file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cp -L /etc/resolve.conf /mnt/gentoo/etc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then change root, and up&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chroot /mnt/gentoo /bin/bash
env-update &amp;amp;&amp;amp; source /etc/profile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, we need to edit &lt;code&gt;/etc/portage/make.conf&lt;/code&gt;. But first, you may want to
install vim&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;emerge vim
vim /etc/portage/make.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For now, the most important thing is to add some compile options.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/portage/make.conf
# Doc https://wiki.gentoo.org/wiki//etc/portage/make.conf

CFLAGS=&amp;quot;-O2 -pipe -march=native&amp;quot;
CXXFLAGS=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;CFLAGS&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
CHOST=&amp;quot;x86_64-pc-linux-gnu&amp;quot;

# cores + 1
MAKEOPTS=&amp;quot;-j5&amp;quot;
EMERGE_DEFAULT_OPTS=&amp;quot;--jobs 4&amp;quot;

ACCEPT_LICENSE=&amp;quot;*&amp;quot;
ACCEPT_KEYWORDS=&amp;quot;amd64&amp;quot;

VIDEO_CARDS=&amp;quot;radeon radeonsi intel&amp;quot;
INPUT_DEVICES=&amp;quot;evdev synaptics mtrack mouse&amp;quot;

PORTDIR=&amp;quot;/usr/portage&amp;quot;
DISTDIR=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PORTDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/distfiles&amp;quot;
PKGDIR=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PORTDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/packages&amp;quot;

FEATURES=&amp;quot;binpkg-logs clean-logs split-log&amp;quot;

USE=&amp;quot;unicode nls bluetooth alsa infinality cjk&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another thing is to define &lt;code&gt;CPU_FLAGS_X86&lt;/code&gt; so that &lt;code&gt;emerge&lt;/code&gt; can use these
CPU-specific flags to optimize the generated code. There is a tool to generate
these flags for you&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;emerge cpuid2cpuflags -1
cpuinfo2cpuflags-x86 &amp;gt;&amp;gt; /etc/portage/make.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Kernel&lt;/h1&gt;
&lt;p&gt;Before configuring kernel, we modify the &lt;code&gt;/etc/fstab&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim /etc/fstab
/dev/sda1               /boot/efi       vfat            defaults,noauto,noatime,discard 1 2
/dev/vg/root            /               ext4            defaults,noatime,discard        0 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, &lt;code&gt;/dev/sda1&lt;/code&gt; is Mac's original EFI partition.&lt;/p&gt;
&lt;p&gt;Then, we install kernel sources and build tool &lt;code&gt;genkernel-next&lt;/code&gt;. Since we want
to use an encrypted disk, &lt;code&gt;genkernel-next&lt;/code&gt; needs to pull in some support.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p /etc/portage/package.use
touch -p /etc/portage/package.use/zzz_via_automask
echo &amp;quot;sys-kernel/genkernel-next cryptsetup&amp;quot; &amp;gt; /etc/portage/package.use/genkernel-next
emerge gentoo-sources
emerge genkernel-next
emerge linux-firmwares
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;genkernel-next&lt;/code&gt; also needs some configuration&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;INSTALL=&amp;quot;yes&amp;quot;
OLDCONFIG=&amp;quot;yes&amp;quot;
MENUCONFIG=&amp;quot;yes&amp;quot;
NCONFIG=&amp;quot;no&amp;quot;
CLEAN=&amp;quot;yes&amp;quot;
MRPROPER=&amp;quot;no&amp;quot;
MOUNTBOOT=&amp;quot;no&amp;quot;
SAVE_CONFIG=&amp;quot;yes&amp;quot;
USECOLOR=&amp;quot;yes&amp;quot;
MAKEOPTS=&amp;quot;-j5&amp;quot;
LVM=&amp;quot;yes&amp;quot;
LUKS=&amp;quot;yes&amp;quot;
GPG=&amp;quot;no&amp;quot;
DMRAID=&amp;quot;no&amp;quot;
BUSYBOX=&amp;quot;yes&amp;quot;
UDEV=&amp;quot;yes&amp;quot;
MDADM=&amp;quot;no&amp;quot;
ISCSI=&amp;quot;no&amp;quot;
E2FSPROGS=&amp;quot;no&amp;quot;
FIRMWARE=&amp;quot;yes&amp;quot;
FIRMWARE_DIR=&amp;quot;/lib/firmware&amp;quot;
BOOTLOADER=&amp;quot;grub&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, we configure the kernel. Though this is interesting, it is also very
tedious. For example, you need to configure kernel options for&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Systemd https://wiki.gentoo.org/wiki/Systemd#Kernel&lt;/li&gt;
&lt;li&gt;Thunderbolt&lt;/li&gt;
&lt;li&gt;Thunderbolt Ethernet&lt;/li&gt;
&lt;li&gt;SD Card&lt;/li&gt;
&lt;li&gt;Others Misc https://wiki.gentoo.org/wiki/Apple_Macbook_Pro_Retina_(early_2013)&lt;/li&gt;
&lt;li&gt;Wireless https://wiki.gentoo.org/wiki/Wifi&lt;/li&gt;
&lt;li&gt;Bluetooth https://wiki.gentoo.org/wiki/Bluetooth&lt;/li&gt;
&lt;li&gt;Radeon https://wiki.gentoo.org/wiki/Radeon&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I won't go into details here. If you like, you can use
&lt;a href="https://github.com/yuex/gentoo/blob/master/kernel-config-x86_64-4.4.26-gentoo"&gt;my configuration&lt;/a&gt;
. It's for 4.4.26. Save it under &lt;code&gt;/etc/kernels/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, compile and install the kernel&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;genkernel all
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It takes some time. You should be able to hear the roar of your fans.&lt;/p&gt;
&lt;h1&gt;Bootloader&lt;/h1&gt;
&lt;p&gt;First, mount Mac's EFI partition&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p /boot/efi
mount /dev/sda1 /boot/efi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, we need to install Grub. Since we are using lvm and luks, we need Grub to
support device mapper.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo &amp;quot;sys-boot/grub device-mapper&amp;quot; &amp;gt;&amp;gt; /etc/portage/package.use/grub 
emerge grub
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lvm should be pulled in by grub. We need some configurations&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim /etc/lvm/lvm.conf
use_lvmetad = 0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then restart&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/init.d/lvm restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, we configure Grub&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim /etc/default/grub
GRUB_CMDLINE_LINUX=&amp;quot;init=/usr/lib/systemd/systemd crypt_root=/dev/sda4 root=/dev/mapper/vg-root dolvm rootfstype=ext4&amp;quot;
GRUB_ENABLE_CRYPTODISK=y
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add an entry to boot MacOS from Grub&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim /etc/grub.d/40_custom
menuentry &amp;quot;Mac OS X&amp;quot; {
    insmod hfsplus
    set root=&amp;#39;(hd1,gpt3)&amp;#39;
    chainloader ($root)/System/Library/CoreServices/boot.efi
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can use &lt;code&gt;efibootmgr&lt;/code&gt; to check out EFI entries&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# check
efibootmgr -v

# add an entry
efibootmgr --create --label Gentoo --loader &amp;quot;\EFI\gentoo\grubx64.efi&amp;quot;

# remove an entry
efibootmgr -B -b &amp;lt;hex&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Install Grub&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grub-install --efi-directory=/boot/efi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Generate Grub configuration&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grub-mkconfig -o /boot/grub/grub.cfg
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Ready to Boot&lt;/h1&gt;
&lt;p&gt;Now, we are just one step away from boot into Gentoo. Before that, we need to
configure some profiles for Gentoo&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;eselect profile set default/linux/amd64/13.0/systemd
emerge --ask --update --deep --newuse @world
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then install NetworkManager to manage network after we boot into Gentoo&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;emerge networkmanager
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Setup a password for root so that you can login&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;passwd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, try to reboot&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;reboot
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Systemd Configuration&lt;/h1&gt;
&lt;p&gt;If everything goes fine, you should be able to boot into a command line console
after entering the passphrase for decrypting disk and password for logining.&lt;/p&gt;
&lt;p&gt;Now, we need to configure Systemd to finalize our installation&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemd-machine-id-setup
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Auto start Network Manager&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemctl enable NetworkManager
systemctl start NetworkManager
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Connect to network&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nmcli dev wifi connect &amp;quot;ap-name&amp;quot; password &amp;quot;pass&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Setup hostname&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;hostnamectl set-hostname macbookpro
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Setup locales&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/locale.conf
en_US.UTF-8 UTF-8
locale-gen
localectl set-locale LANG=en_US.UTF-8
localectl set-keymap us
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Setup timezone&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;timedatectl set-timezone US/Eastern
timedatectl set-ntp 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you like, you can also add a normal user now.&lt;/p&gt;</content><category term="gentoo"></category></entry><entry><title>彩色终端</title><link href="http://yuex.in/post/2016/11/colorful-terminal.html" rel="alternate"></link><published>2016-11-11T00:00:00+08:00</published><updated>2016-11-11T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2016-11-11:/post/2016/11/colorful-terminal.html</id><summary type="html">&lt;p&gt; 说真的，当发现 Emacs 还不支持全彩色时，我还是有点吃惊的。毕竟很多程序都已经开始支
持了，比如 vim，neovim，konsole 等等。连 tmux 都从今年三月的 2.2 版本开始支持全彩色了。
没有全彩色支持对于 terminal 下工作的人来说，真的很不爽，像是 solarized 常用的主题颜
色在非全彩色情况下的退化表现一般都不是很理想。不过好在 emacs 上有全彩色的 patch，可
以实现这个小目标。&lt;/p&gt;
&lt;p&gt; 以 24.5 版本为例 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl https://goo.gl/a9qsIY &amp;gt; emacs-24.5-24bit.diff
wget http://gnu.mirrors.pair.com/gnu/emacs/emacs-24.5.tar.gz
tar xzf emacs-24.5 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt; 说真的，当发现 Emacs 还不支持全彩色时，我还是有点吃惊的。毕竟很多程序都已经开始支
持了，比如 vim，neovim，konsole 等等。连 tmux 都从今年三月的 2.2 版本开始支持全彩色了。
没有全彩色支持对于 terminal 下工作的人来说，真的很不爽，像是 solarized 常用的主题颜
色在非全彩色情况下的退化表现一般都不是很理想。不过好在 emacs 上有全彩色的 patch，可
以实现这个小目标。&lt;/p&gt;
&lt;p&gt; 以 24.5 版本为例 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl https://goo.gl/a9qsIY &amp;gt; emacs-24.5-24bit.diff
wget http://gnu.mirrors.pair.com/gnu/emacs/emacs-24.5.tar.gz
tar xzf emacs-24.5.tar.gz
cd emacs-24.5.tar.gz
patch -p0 &amp;lt; ../emacs-24.5-24bit.diff
./configure
make
sudo make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 最终的程序会被安装到 &lt;code&gt;/usr/local/bin/&lt;/code&gt; 下。另外需要注意的是，在 melpa 中，
&lt;code&gt;solarized-theme&lt;/code&gt; 是全彩色的，效果会好一些。&lt;/p&gt;
&lt;p&gt; 此外，该 patch 中通过检测两个环境变量来判断所用终端是否支持全彩色，所以不要忘记设
置。我尝试过 iTerm，但貌似在设置 &lt;code&gt;ITERM_24BIT&lt;/code&gt; 时，其支持效果并不好。反而设置
&lt;code&gt;KONSOLE_DBUS_SESSION&lt;/code&gt; 就没有问题。因此我自己是不管用什么终端都统一设置
&lt;code&gt;KONSOLE_DBUS_SESSION&lt;/code&gt;。但如果你真的是用 Konsole，这个变量其实已经设置好了。&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/XVilka/8346728"&gt; 常见工具的全彩色支持情况 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/choppsv1/e8198df70cb1778b04d6"&gt;emacs-24.5 tc patch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sunaku.github.io/tmux-24bit-color.html"&gt;tmux 24bit color&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="emacs"></category><category term="tmux"></category></entry><entry><title>Awesome LaTeX</title><link href="http://yuex.in/post/2016/09/awesome-latex.html" rel="alternate"></link><published>2016-09-12T00:00:00+08:00</published><updated>2016-09-12T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2016-09-12:/post/2016/09/awesome-latex.html</id><summary type="html">&lt;p&gt;(Note, files metioned below are included in &lt;a href="https://github.com/yuex/awesome-latex"&gt;this&lt;/a&gt; github repo)&lt;/p&gt;
&lt;p&gt;Well, it's complicated, sort of.&lt;/p&gt;
&lt;p&gt;To appreciate the awesomeness of LaTeX, you need to put aside a few hours to
fiddle with not only another gigantic tool and a not-so-easy-to-learn syntax
but also another no-so-well-managed software distribution system.&lt;/p&gt;
&lt;p&gt;To save your time, you can just install &lt;code&gt;texlive&lt;/code&gt; and use &lt;code&gt;homework …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;(Note, files metioned below are included in &lt;a href="https://github.com/yuex/awesome-latex"&gt;this&lt;/a&gt; github repo)&lt;/p&gt;
&lt;p&gt;Well, it's complicated, sort of.&lt;/p&gt;
&lt;p&gt;To appreciate the awesomeness of LaTeX, you need to put aside a few hours to
fiddle with not only another gigantic tool and a not-so-easy-to-learn syntax
but also another no-so-well-managed software distribution system.&lt;/p&gt;
&lt;p&gt;To save your time, you can just install &lt;code&gt;texlive&lt;/code&gt; and use &lt;code&gt;homework.tex&lt;/code&gt;. It's a
popular homework template at CMU introduced by the help page of &lt;a href="http://www.cs.cmu.edu/afs/cs/academic/class/15251/Site/current/Help/late"&gt;15251&lt;/a&gt;. When
you are done with your homework using the template, just run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pdflatex homework.tex
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;homework.tex&lt;/code&gt; should be happy with the default packages included in texlive.
If everything goes well, a pdf file will be generated.&lt;/p&gt;
&lt;p&gt;Alright, if you have some time or you find a cooler template on the Internet
which requires additional LaTeX packages, then be prepared to get some
frustrations. Here's the steps to make it work, probably.&lt;/p&gt;
&lt;p&gt;First, install texlive using the package manager you hate or love or whatever
provided by your distribution or 3rd party or some guys you have no idea of but
you have to use.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# gentoo example
# set aside half an hour at least, it will take some time to compile
# if you want cjk support, turn the flag on manually (disabled by default)
emerge -av textlive
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Second, try to compile the tex file and find out which package is missing&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pdflatex template.tex
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Third, fortunately &lt;code&gt;tlmgr&lt;/code&gt; provided by texlive is not working on gentoo so you
get the chance to do it in the traditional way, i.e., manually. Checkout the
&lt;a href="https://en.wikibooks.org/wiki/LaTeX/Installing_Extra_Packages"&gt;wikibook&lt;/a&gt;. In general you need to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. find and download the package source from CTAN https://www.ctan.org/
2. unzip and compile the source. some authors provide a Makefile to easy
   this process. in that case you should thank his/her kindness

       latex packname.idx
       latex packname.dtx
       latex packname.ins

3. move generated files to their destinations according the table and their
   suffixes as described in the wikibook. generally, using a local texmf
   directory in your home directory is a good idea. create subdirectories
   as needed
4. use `texhash` to update the package database

       texhash ~/texmf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the fun part is that if the package you are installing depends on other
CTAN packages, you have to resolve the dependencies yourself manually. So
please keep calm, carry on, and try hard to have some fun. Or what else you can
do?&lt;/p&gt;
&lt;p&gt;Awesome, right? If you don't feel so, then try harder.&lt;/p&gt;
&lt;p&gt;BTW, if you want to give it a shot, try compile &lt;code&gt;assignment.tex&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;EDIT: I found actually many frequently used latex packages are packaged up by
texlive as a texlive-latexextra in portage or texlive-latex-extra in
macports. You can just install them to save a lot of time.&lt;/p&gt;
&lt;p&gt;-EOF-&lt;/p&gt;</content><category term="latex"></category></entry><entry><title>论知人</title><link href="http://yuex.in/post/2016/09/how-to-know-people.html" rel="alternate"></link><published>2016-09-04T00:00:00+08:00</published><updated>2016-09-04T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2016-09-04:/post/2016/09/how-to-know-people.html</id><summary type="html">&lt;p&gt; 年纪愈长，见人愈多，愈知知人之难。据说曾文正公是通过看相来识人知人，更是著有《
冰鉴》将自己看相识人的本领总结一番。不过居今反古终归是不太保险，况且我也不打算
搞什么神秘主义。我倒是觉得诸葛先生的一段知人论，无论从理论还是实践上都是简洁明
了，简单有效，不敢独享，分享给大家 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 夫知人之性，莫难查焉。美恶既殊，情貌不一。&lt;br&gt;
  有温良而为诈者，有外恭而内自欺者，有外勇而内怯者，有尽力而不忠者。&lt;br&gt;
  然知人之道有七焉：&lt;br&gt;
  一曰，问之以是非而观其志；&lt;br&gt;
  二曰，穷之以辞辨而观其变；&lt;br&gt;
  三曰，资之以计谋而观其识；&lt;br&gt;
  四曰，告之以祸福而观其勇；&lt;br&gt;
  五曰，醉之以酒以观其性；&lt;br&gt;
  六曰，临之以利以观其廉；&lt;br&gt;
  七曰，期之以事以观其信  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 当然啦，也有人说这段收录在《将苑》的文字并非诸葛先生所作，实乃后人托书伪作。纪
晓岚纪大学士就是这种观点。但也有人说书中体现的思想倒也不出诸葛先生的思想之外。
但不管怎么说，阳明子讲于事上磨练，想来于事上见人识人，应该也不会出太大问题吧。&lt;/p&gt;
&lt;p&gt;-EOF-&lt;/p&gt;</summary><content type="html">&lt;p&gt; 年纪愈长，见人愈多，愈知知人之难。据说曾文正公是通过看相来识人知人，更是著有《
冰鉴》将自己看相识人的本领总结一番。不过居今反古终归是不太保险，况且我也不打算
搞什么神秘主义。我倒是觉得诸葛先生的一段知人论，无论从理论还是实践上都是简洁明
了，简单有效，不敢独享，分享给大家 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 夫知人之性，莫难查焉。美恶既殊，情貌不一。&lt;br&gt;
  有温良而为诈者，有外恭而内自欺者，有外勇而内怯者，有尽力而不忠者。&lt;br&gt;
  然知人之道有七焉：&lt;br&gt;
  一曰，问之以是非而观其志；&lt;br&gt;
  二曰，穷之以辞辨而观其变；&lt;br&gt;
  三曰，资之以计谋而观其识；&lt;br&gt;
  四曰，告之以祸福而观其勇；&lt;br&gt;
  五曰，醉之以酒以观其性；&lt;br&gt;
  六曰，临之以利以观其廉；&lt;br&gt;
  七曰，期之以事以观其信  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 当然啦，也有人说这段收录在《将苑》的文字并非诸葛先生所作，实乃后人托书伪作。纪
晓岚纪大学士就是这种观点。但也有人说书中体现的思想倒也不出诸葛先生的思想之外。
但不管怎么说，阳明子讲于事上磨练，想来于事上见人识人，应该也不会出太大问题吧。&lt;/p&gt;
&lt;p&gt;-EOF-&lt;/p&gt;</content><category term="dao"></category></entry><entry><title>CSAPP 之 cache 与 virtual memory</title><link href="http://yuex.in/post/2016/08/csapp-cache-virtual-memory.html" rel="alternate"></link><published>2016-08-27T00:00:00+08:00</published><updated>2016-08-27T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2016-08-27:/post/2016/08/csapp-cache-virtual-memory.html</id><summary type="html">&lt;h1&gt;Cache&lt;/h1&gt;
&lt;p&gt;cache 结构中有 set/line/block 的概念。一般是一个 cache 中有多个 set，每个 set 中有多条
line，每条 line 由多个字节 block 组成。而地址会被切分成三个部分来在这个三层结构中进
行缓存访问定位 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+---------------+------------+--------------+
|      Tag      |  Set Index | Block Offset |
+---------------+------------+--------------+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 其中有几条 line 就叫几路关联（n-way associative），因为 line 的访问是顺序查找的，相
同 set 内的缓存块可以缓存在任何一条 line 中。特别地，如果只有一个 set，叫全关联缓存
（full-associative）。如果每个 set 只有一条 line，叫直接映射缓存（direct-mapped）。
tag 用于在同一个 set 中定位访问的 line。&lt;/p&gt;
&lt;h1&gt;Virtual Memory&lt;/h1&gt;
&lt;p&gt; 在虚拟地址中 …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Cache&lt;/h1&gt;
&lt;p&gt;cache 结构中有 set/line/block 的概念。一般是一个 cache 中有多个 set，每个 set 中有多条
line，每条 line 由多个字节 block 组成。而地址会被切分成三个部分来在这个三层结构中进
行缓存访问定位 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+---------------+------------+--------------+
|      Tag      |  Set Index | Block Offset |
+---------------+------------+--------------+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 其中有几条 line 就叫几路关联（n-way associative），因为 line 的访问是顺序查找的，相
同 set 内的缓存块可以缓存在任何一条 line 中。特别地，如果只有一个 set，叫全关联缓存
（full-associative）。如果每个 set 只有一条 line，叫直接映射缓存（direct-mapped）。
tag 用于在同一个 set 中定位访问的 line。&lt;/p&gt;
&lt;h1&gt;Virtual Memory&lt;/h1&gt;
&lt;p&gt; 在虚拟地址中，一般是先进行地址翻译，再进行缓存查找。因为这样缓存的都是物理地址
，可以缓存不同虚拟地址所映射到的相同物理地址，提高缓存性能。而地址翻译所用到的
缓存叫 TLB（Translation Lookaside Buffer）。虚拟地址的切分如下 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;|&amp;lt;-   Virtual Page Number  -&amp;gt;|
+---------------+------------+--------------+
|    TLB Tag    |  TLB Index | Page Offset  |
+---------------+------------+--------------+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 对于多级地址翻译的，一般会将相关的状态 bit 存储在 page table entry 中的最后几个用于
存 Page Offset 的比特位上。最后一位通常是用于标识所标 page 是否有效。当然这只是
Intel 架构的通常做法，其它架构还是要参考其用户手册。&lt;/p&gt;
&lt;h1&gt;Garbage Collecton&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Mark&amp;amp;Sweep
1. depth-first or breadth-first mark starts from root
2. all heap scan sweep unmark marked block and free unmarked block
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;-EOF-&lt;/p&gt;</content><category term="csapp"></category></entry><entry><title>CSAPP 之 file descriptor</title><link href="http://yuex.in/post/2016/08/csapp-file-descriptor.html" rel="alternate"></link><published>2016-08-27T00:00:00+08:00</published><updated>2016-08-27T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2016-08-27:/post/2016/08/csapp-file-descriptor.html</id><summary type="html">&lt;p&gt; 当文件与进程结合时，有以下几个地方需要注意 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fd table -&amp;gt; open file table -&amp;gt; v-node table
1. fd table 是每进程独立的数据
2. open file table 是所有进程共享的系统全局数据。这里维护了每个打开文件的反
   向映射数目和当前光标位置。当映射数目为 0 时，文件会被关闭。每个 open() 都会
   导致一个新的 open file table entry，即使打开的是同一文件。
3. v-node table 是所有进程共享的系统全局数据。这里维护了每个文件的信息，如访
   问权限、文件类型、文件大小、三个时间等
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 基于以上事实，如果文件打开之后进行 fork，那么 fork 后的子母进程其实是共享了打开文
件的读写位置的，虽然 fd 是独立的。&lt;/p&gt;
&lt;p&gt; 当然 fd table 中的前三号是默认帮你打开到 stdin/stdout/stderr …&lt;/p&gt;</summary><content type="html">&lt;p&gt; 当文件与进程结合时，有以下几个地方需要注意 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fd table -&amp;gt; open file table -&amp;gt; v-node table
1. fd table 是每进程独立的数据
2. open file table 是所有进程共享的系统全局数据。这里维护了每个打开文件的反
   向映射数目和当前光标位置。当映射数目为 0 时，文件会被关闭。每个 open() 都会
   导致一个新的 open file table entry，即使打开的是同一文件。
3. v-node table 是所有进程共享的系统全局数据。这里维护了每个文件的信息，如访
   问权限、文件类型、文件大小、三个时间等
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 基于以上事实，如果文件打开之后进行 fork，那么 fork 后的子母进程其实是共享了打开文
件的读写位置的，虽然 fd 是独立的。&lt;/p&gt;
&lt;p&gt; 当然 fd table 中的前三号是默认帮你打开到 stdin/stdout/stderr 的。&lt;/p&gt;
&lt;p&gt;-EOF-&lt;/p&gt;</content><category term="csapp"></category></entry><entry><title>CSAPP 之 thread 与 signal</title><link href="http://yuex.in/post/2016/08/csapp-thread-signal.html" rel="alternate"></link><published>2016-08-27T00:00:00+08:00</published><updated>2016-08-27T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2016-08-27:/post/2016/08/csapp-thread-signal.html</id><summary type="html">&lt;h1&gt;Thread&lt;/h1&gt;
&lt;p&gt; 函数与 thread 结合起来有几个概念，还比较绕，这里总结一下。一个函数被称为 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;thread-safe：总是给出正确运行结果即使是从多个同步线程中反复调用
reentrant：不使用任何共享数据
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 需要注意的是，reentrant function 一定是 thread-safe 的，因为完全没有共享数据。而反
之则不然，例如一个 thread-safe 的函数可以使用同步机制来同步对于共享数据的访问。&lt;/p&gt;
&lt;p&gt; 另外，调用 thread-unsafe 函数的函数不一定就是 thread-unsafe 的。例如，如果只是被调
用的函数有一些共享数据，则完全可以通过同步来使其安全。&lt;/p&gt;
&lt;p&gt; 这里再给出 race 的定义 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;race：程序的执行结果的正确性取决于线程是如何调度的
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;thread 相关的函数 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pthread_create(tid, attr, func, arg): 创建线程。tid 用于返回线程号，func 是要
    运行的线程逻辑函数，arg 是一个指针，指向要传递的函数参数。成功返回 0
pthread_exit(rc): 结束当前线程
pthread_cancel …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h1&gt;Thread&lt;/h1&gt;
&lt;p&gt; 函数与 thread 结合起来有几个概念，还比较绕，这里总结一下。一个函数被称为 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;thread-safe：总是给出正确运行结果即使是从多个同步线程中反复调用
reentrant：不使用任何共享数据
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 需要注意的是，reentrant function 一定是 thread-safe 的，因为完全没有共享数据。而反
之则不然，例如一个 thread-safe 的函数可以使用同步机制来同步对于共享数据的访问。&lt;/p&gt;
&lt;p&gt; 另外，调用 thread-unsafe 函数的函数不一定就是 thread-unsafe 的。例如，如果只是被调
用的函数有一些共享数据，则完全可以通过同步来使其安全。&lt;/p&gt;
&lt;p&gt; 这里再给出 race 的定义 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;race：程序的执行结果的正确性取决于线程是如何调度的
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;thread 相关的函数 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pthread_create(tid, attr, func, arg): 创建线程。tid 用于返回线程号，func 是要
    运行的线程逻辑函数，arg 是一个指针，指向要传递的函数参数。成功返回 0
pthread_exit(rc): 结束当前线程
pthread_cancel(tid): 结束线程 tid
pthread_join(tid, ret): tid 是要 join 的线程号，ret 用于接收线程返回值，实际是
    一个指针，因此可以用于实现多值返回
pthread_detach(tid): 将线程 tid detach，会使线程在结束时自动被 reap 而无需 join
    。无须返回值的线程可以在线程开始时设
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Signal&lt;/h1&gt;
&lt;p&gt; 进程之间通过信号来进行同步中有很多小的细节容易被忽略。比如 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 信号有可能在安装 signal handler 之前被收到和处理，这时会使用默认 handler
2. 信号有可能在程序结束之后才被收到和处理，也就完全不会被处理了
3. fork 和 exec 之后，信号的 block 状态是不会改变的
4. 信号的收发应该在多核并行场景下考虑，而不是仅在单核并发场景下
5. pause() 可以用来等待信号，但信号完全有可能在 pause() 之前收到，而这有可能导
   致程序挂起不会退出。
6. signal handler 完全有可能被其它类型的信号打断。因此在 signal handler 中正式
   开始处理时，要先保存 errno 和 block 所有其它信号，并在处理完后恢复这两者。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 需要注意的是这里的 signal 指的是系统进程间用于同步的软信号，会导致相应的软件
signal hanlder 的触发。这一般发生在内核态向用户态切换时，如系统调用完成或者
context switch 发生。而硬件本身还有一类硬信号，一般是由 IO 设备产生，直接设置 CPU 的
中断线为高电平，再通过系统总线传入中断号。CPU 会在被每条指令结束之后检查中断线，
如果电平高位，就会根据相应的中断号调用系统中的 interrupt handler 处理。而这与进程
的软信号没有任何关系。其实某些情况下的 context switch 就是通过这种方式接收定时中
断实现的。&lt;/p&gt;
&lt;p&gt; 在编写 signal handler 时有以下几点要注意 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 逻辑尽量简单。比如 handler 只设置标志，然后由 main 来定期处理
2. 仅调用 async-singal-safe 函数。特别地，printf, sprintf, malloc, exit 都不在
   此类。唯一安全的产生输出的方式是使用 write
3. 保存和恢复 errno
4. 当访问共享数据时，通过 block 所有信号来尽量保证数据一致性
5. 将全局变量声明为 volatile。强制对其的每次读写都要通过内存访问进行，以免编
   译器对其进行寄存器缓存
6. 将全局 flag 声明为 sig_atomic_t，这可以使对其的读写变为原子操作。但需要注意
   的是即使进行了此声明，像 flag++/flag += 10 这种操作仍会是非原子操作，因为
   其本身就涉及到多条指令
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;signal 相关的函数有以下几个 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;waitpid(pid, statusp, options): 等待子进程 pid 结束。当 pid 为 0 时，等待任何 pid
    结束。当没有子进程需要被等待时，返回 -1 和 errno = ECHILD。当 waitpid 被信号
    中断时，返回 -1 和 errno = EINTR。成功时，返回结束子进程的 pid。
    statusp 用于返回子进程相关的结束信息
    options 可以设置 waitpid 的等待行为
        WNOHANG：立即返回，不挂起进程
        WUNTRACED: 等待子进程直到某个被 terminated 或者 stopped
        WCONTINUED: 等待子进程直接某个被 terminated 或者某个 stopped 子进程被
            SIGCONT 唤醒。
wait(statusp): 等同于 waitpid(-1, statusp, 0)

kill(pid, sig)：发送信号到进程 pid，失败返回 -1
kill(-pid, sig)：发送信号到进程组 pid，失败返回 -1
alarm(secs)：在 secs 秒之后向自己发送 SIGALARM 的定时信号

signal(sig, handler)：将 handler 安装绑定到信号 sig 上，handler 可以使用 SIG_IGN
    或 SIG_DFL 来指定忽略或者默认

sigprocmask(how, set, oldset)：使用 set 来设置 signal mask，旧的 set 会通过
    oldset 返回。其中 how 有三种模式，SIG_BLOCK, SIG_UNBLOCK, SIG_SETMASK
    示例
    sigemptyset(&amp;amp;mask);
    sigaddset(&amp;amp;mask, SIGINT);

    sigprocmask(SIG_BLOCK, &amp;amp;mask, &amp;amp;prev);
    /* critical region without interruption from SIGING */
    sigprocmask(SIG_SETMASK, &amp;amp;prev, NULL);

sigsuspend(mask)：临时使用 mask 代替当前 signal mask，并挂起进程直接接收到一个
    未被 block 的信号。一般用于等待某个信号的到达。一般需要先屏蔽信号以进行必
    要初始化，然后再通过 sigsuspend 取消屏蔽以进行信号处理
    示例
    volatile sig_atomic_t pid;

    sigchld_handler:
    int olderrno = errno
    pid = waitpid(-1, NULL, 0)
    errno = olderrno

    main:
    sigprocmask(SIG_BLOCK, &amp;amp;mask, &amp;amp;prev); /* block SIGCHLD */

    if (fork() == 0) /* child */
        exit(0);

    pid = 0;
    while (!pid) /* wait for SIGCHLD */
        /* cuz SIGCHLD is blocked, it can only be received CORRECTLY here */
        sigsuspend(&amp;amp;prev)

    sigprocmask(SIG_SETMASK, &amp;amp;prev, NULL); /* unblock SIGCHLD */

sigaction(sig, act, oldact)：用于显式指定 signal 的行为，以提高代码可移植性
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Nonlocal Jump&lt;/h1&gt;
&lt;p&gt;setjmp(env) 会将当前的 calling environment 存入 env，返回 0。而 longjmp(env, rc) 可以
跳转到最近调用的 setjmp(env) 处返回，返回值为 rc。可以如下组合来模拟 try catch&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;switch(setjmp(env)) {
    case 1:
        /* catch exception #1 */
        break;
    case 2:
        /* catch exception #2 */
        break;
    case 0:
        /* try_body */
        ...

        /* raise exception #1 */
        longjmp(env, 1);

        /* raise exception #2 */
        longjmp(env, 2);
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;sigsetjmp(env, savesigs) 和 siglongjmp(env, rc) 是对应的 signal handler 版本。其中的
savesigs 是个 flag，用于标示是否需要保存当前的 signal mask 到 env 中。这对组合可以用
来实现在接收某些信号时从 signal handler 中跳转到 main 开始的初始化部分，从而 restart
整个程序。&lt;/p&gt;
&lt;p&gt;-EOF-&lt;/p&gt;</content><category term="csapp"></category></entry><entry><title>CSAPP 之 asm 函数调用</title><link href="http://yuex.in/post/2016/08/csapp-asm-function.html" rel="alternate"></link><published>2016-08-24T00:00:00+08:00</published><updated>2016-08-24T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2016-08-24:/post/2016/08/csapp-asm-function.html</id><summary type="html">&lt;p&gt; 可能你已经比较熟悉 asm 函数调用的参数传递和地址跳转了，不过这里还是做一个简单的概
述。毕竟这是最基本的程序单元。&lt;/p&gt;
&lt;h1&gt; 地址跳转 &lt;/h1&gt;
&lt;p&gt;asm 中的地址跳转是通过 &lt;code&gt;call&lt;/code&gt; 和 &lt;code&gt;ret&lt;/code&gt; 进行的，但经常容易忽略的一个事实是 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;call 会将下一条指令的地址 (pc) 压栈
ret 会从栈上弹出一个地址到 pc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 也就是说这两条指令都会导致栈指针的变化。在 32 位系统中，由于参数传递是通过压栈进
行的，要注意的是 call 一般都是在参数传递压栈之后（也必须这样），所以函数调用的返
回地址总是紧临被调用函数的 stack frame。&lt;/p&gt;
&lt;p&gt; 在 32 位系统中，在每次调用后，被调用函数一般还要维护 esp 和 ebp。一般都是将 ebp 压到栈
上，紧临返回地址。&lt;code&gt;leave&lt;/code&gt; 是一个复合指令，用于弹栈以恢复 ebp。&lt;/p&gt;
&lt;h1&gt; 参数传递 &lt;/h1&gt;
&lt;p&gt;32 位系统中是依靠压栈进行参数传递的。而在 64 位系统中，小于等于六个的参数是通过寄
存器传递的 …&lt;/p&gt;</summary><content type="html">&lt;p&gt; 可能你已经比较熟悉 asm 函数调用的参数传递和地址跳转了，不过这里还是做一个简单的概
述。毕竟这是最基本的程序单元。&lt;/p&gt;
&lt;h1&gt; 地址跳转 &lt;/h1&gt;
&lt;p&gt;asm 中的地址跳转是通过 &lt;code&gt;call&lt;/code&gt; 和 &lt;code&gt;ret&lt;/code&gt; 进行的，但经常容易忽略的一个事实是 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;call 会将下一条指令的地址 (pc) 压栈
ret 会从栈上弹出一个地址到 pc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 也就是说这两条指令都会导致栈指针的变化。在 32 位系统中，由于参数传递是通过压栈进
行的，要注意的是 call 一般都是在参数传递压栈之后（也必须这样），所以函数调用的返
回地址总是紧临被调用函数的 stack frame。&lt;/p&gt;
&lt;p&gt; 在 32 位系统中，在每次调用后，被调用函数一般还要维护 esp 和 ebp。一般都是将 ebp 压到栈
上，紧临返回地址。&lt;code&gt;leave&lt;/code&gt; 是一个复合指令，用于弹栈以恢复 ebp。&lt;/p&gt;
&lt;h1&gt; 参数传递 &lt;/h1&gt;
&lt;p&gt;32 位系统中是依靠压栈进行参数传递的。而在 64 位系统中，小于等于六个的参数是通过寄
存器传递的，这就涉及一个顺序问题。一般是按照以下顺序传递参数的 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;64 位参数传递顺序：rdi, rsi, rdx, rcx, r8, r9
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 这里有一个助记法，屌丝屌操 69（dsdc89）。心里记住就好，别声张，都是文化人 ……&lt;/p&gt;
&lt;p&gt; 函数返回值无论 32 位还是 64 位都是一样的 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; 函数返回值：rax or eax
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 另外需要注意的是，intel 架构中浮点数的运算是通过单独的运算单元进行的，而不是通过
ALU。因此 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; 浮点型参数传递会使用单独的浮点寄存器进行，不会占用 ALU 的参数传递名额和顺序
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt; 特殊指定提要 &lt;/h1&gt;
&lt;p&gt;AT&amp;amp;T 风格的 asm 有些指令不太好记，这里简单提要一下 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;memory access: imm(ra, rb, mul) = ra + rb * mul + imm
lea imm(ra, rb, mul), dst: 不需要 src 是有效地址，一般用于优化加乘法计算
test sec, fir: 比较并设置 cc，之后使用条件跳转进行条件判断
               需要注意条件跳转中的顺序是 fir ?? sec，刚好反过来
if cond: 一般是 cond false 跳转，cond true falls through
         这样可以保证有 else 和无 else 语句时 asm 码结构一致
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;-EOF-&lt;/p&gt;</content><category term="csapp"></category></entry><entry><title>CSAPP 之 struct 填充</title><link href="http://yuex.in/post/2016/08/csapp-struct-padding.html" rel="alternate"></link><published>2016-08-24T00:00:00+08:00</published><updated>2016-08-24T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2016-08-24:/post/2016/08/csapp-struct-padding.html</id><summary type="html">&lt;p&gt; 在 C 语言中计算定义的 struct 类型的大小应该是每个 C 语言初学者绕不过的门槛。毕竟这是
一门系统编程语言，如果连自己定义的数据类型的内存大小都算不对，那么哪里还谈得上
压榨系统性能呢？struct 填充初看其实非常简单 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; 所有数据类型要对齐到其类型大小的内存地址上
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 但其实这其中还有几个点很容易被忽略。而一旦忽略了这几个点，在某些情况下就会计算
不对 struct 类型的大小 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. struct 类型的尾部要进行填充，以保证下一个连续的同类型的 struct 可以正常对齐
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 简言之就是，尾部要填充以保证后续地址对齐到其内含的最大的数据类型大小 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2. 32 位系统以的对齐以指针大小 4 为上限
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 这在 64 位系统中可能感觉不深，因为最大的基本数据长度就是 8 个字节嘛。但在 32 位系统中
，地址大小是 4 个字节，如果内含了 double 类型，需要注意这个变量是对齐到 4 而不是 8。因
为 double 大小已经超出了指针大小，会被视为复合类型而非基本类型。而在 64 …&lt;/p&gt;</summary><content type="html">&lt;p&gt; 在 C 语言中计算定义的 struct 类型的大小应该是每个 C 语言初学者绕不过的门槛。毕竟这是
一门系统编程语言，如果连自己定义的数据类型的内存大小都算不对，那么哪里还谈得上
压榨系统性能呢？struct 填充初看其实非常简单 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; 所有数据类型要对齐到其类型大小的内存地址上
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 但其实这其中还有几个点很容易被忽略。而一旦忽略了这几个点，在某些情况下就会计算
不对 struct 类型的大小 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. struct 类型的尾部要进行填充，以保证下一个连续的同类型的 struct 可以正常对齐
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 简言之就是，尾部要填充以保证后续地址对齐到其内含的最大的数据类型大小 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2. 32 位系统以的对齐以指针大小 4 为上限
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 这在 64 位系统中可能感觉不深，因为最大的基本数据长度就是 8 个字节嘛。但在 32 位系统中
，地址大小是 4 个字节，如果内含了 double 类型，需要注意这个变量是对齐到 4 而不是 8。因
为 double 大小已经超出了指针大小，会被视为复合类型而非基本类型。而在 64 位中，无论
是 double 的 8 还是 long double 的 16 都是作为基本类型对待的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;3. 嵌套 struct 的对齐也要按照 struct 基本法
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 一个常见的错误理解是在嵌套 struct 中将内层 struct 直接展开计算内存填充。这是不正确
的。内嵌 struct 要对齐其最大的基本类型大小上。当然，这也暗示了这个大小仍然是以指
针大小为上限的。&lt;/p&gt;
&lt;p&gt;-EOF-&lt;/p&gt;</content><category term="csapp"></category></entry><entry><title>CSAPP 之 IEEE 754</title><link href="http://yuex.in/post/2016/08/csapp-ieee754.html" rel="alternate"></link><published>2016-08-21T00:00:00+08:00</published><updated>2016-08-21T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2016-08-21:/post/2016/08/csapp-ieee754.html</id><summary type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/IEEE_floating_point"&gt;IEEE 754&lt;/a&gt; 规范了一种用来表示浮点数的方法。顾名思义，这种表示方法采用了浮动小
数点来调整精度的方法。&lt;a href="https://en.wikipedia.org/wiki/IEEE_floating_point"&gt;IEEE 754&lt;/a&gt; 相比整数的二的补码表示要复杂了不少，不过仔细
研究之后，这种表示方法还是相当巧妙的。这里只是对 &lt;a href="http://csapp.cs.cmu.edu/"&gt;csapp&lt;/a&gt; 一书中对 &lt;a href="https://en.wikipedia.org/wiki/IEEE_floating_point"&gt;IEEE 754&lt;/a&gt; 的
讲解进行一个总结，具体的还请参考 wikipedia 或者 &lt;a href="http://csapp.cs.cmu.edu/"&gt;csapp&lt;/a&gt; 原书相关章节。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/IEEE_floating_point"&gt;IEEE 754&lt;/a&gt; 中将数位分成了三部分 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;V = (-1)^s * M * 2^E
+-+-----------+-----------------------------------------+
|s|  exp (e)  |             frac (f)                    |
+-+-----------+-----------------------------------------+
f = .f1f2...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 而这个二进制所表示的具体数值 V 中的 M 和 E 都需要从 e 和 f 转换得来。而具体的转换规则要根
据数的类型来确定。&lt;a href="https://en.wikipedia.org/wiki/IEEE_floating_point"&gt;IEEE 754&lt;/a&gt; 中根据所表示的数的数值大小范围定义了三种类型的数
值。类型的区分是通过检查 e 的数值来确定的 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/IEEE_floating_point"&gt;IEEE 754&lt;/a&gt; 规范了一种用来表示浮点数的方法。顾名思义，这种表示方法采用了浮动小
数点来调整精度的方法。&lt;a href="https://en.wikipedia.org/wiki/IEEE_floating_point"&gt;IEEE 754&lt;/a&gt; 相比整数的二的补码表示要复杂了不少，不过仔细
研究之后，这种表示方法还是相当巧妙的。这里只是对 &lt;a href="http://csapp.cs.cmu.edu/"&gt;csapp&lt;/a&gt; 一书中对 &lt;a href="https://en.wikipedia.org/wiki/IEEE_floating_point"&gt;IEEE 754&lt;/a&gt; 的
讲解进行一个总结，具体的还请参考 wikipedia 或者 &lt;a href="http://csapp.cs.cmu.edu/"&gt;csapp&lt;/a&gt; 原书相关章节。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/IEEE_floating_point"&gt;IEEE 754&lt;/a&gt; 中将数位分成了三部分 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;V = (-1)^s * M * 2^E
+-+-----------+-----------------------------------------+
|s|  exp (e)  |             frac (f)                    |
+-+-----------+-----------------------------------------+
f = .f1f2...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 而这个二进制所表示的具体数值 V 中的 M 和 E 都需要从 e 和 f 转换得来。而具体的转换规则要根
据数的类型来确定。&lt;a href="https://en.wikipedia.org/wiki/IEEE_floating_point"&gt;IEEE 754&lt;/a&gt; 中根据所表示的数的数值大小范围定义了三种类型的数
值。类型的区分是通过检查 e 的数值来确定的。e 的变换中经常用到一个 Bias 偏移量，这里
先给出这个偏移量大小 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bias = 01...1
在计算涉及减 Bias 的运算时，可以使用二的补码
e - Bias = e + ~Bias + 1
但要注意结果也是二的补码表示
但是这个可以通过观察 e 或者结果的最高位来轻松确定正负
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Normalized Values&lt;/h1&gt;
&lt;p&gt; 这种类型的数值用于表示那些即不是很小也不是很大的数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;e 不是全 0，也不是全 1
E = e - Bias    ( 减 Bias 做偏移，保证可以表示负指数 )
M = 1 + f       ( 加 1 可以省掉一个数位，多表示一些数值 )
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Denormalized Values&lt;/h1&gt;
&lt;p&gt; 这种类型用于表示那些很小的数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;e 全 0
E = 1 - Bias    ( 用 1 减是为了衔接 Normalized Values，其最小就是 1 - Bias)
M = f           ( 没有加 1，为了衔接 e = 1 的 Normalized Values)
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Special Values&lt;/h1&gt;
&lt;p&gt; 这种类型用于表示很大的数和无法表示的数 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;e 全 1
f 全 0，表示 infinity
f 非全 0，表示 NaN，not a number
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Note&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/IEEE_floating_point"&gt;IEEE 754&lt;/a&gt; 的表示方法保证了二进表示的序和浮点表示的序是一致的。近似的默认模式
是 round to even。&lt;/p&gt;
&lt;p&gt; 通过观察 E 的转换规则，可以发现 Normalized Values 中的数值步长总是 x2 增加的。这使得
在数值变大时，步长也会变得更大，从而可以在更大的范围内表示数。而 Denormalized
Values 的 E 是固定的。这使得在 0 附近，数的步长是固定而均匀的。M 转换中的加 1 与否，保
证了 Normalized Values 和 Denormalized Values 之间的平滑衔接。需要注意的是均匀步长
结束在 e = 1 的 Normalized Values 的最大值处，而非最大的 Denormalized Values 处。因为
过渡是平滑的。&lt;/p&gt;
&lt;p&gt; 有一个小窍门来记忆 M 变换中的加 1 与否。只要记住没有 e=0 这种情况，也就是不存在
Denormalized Values。他们搞错了。e=0 其实就是 e=1，只是一旦你加了这个 1，f 的变换中
就没有加 1 了，因为你已经把它用掉了。&lt;/p&gt;
&lt;p&gt;-EOF-&lt;/p&gt;</content><category term="csapp"></category></entry><entry><title>匹兹堡见闻一二</title><link href="http://yuex.in/post/2016/08/pittsburgh-first-impression.html" rel="alternate"></link><published>2016-08-17T00:00:00+08:00</published><updated>2016-08-17T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2016-08-17:/post/2016/08/pittsburgh-first-impression.html</id><summary type="html">&lt;p&gt; 相比于费城、纽约、三潘这种城市，匹兹堡无论从历史、文化、科技上的名声都不太响亮
。但细说起来，匹兹堡也算得上是改变了美国历史进程的城市之一。法印战争的第一枪就
是在匹兹堡打响的。而法印战争作为英法七年战争的美洲战场，为美洲殖民地赢得了大量
土地自是不在话下。更重要的是，英国政府在战后为了弥补战争开支，开始向美洲殖民地
征收印花税，而这最终导致了美国独立战争的爆发。来到匹兹堡之后，我有见闻一二，分
享如下。&lt;/p&gt;
&lt;h1&gt; 哥伦布骑士团 &lt;/h1&gt;
&lt;p&gt; 我住的地方不远就是匹兹堡的 &lt;a href="https://en.wikipedia.org/wiki/Saint_Paul_Cathedral_(Pittsburgh,_Pennsylvania)"&gt; 圣保罗教堂 &lt;/a&gt;。当然，全世界各地有很多圣保罗教堂，这
里单说匹兹堡的这一间。这间教堂是罗马天主教匹兹堡教区的主堂。天主教堂的建筑风格
一般都是哥特式或者巴洛克式的，极为富丽堂皇和雄伟恢宏。不过这里想说的是教堂门口
正对路口那个奉给 &lt;a href="https://en.wikipedia.org/wiki/Knights_of_Columbus"&gt; 哥伦布骑士团 &lt;/a&gt; 的纪念碑。&lt;/p&gt;
&lt;p&gt;&lt;img alt="knight_of_columbus" src="/image/knight_of_columbus.jpg" style="display:block; margin: 0 auto"&gt;&lt;/p&gt;
&lt;p&gt; 图中两棵小松树之间的纪念碑就是奉给 &lt;a href="https://en.wikipedia.org/wiki/Knights_of_Columbus"&gt; 哥伦布骑士团 &lt;/a&gt; 的。哥伦布骑士团是在美国组建
的服务于天主教社区的志愿团体。成员必须是天主教徒。JFK 也是其成员之一。这里想说的
是 &lt;a href="https://en.wikipedia.org/wiki/Knights_of_Columbus"&gt; 哥伦布骑士团 &lt;/a&gt; 的信条 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In service to One&lt;br&gt;
  In service to all  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 这两句信条恰好契合于中国士人精神 “ 精一执中，民胞物与 …&lt;/p&gt;</summary><content type="html">&lt;p&gt; 相比于费城、纽约、三潘这种城市，匹兹堡无论从历史、文化、科技上的名声都不太响亮
。但细说起来，匹兹堡也算得上是改变了美国历史进程的城市之一。法印战争的第一枪就
是在匹兹堡打响的。而法印战争作为英法七年战争的美洲战场，为美洲殖民地赢得了大量
土地自是不在话下。更重要的是，英国政府在战后为了弥补战争开支，开始向美洲殖民地
征收印花税，而这最终导致了美国独立战争的爆发。来到匹兹堡之后，我有见闻一二，分
享如下。&lt;/p&gt;
&lt;h1&gt; 哥伦布骑士团 &lt;/h1&gt;
&lt;p&gt; 我住的地方不远就是匹兹堡的 &lt;a href="https://en.wikipedia.org/wiki/Saint_Paul_Cathedral_(Pittsburgh,_Pennsylvania)"&gt; 圣保罗教堂 &lt;/a&gt;。当然，全世界各地有很多圣保罗教堂，这
里单说匹兹堡的这一间。这间教堂是罗马天主教匹兹堡教区的主堂。天主教堂的建筑风格
一般都是哥特式或者巴洛克式的，极为富丽堂皇和雄伟恢宏。不过这里想说的是教堂门口
正对路口那个奉给 &lt;a href="https://en.wikipedia.org/wiki/Knights_of_Columbus"&gt; 哥伦布骑士团 &lt;/a&gt; 的纪念碑。&lt;/p&gt;
&lt;p&gt;&lt;img alt="knight_of_columbus" src="/image/knight_of_columbus.jpg" style="display:block; margin: 0 auto"&gt;&lt;/p&gt;
&lt;p&gt; 图中两棵小松树之间的纪念碑就是奉给 &lt;a href="https://en.wikipedia.org/wiki/Knights_of_Columbus"&gt; 哥伦布骑士团 &lt;/a&gt; 的。哥伦布骑士团是在美国组建
的服务于天主教社区的志愿团体。成员必须是天主教徒。JFK 也是其成员之一。这里想说的
是 &lt;a href="https://en.wikipedia.org/wiki/Knights_of_Columbus"&gt; 哥伦布骑士团 &lt;/a&gt; 的信条 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In service to One&lt;br&gt;
  In service to all  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 这两句信条恰好契合于中国士人精神 “ 精一执中，民胞物与 ” 中的 “ 精一 ” 与 “ 民胞 ”。所以你
说这东西方的价值观到底又有多大的差别呢？&lt;/p&gt;
&lt;h1&gt; 送你上西天 &lt;/h1&gt;
&lt;p&gt;CMU 校园的中央校区那里有一个 &lt;a href="https://en.wikipedia.org/wiki/Walking_to_the_Sky"&gt;Walking to the Sky&lt;/a&gt; 的复制品。很多人对这件雕塑所
要传达的意义表示费解，觉得这和 CMU 没有什么关系，并戏称其为 “ 送你上西天 ” 来调侃学校
课业之重。&lt;/p&gt;
&lt;p&gt;&lt;img alt="walking_to_the_sky" src="/image/walking_to_the_sky.jpg" style="display:block; margin: 0 auto"&gt;&lt;/p&gt;
&lt;p&gt; 不过在我看来，这件作品所要传达的意义很明显。今日他人助你波罗密，明日你助他人波
罗密。写到这里，突然想到子张问行，说来就是 “ 忠信笃敬走天下 ”，不管是地球的这一边
还是那一边。我觉得老祖宗是诚不我欺也。&lt;/p&gt;
&lt;h1&gt; 卡大善人的遗产 &lt;/h1&gt;
&lt;p&gt;CMU 最早是由卡内基技术学院和梅隆学院并校而来的。这两所学院都是用捐赠人的名字命名
的。卡内基指的是 &lt;a href="https://en.wikipedia.org/wiki/Andrew_Carnegie"&gt; 安德鲁卡内基 &lt;/a&gt;。卡内基出身社会底层，依靠技术创新成为了美国钢
铁大亨。然而有钱之后，他选择将这些钱全部捐出去，盖博物馆，建图书馆，修国家公园
。为的就是能给像他一样出身贫寒的人提供接受教育的机会。而匹兹堡作为卡内基的发家
之城，更是存有大量的以卡内基名字命名的公共设施。卡内基之于匹兹堡很像韦恩之于高
谭市。&lt;/p&gt;
&lt;p&gt; 卡内基一生总共捐赠了相当于 2015 年 770 亿美元的财富。在其弥留之际，卡内基更是将自己
的一生总结为以下的格言，颇有陶朱公范蠡的风范。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To spend the first third of one's life, getting all the education one can.&lt;br&gt;
  To spend the next third, making all the money one can.&lt;br&gt;
  To spend the last third, giving it all away for worthwhile causes.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 当然，卡内基的一生也有值得讨论的地方。但此间世界哪里有十全十美的人事物。如果是
以求全责备的心态向外看，终归是自己得不到进步，而与他人无碍。卡大善人还有一句名
言，可能是大家更为熟知的 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 人这一辈子，最可耻的就是，人死了，钱没花了 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 当然，这些钱要花在值得花的地方才叫花得值。&lt;/p&gt;
&lt;h1&gt; 后记 &lt;/h1&gt;
&lt;p&gt; 要说这些见闻有多稀奇呢？实在是一点也不稀奇，都是老祖宗们几千年来反复念叨的东西。&lt;/p&gt;
&lt;p&gt;-EOF-&lt;/p&gt;</content><category term="dao"></category></entry><entry><title>吾道一贯有感</title><link href="http://yuex.in/post/2015/03/wu-dao-yi-guan.html" rel="alternate"></link><published>2015-03-08T00:00:00+08:00</published><updated>2015-03-08T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2015-03-08:/post/2015/03/wu-dao-yi-guan.html</id><summary type="html">&lt;p&gt; 最近在看梁任公所辑的《曾文正公嘉言钞》，有一些浅见，叨烦如下。&lt;/p&gt;
&lt;p&gt;《大学》一文指出了儒学的修业的八目。其中最后四目是修身、齐家、治国、平天下。也就是说儒学之道，当从每个人的自身做起，一步步由近及远地推行，最后使大道行于天下。至于这四目的每一目具体怎么实施，我以前的认识是这样的：修身这一目理论上其实最容易，管好自己即可，实在不行像宗教家们的教诲的那样做一个大善人也算是违道不远嘛。齐家这一目呢，做成一个好儿子、好丈夫、好父母即可，对于家庭成员不好的行为要及时劝诫。而对于治国和平天下呢，就是选用有志于此道品德好的人，制定赏罚分明的法令诸如此类。&lt;/p&gt;
&lt;p&gt; 不难看出，这四目修行的具体的方法其实是不一样的。特别是在这种认识下，一旦由己身推广到他人，便不可避免地引入赏刑与说教。我倒并不是对法家和兵家有什么偏见，只是觉得从学理上而言，这样做其实是破坏了儒家理论体系的完备性。对于 “ 吾道一贯 ” 的儒学而言，这种理解也很难说是合于一。此外，这种做法还有一个流弊，就是具体的实行很大程度上是取决于中层的执行者的，非常容易转变为机械执行法令，不注重背后精神与具体情况，导致大道转变为独裁，教化转变为洗脑。这种流弊可从朱子注 “ 亲民 ” 为 “ 新民 ” 的后世影响略知一二。&lt;/p&gt;
&lt;p&gt; 而在《曾文正公嘉言钞》中，曾文正公反复强调的就是社会变革，也就是大道之行，的最有效的办法是促成风气。而促成风气最有效的办法就是由在上位者以身作则。简而言之就是 “ 倡而为风 …&lt;/p&gt;</summary><content type="html">&lt;p&gt; 最近在看梁任公所辑的《曾文正公嘉言钞》，有一些浅见，叨烦如下。&lt;/p&gt;
&lt;p&gt;《大学》一文指出了儒学的修业的八目。其中最后四目是修身、齐家、治国、平天下。也就是说儒学之道，当从每个人的自身做起，一步步由近及远地推行，最后使大道行于天下。至于这四目的每一目具体怎么实施，我以前的认识是这样的：修身这一目理论上其实最容易，管好自己即可，实在不行像宗教家们的教诲的那样做一个大善人也算是违道不远嘛。齐家这一目呢，做成一个好儿子、好丈夫、好父母即可，对于家庭成员不好的行为要及时劝诫。而对于治国和平天下呢，就是选用有志于此道品德好的人，制定赏罚分明的法令诸如此类。&lt;/p&gt;
&lt;p&gt; 不难看出，这四目修行的具体的方法其实是不一样的。特别是在这种认识下，一旦由己身推广到他人，便不可避免地引入赏刑与说教。我倒并不是对法家和兵家有什么偏见，只是觉得从学理上而言，这样做其实是破坏了儒家理论体系的完备性。对于 “ 吾道一贯 ” 的儒学而言，这种理解也很难说是合于一。此外，这种做法还有一个流弊，就是具体的实行很大程度上是取决于中层的执行者的，非常容易转变为机械执行法令，不注重背后精神与具体情况，导致大道转变为独裁，教化转变为洗脑。这种流弊可从朱子注 “ 亲民 ” 为 “ 新民 ” 的后世影响略知一二。&lt;/p&gt;
&lt;p&gt; 而在《曾文正公嘉言钞》中，曾文正公反复强调的就是社会变革，也就是大道之行，的最有效的办法是促成风气。而促成风气最有效的办法就是由在上位者以身作则。简而言之就是 “ 倡而为风，效而成俗 ”。由于 “ 上有所好，下必甚焉 ”，其实上位者也只需要做到 “ 如好好色，如恶恶臭 ” 就可以了。而其效果，正如孟子所言 “ 君子之德，风也；小人之德，草也。草上之风，必偃。” 曾文正公则形容其为 “ 挠万物莫疾乎风 ”。这样一来，大道之行不再完全依赖于中层执行者。一旦有了这种认识，选人用人也就没有理由再要求道德完人了，只要有志亲民，就可以 “ 掩其所短，用其所长 ” 地委以适用了。&lt;/p&gt;
&lt;p&gt; 办法看上去好像很简单，但其中的妙处还不只是简单（As Simple As Stupid）。其最妙的地方是在于契合 “ 吾道一贯 ”。在这种修业的方法之下，修身、齐家、治国、平天下这四目便不再有方法上的区别，而只有功夫深浅上的差异。功夫浅一点的，便把个人自身的修养搞好 ; 深一点的，可以影响感召到一家之内的几口人；再深一点的，影响一国之人；更深的，一国之境也不能限制你的浩然之气，进而影响天下人。由此一来，四目也就不再割裂而离散，而是自然而然地渐进而连续。率性之道的本体是唯一的，而修道之教的功夫则有深浅。这也正是契合于《中庸》“ 为物不二，为物不测 ” 的表述。假以时日，或许真的可以 “ 赞天地之化育，与天地同参 ”。这时就是穿越时空，来影响后世之人。&lt;/p&gt;
&lt;p&gt; 抓住了这一点，再往四书上想一想，帝舜的 “ 隐恶而扬善 ” 真的是有大智慧在里面。以前我的看法是，有恶就应该摆到桌面上，审问之、慎思之、明辨之，才算是正确的做法。现在看来，这也只能算是年少轻狂的小聪小明，实在算不上是人生的大智慧。对于见道、明道，这或许还能有些帮助，但对于行道则没什么用处。由此看来，孔子这一句 “ 舜其真大知也与 ” 的感叹真不是白来的。&lt;/p&gt;
&lt;p&gt; 此外，由曾文正公这一风气之说，猜测开来，似乎他对宋明理学中的气学也颇有研究。说来也是个遗憾，理学和心学都已经发扬光大，但是气学这一派似乎张横渠之后便没有大家发扬。这对于学理上的探究真是个损失，但这也正是有志四为的后来人可以用功的方向，倘若再辅以一定的事功，比肩阳明子还是大可期待的。&lt;/p&gt;
&lt;p&gt; 以上。&lt;/p&gt;
</content><category term="dao"></category></entry><entry><title>使用 virtualenv 要注意的地方</title><link href="http://yuex.in/post/2015/03/notes-for-virtualenv.html" rel="alternate"></link><published>2015-03-02T00:00:00+08:00</published><updated>2015-03-02T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2015-03-02:/post/2015/03/notes-for-virtualenv.html</id><summary type="html">&lt;p&gt;virtualenv 是 pypi 当中的一个包，用来虚拟一个 python 环境。实现上就是单独建立一个 locallib，并将 python 和 pip 的命令解析到这个 local lib 中。一般而言是将这个 lib 放在 /home/user/ 的家目录下，区别于系统的 /usr/lib 目录。将之用于开发，可以隔离各个包的依赖关系。这在开发过程中，可以保证在版本变化的情况下，已安装好的包的依赖关系的版本不变。&lt;/p&gt;
&lt;p&gt; 由于目前 python2 和 python3 在很多 linux 发行版的源当中都是共存的，所以在使用 virtualenv 的时候要特别注意，用 &lt;code&gt;mkvirtualenv&lt;/code&gt; 新建 virtualenv 之后，其中的 python 和 pip 解析到什么样的命令。否则可以会造成安装偏差。&lt;/p&gt;
&lt;p&gt; 以笔者的系统为例 (archlinux, 2013-03-02)，python2.7 在系统上的命令是 python2 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;virtualenv 是 pypi 当中的一个包，用来虚拟一个 python 环境。实现上就是单独建立一个 locallib，并将 python 和 pip 的命令解析到这个 local lib 中。一般而言是将这个 lib 放在 /home/user/ 的家目录下，区别于系统的 /usr/lib 目录。将之用于开发，可以隔离各个包的依赖关系。这在开发过程中，可以保证在版本变化的情况下，已安装好的包的依赖关系的版本不变。&lt;/p&gt;
&lt;p&gt; 由于目前 python2 和 python3 在很多 linux 发行版的源当中都是共存的，所以在使用 virtualenv 的时候要特别注意，用 &lt;code&gt;mkvirtualenv&lt;/code&gt; 新建 virtualenv 之后，其中的 python 和 pip 解析到什么样的命令。否则可以会造成安装偏差。&lt;/p&gt;
&lt;p&gt; 以笔者的系统为例 (archlinux, 2013-03-02)，python2.7 在系统上的命令是 python2，pip 是 pip2，
而 virtualenv 安装之后，默认的解析是 python2/python/python2.7, pip/pip2.7。如果不检查就直接用习惯的
pip2 安装的话，新的包就会安装到系统 lib 而不是新建的 virtualenv lib 中了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkvirtualenv foo
$ lsvirtualenv foo
$ workon foo
$ cdvirtualenv
$ ll bin
&lt;span class="o"&gt;(&lt;/span&gt; 注意查看 python 和 pip 的名称 &lt;span class="o"&gt;)&lt;/span&gt;
$ cdproject
$ finish the work
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 另外，安装 virtualenv 的时候也要注意使用的是 pip2 还是 pip3，不同版本下的 virtualenv 的命令解析名称也是不一样的。&lt;/p&gt;
&lt;p&gt; 更多信息，请访问 &lt;a href="http://www.virtualenv.org/"&gt;virtualenv&lt;/a&gt;&lt;/p&gt;</content><category term="python"></category><category term="virtualenv"></category></entry><entry><title>《中庸》版本推荐</title><link href="http://yuex.in/post/2015/02/zhongyong-version.html" rel="alternate"></link><published>2015-02-22T00:00:00+08:00</published><updated>2015-02-22T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2015-02-22:/post/2015/02/zhongyong-version.html</id><summary type="html">&lt;p&gt; 最近利用过年放假的时间仔细研读了《中庸》，对于相关版本的选择略有心得，简录如下，还是闲言少叙，先上结论：我推荐以下两个版本的讲解 &lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt; 张居正的《中庸》皇家读本 &lt;a class="footnote-reference" href="#id4" id="id2"&gt;[1]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; 南怀瑾的《中庸讲记》 &lt;a class="footnote-reference" href="#id7" id="id3"&gt;[2]&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;《中庸》是由朱子作主，从《礼记》中提出而单成一书，断句集注，并且提升到四书的高度。《中庸》的评价甚高，素来有 “ 儒学心法 ” 之称。与《大学》不同是，朱子章句并没有打乱《中庸》的前后顺序，因此也就不像阳明子刊印《大学》古本那样，有一个章句和原本的版本之争。而且今天流传下来的《中庸》注解也基本都是顺承朱子章句集注而来。&lt;/p&gt;
&lt;p&gt; 虽然集注版本并无太多分别，但因为《中庸》是讲心法，许多地方如果只从集注的字面上理解，很难窥知文字背后的深意。最好的方式莫过于通过大家的解读，了解文章的前后逻辑，然后再结合个人的生活经验，不断体悟，最终得出自己的理解。&lt;/p&gt;
&lt;p&gt; 对于朱子章句的正统讲法，这里推荐张居正的《中庸》皇家读本。张阁老讲学庸，基本是顺承朱子章句集注的内容而来，只是在文章坚深之处，针对受业对象为天子的情况，进行了适当的引申和联系。遗憾的是张阁老相去阳明子不过二三世 …&lt;/p&gt;</summary><content type="html">&lt;p&gt; 最近利用过年放假的时间仔细研读了《中庸》，对于相关版本的选择略有心得，简录如下，还是闲言少叙，先上结论：我推荐以下两个版本的讲解 &lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt; 张居正的《中庸》皇家读本 &lt;a class="footnote-reference" href="#id4" id="id2"&gt;[1]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; 南怀瑾的《中庸讲记》 &lt;a class="footnote-reference" href="#id7" id="id3"&gt;[2]&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;《中庸》是由朱子作主，从《礼记》中提出而单成一书，断句集注，并且提升到四书的高度。《中庸》的评价甚高，素来有 “ 儒学心法 ” 之称。与《大学》不同是，朱子章句并没有打乱《中庸》的前后顺序，因此也就不像阳明子刊印《大学》古本那样，有一个章句和原本的版本之争。而且今天流传下来的《中庸》注解也基本都是顺承朱子章句集注而来。&lt;/p&gt;
&lt;p&gt; 虽然集注版本并无太多分别，但因为《中庸》是讲心法，许多地方如果只从集注的字面上理解，很难窥知文字背后的深意。最好的方式莫过于通过大家的解读，了解文章的前后逻辑，然后再结合个人的生活经验，不断体悟，最终得出自己的理解。&lt;/p&gt;
&lt;p&gt; 对于朱子章句的正统讲法，这里推荐张居正的《中庸》皇家读本。张阁老讲学庸，基本是顺承朱子章句集注的内容而来，只是在文章坚深之处，针对受业对象为天子的情况，进行了适当的引申和联系。遗憾的是张阁老相去阳明子不过二三世，心学一派的很多见解并没有在这份讲解中或援引、或批判。&lt;/p&gt;
&lt;p&gt; 所以这里额外推荐南怀瑾的《中庸讲记》。南师讲解儒家经典一直是采用 “ 经史合参 ” 的方法，也就是用史解经。除此之外，由于南师早年研习佛法，也会时常用禅宗学案来解经，倒也算是在一定程度上从阳明心学的视角解读《中庸》了。很多地方的理解是和朱子章句有不同的，非常值得一看。&lt;/p&gt;
&lt;p&gt; 另外，非常推荐先看黄仁宇先生所著的《万历十五年》，再来看张居正的《中庸》皇家读本。&lt;/p&gt;
&lt;blockquote&gt;
子曰：今吾于人也，听其言而观其行 &lt;/blockquote&gt;
&lt;p&gt; 倒也别有一番滋味和感慨。&lt;/p&gt;
&lt;p&gt; 以上。&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt; 可以参考华侨出版社的 &lt;a class="reference external" href="http://book.douban.com/subject/3610165/"&gt; 张居正讲解大学中庸 &lt;/a&gt;，网上可以找到一些手工整理的 &lt;a class="reference external" href="http://www.zhwhdjt.com/bencandy.php?fid=348&amp;amp;id=17938"&gt; 在线资源 &lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt; 由于南师的《中庸讲记》尚未整理结册出版，网络上有一些手工整理的资料 &lt;a class="reference external" href="http://www.quanxue.cn/CT_NanHuaiJin/ZhongYongIndex.html"&gt; 可供参考 &lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="confucianism"></category></entry><entry><title>辩证唯物主义中的矛盾</title><link href="http://yuex.in/post/2015/02/dialectical-materialism-contradiction.html" rel="alternate"></link><published>2015-02-15T00:00:00+08:00</published><updated>2015-02-15T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2015-02-15:/post/2015/02/dialectical-materialism-contradiction.html</id><summary type="html">&lt;p&gt; 我的关于于辩证唯物主义的浅见仅仅来源于课堂，以下论证必定有不尽的疏漏，敬乞宽谅。&lt;/p&gt;
&lt;p&gt; 辩证唯物主义的基本观点可以概括如下 &lt;a class="footnote-reference" href="#id4" id="id2"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 世界的本元是物质，世间的万事万物都是由物质派生出来的。&lt;/p&gt;
&lt;p&gt; 物质是运动的，运动是有规律的，规律是客观的，不以人的意志为转移的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 任何一个哲学理论，都只是对客观世界的一个解释。没有对错之分，只有将其应用于改造世界之时的是否合适之别。用马克思自己的话讲，就是 &lt;/p&gt;
&lt;blockquote&gt;
哲学家们只是用不同的方式解释世界，而问题在于改造世界 &lt;/blockquote&gt;
&lt;p&gt; 这也一如数学中的公理系统。更具体的，我们可以用欧氏几何和非欧几何作例。二者无关对错，只有不同应用场景下的合适与否。但有一个最低的要求，就是这个理论必须是自洽的。&lt;/p&gt;
</summary><content type="html">&lt;p&gt; 我的关于于辩证唯物主义的浅见仅仅来源于课堂，以下论证必定有不尽的疏漏，敬乞宽谅。&lt;/p&gt;
&lt;p&gt; 辩证唯物主义的基本观点可以概括如下 &lt;a class="footnote-reference" href="#id4" id="id2"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 世界的本元是物质，世间的万事万物都是由物质派生出来的。&lt;/p&gt;
&lt;p&gt; 物质是运动的，运动是有规律的，规律是客观的，不以人的意志为转移的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 任何一个哲学理论，都只是对客观世界的一个解释。没有对错之分，只有将其应用于改造世界之时的是否合适之别。用马克思自己的话讲，就是 &lt;/p&gt;
&lt;blockquote&gt;
哲学家们只是用不同的方式解释世界，而问题在于改造世界 &lt;/blockquote&gt;
&lt;p&gt; 这也一如数学中的公理系统。更具体的，我们可以用欧氏几何和非欧几何作例。二者无关对错，只有不同应用场景下的合适与否。但有一个最低的要求，就是这个理论必须是自洽的。&lt;/p&gt;
&lt;p&gt; 在辩证唯物主义中，顾名思义，应是物质一元论。物质派生出了世间的万事万物。除了意识之外，这派生出的万事万物当中自然也应该包括世界的客观规律。但是从科学上的认识来讲，规律是可以改变物质的，如衰变和聚变。于是作为补充，辩证唯物主义用以下的观点解释规律的派生 &lt;a class="footnote-reference" href="#id6" id="id3"&gt;[2]&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 矛盾是事物普遍联系的根本内容。&lt;/p&gt;
&lt;p&gt; 矛盾则深存于事物内部和事物之间，从而促成了发展。&lt;/p&gt;
&lt;p&gt; 发展是永恒的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 换言之，世界的运动来源于事物本身的矛盾。那么世界的本元应该是矛盾才对，而物质也应该从矛盾中派生。否则，世界本元之物质的内部还存在其它实体，这又如何称得上是本元呢？如此，则至少辩证唯物主义的名字是不恰当的，应该称之为 &lt;em&gt; 辩证唯矛盾主义 &lt;/em&gt; 。&lt;/p&gt;
&lt;p&gt; 这似乎并不是一个很严重的问题。我们可以选择性地忽略这个命名的问题，而只考虑这个理论本身。由于矛盾的普遍存在，作为世间万事万物之一的辩证唯物主义，其内部自然也应该深存矛盾。在辩证唯物主义的世界观中，具有两个基本特征：“ 普遍联系 ” 和 “ 永恒发展 ”。而这个基本特征之间，又通过 “ 矛盾 ” 这一核心而关联起来。正是由于世界的永恒发展，我们作为意识存在的主体必须 “ 与时俱进 ”，才能更好地改造世界。但由于发展是由矛盾所驱动，而矛盾又是普遍存在的，我们改造世界的目的就在于正视矛盾、直面矛盾、处理矛盾，最终减少矛盾达到和谐。而矛盾解决一个必定还会产生一个或者多个矛盾。否则，我们便可以使世界的矛盾总数不断减少，直到有一天世界无矛盾，世界也就不会再发展了，这就与 “ 永恒发展 ” 这一基本特征相违背了。从一个理论自己的观点出发，得证这个理论本身存在矛盾，这个理论自然不应该是自洽的。&lt;/p&gt;
&lt;p&gt; 可见一旦引入矛盾作为世界的本元，辩证唯物主义的世界观中就不再有和谐的位置。而这又与我们改造世界的最终目的相违背，故此才不得以引入 “ 对立统一 ” 作为矛盾的定义。而这个对立统一的特征又很难说是那个我们常用的 “ 矛盾 ” 一词所表达的 “ 对立 ” 之意的某一个翻版解释。“ 对立 ” 与 “ 统一 ” 作为相对立的概念，其本身就不可能同时存在于一个静止的状态。任何事物中的对立与统一必是体现在一个动态过程中的不同阶段。与其用我们语言中的 “ 矛盾 ” 一词指代这个概念，不如用我们语言中的 “ 规律 ” 一词更为贴切。并且还应该将 “ 为什么会动 ” 这一命题上升到与 “ 为什么存在 ” 这一命题相同的高度，而不是试图用其中的某一个命题去解释另一个。&lt;/p&gt;
&lt;p&gt; 所以在辩证唯物主义中，为了使其更加完善，至少有两个方向可以走 &lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt; 放弃世界一元的观点。&lt;/li&gt;
&lt;li&gt; 将运动的规律作为世界的本元。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 以上。&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://zh.wikipedia.org/wiki/%E8%BE%A9%E8%AF%81%E5%94%AF%E7%89%A9%E4%B8%BB%E4%B9%89"&gt; 辩证唯物主义 &lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://zh.wikipedia.org/wiki/%E5%94%AF%E7%89%A9%E8%BE%AF%E8%AD%89%E6%B3%95"&gt; 唯物辩证法 &lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="dao"></category></entry><entry><title>Vim 技巧之 Meta 键</title><link href="http://yuex.in/post/2015/02/vim-technique-meta-key.html" rel="alternate"></link><published>2015-02-08T00:00:00+08:00</published><updated>2015-02-08T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2015-02-08:/post/2015/02/vim-technique-meta-key.html</id><summary type="html">&lt;p&gt; 在 terminal 环境下使用 Vim 时，Meta 键（亦即 Alt）一般是不起作用的 &lt;sup id="fnref-!map-alt-keys"&gt;&lt;a class="footnote-ref" href="#fn-!map-alt-keys"&gt;1&lt;/a&gt;&lt;/sup&gt;。但是随着插件越用越多，绑定的组合键越来越多，按键难免会出现越来越不够用的情况。若是可以使用 Meta 键进行键位组合，至少会增加 26 个组合键。这里给出一个通过配置 Vim 来启用 Meta 组合键的方法。&lt;/p&gt;
&lt;p&gt; 还是直接上代码。这里启用了从 &lt;code&gt;&amp;lt;M-a&amp;gt;&lt;/code&gt; 到 &lt;code&gt;&amp;lt;M-z&amp;gt;&lt;/code&gt; 的 26 组合键和从 &lt;code&gt;&amp;lt;M-0&amp;gt;&lt;/code&gt; 到 &lt;code&gt;&amp;lt;M-9&amp;gt;&lt;/code&gt; 的 10 个组合键。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; range&lt;span class="p"&gt;(&lt;/span&gt;char2nr&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; char2nr&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; nr2char&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    exec &lt;span class="s2"&gt;&amp;quot;set &amp;lt;M-&amp;quot;&lt;/span&gt;.&lt;span class="k"&gt;i&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;&amp;gt;=\&amp;lt;Esc&amp;gt;&amp;quot;&lt;/span&gt;.&lt;span class="k"&gt;i&lt;/span&gt;
    exec &lt;span class="s2"&gt;&amp;quot;inoremap \&amp;lt;Esc …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt; 在 terminal 环境下使用 Vim 时，Meta 键（亦即 Alt）一般是不起作用的 &lt;sup id="fnref-!map-alt-keys"&gt;&lt;a class="footnote-ref" href="#fn-!map-alt-keys"&gt;1&lt;/a&gt;&lt;/sup&gt;。但是随着插件越用越多，绑定的组合键越来越多，按键难免会出现越来越不够用的情况。若是可以使用 Meta 键进行键位组合，至少会增加 26 个组合键。这里给出一个通过配置 Vim 来启用 Meta 组合键的方法。&lt;/p&gt;
&lt;p&gt; 还是直接上代码。这里启用了从 &lt;code&gt;&amp;lt;M-a&amp;gt;&lt;/code&gt; 到 &lt;code&gt;&amp;lt;M-z&amp;gt;&lt;/code&gt; 的 26 组合键和从 &lt;code&gt;&amp;lt;M-0&amp;gt;&lt;/code&gt; 到 &lt;code&gt;&amp;lt;M-9&amp;gt;&lt;/code&gt; 的 10 个组合键。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; range&lt;span class="p"&gt;(&lt;/span&gt;char2nr&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; char2nr&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; nr2char&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    exec &lt;span class="s2"&gt;&amp;quot;set &amp;lt;M-&amp;quot;&lt;/span&gt;.&lt;span class="k"&gt;i&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;&amp;gt;=\&amp;lt;Esc&amp;gt;&amp;quot;&lt;/span&gt;.&lt;span class="k"&gt;i&lt;/span&gt;
    exec &lt;span class="s2"&gt;&amp;quot;inoremap \&amp;lt;Esc&amp;gt;&amp;quot;&lt;/span&gt;.&lt;span class="k"&gt;i&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot; &amp;lt;M-&amp;quot;&lt;/span&gt;.&lt;span class="k"&gt;i&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;endfor&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; range&lt;span class="p"&gt;(&lt;/span&gt;char2nr&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; char2nr&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;9&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; nr2char&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    exec &lt;span class="s2"&gt;&amp;quot;set &amp;lt;M-&amp;quot;&lt;/span&gt;.&lt;span class="k"&gt;i&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;&amp;gt;=\&amp;lt;Esc&amp;gt;&amp;quot;&lt;/span&gt;.&lt;span class="k"&gt;i&lt;/span&gt;
    exec &lt;span class="s2"&gt;&amp;quot;inoremap \&amp;lt;Esc&amp;gt;&amp;quot;&lt;/span&gt;.&lt;span class="k"&gt;i&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot; &amp;lt;M-&amp;quot;&lt;/span&gt;.&lt;span class="k"&gt;i&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;endfor&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 在上面这段代码中，我们将诸如 &lt;code&gt;&amp;lt;M-h&amp;gt;&lt;/code&gt; 这样的值设置为 &lt;code&gt;&amp;lt;Esc&amp;gt;h&lt;/code&gt;，然后用 &lt;code&gt;&amp;lt;M-h&amp;gt;&lt;/code&gt; 进行键位绑定，这样 Vim 在某些 terminal 中就可以把 &lt;code&gt;&amp;lt;Esc&amp;gt;h&lt;/code&gt; 的按键序列正确地对应到 &lt;code&gt;&amp;lt;M-h&amp;gt;&lt;/code&gt; 表示的按键操作上了。为了便 &lt;code&gt;&amp;lt;M-h&amp;gt;&lt;/code&gt; 的组合键在 insert 模式中也能使用，我们在上面的代码中加入了 &lt;code&gt;innoremap&lt;/code&gt; 一句。之后，我们就可以用 &lt;code&gt;&amp;lt;M-h&amp;gt;&lt;/code&gt; 来进行键位映射了，例如以下组合键就可以正常打印信息了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;unique&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;M&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;h&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :echo &lt;span class="s1"&gt;&amp;#39;&amp;lt;\M-h&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 实际上，这句映射相当于 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;unique&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Esc&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;h&lt;/span&gt; :echo &lt;span class="s1"&gt;&amp;#39;&amp;lt;\M-h&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 只不过 &lt;code&gt;&amp;lt;Esc&amp;gt;h&lt;/code&gt; 是针对某一类特殊 terminal 才管用的 dirty hack。用 &lt;code&gt;&amp;lt;M-h&amp;gt;&lt;/code&gt; 进行配置，代码的可读性更好一些，换到其它 terminal 下的移植性也更好一些。&lt;/p&gt;
&lt;p&gt; 以上。&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-!map-alt-keys"&gt;
&lt;p&gt;&lt;code&gt;:h map-alt-keys&lt;/code&gt; 详细解释了为什么 meta 键不起作用，并给出了一个设置 shell 的方法来解决这个问题。&amp;#160;&lt;a class="footnote-backref" href="#fnref-!map-alt-keys" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="vim"></category></entry><entry><title>Vim 技巧之 Smart Write</title><link href="http://yuex.in/post/2015/02/vim-technique-smart-write.html" rel="alternate"></link><published>2015-02-01T00:00:00+08:00</published><updated>2015-02-01T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2015-02-01:/post/2015/02/vim-technique-smart-write.html</id><summary type="html">&lt;p&gt; 上篇讲到 &lt;code&gt;SmartQuit()&lt;/code&gt;，通过处理 Vim 中的 &lt;code&gt;E37&lt;/code&gt; 异常，让我们可以更畅快地退出 Vim。但这个解法并不完美，例如我们通过 &lt;code&gt;vim&lt;/code&gt; 命令编辑无名文件时，&lt;code&gt;SmartQuit()&lt;/code&gt; 在退出时会尝试用 &lt;code&gt;w&lt;/code&gt; 进行保存，但由于当前文件没有文件名，所以会遭遇 Vim 中的 &lt;code&gt;E32&lt;/code&gt; 异常 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;E32: No file name&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 在这篇文章里，我提供一个我在用的 &lt;code&gt;SmartWrite()&lt;/code&gt; 函数，来解决 &lt;code&gt;E32&lt;/code&gt;。闲言少叙，我们还是直接上代码 &lt;/p&gt;
&lt;p&gt; 首先，我们先将 &lt;code&gt;SmartWrite()&lt;/code&gt; 的调用绑定到一个键位，这里暂时用 &lt;code&gt;wq&lt;/code&gt; 替代好了。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;unique&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;wq&lt;/span&gt; :&lt;span class="k"&gt;call&lt;/span&gt; SmartWrite&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt; 一个更好的方法是将 &lt;code&gt;;&lt;/code&gt; 映射为 &lt;code&gt;&amp;lt;Leader&amp;gt;&lt;/code&gt; 键，然后用 &lt;code&gt;&amp;lt;Leader&amp;gt;w&lt;/code&gt; 来调用 &lt;code&gt;SmartWrite()&lt;/code&gt;，这个键位按起来很方便而且很好记。当然 …&lt;/p&gt;</summary><content type="html">&lt;p&gt; 上篇讲到 &lt;code&gt;SmartQuit()&lt;/code&gt;，通过处理 Vim 中的 &lt;code&gt;E37&lt;/code&gt; 异常，让我们可以更畅快地退出 Vim。但这个解法并不完美，例如我们通过 &lt;code&gt;vim&lt;/code&gt; 命令编辑无名文件时，&lt;code&gt;SmartQuit()&lt;/code&gt; 在退出时会尝试用 &lt;code&gt;w&lt;/code&gt; 进行保存，但由于当前文件没有文件名，所以会遭遇 Vim 中的 &lt;code&gt;E32&lt;/code&gt; 异常 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;E32: No file name&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 在这篇文章里，我提供一个我在用的 &lt;code&gt;SmartWrite()&lt;/code&gt; 函数，来解决 &lt;code&gt;E32&lt;/code&gt;。闲言少叙，我们还是直接上代码 &lt;/p&gt;
&lt;p&gt; 首先，我们先将 &lt;code&gt;SmartWrite()&lt;/code&gt; 的调用绑定到一个键位，这里暂时用 &lt;code&gt;wq&lt;/code&gt; 替代好了。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;unique&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;wq&lt;/span&gt; :&lt;span class="k"&gt;call&lt;/span&gt; SmartWrite&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt; 一个更好的方法是将 &lt;code&gt;;&lt;/code&gt; 映射为 &lt;code&gt;&amp;lt;Leader&amp;gt;&lt;/code&gt; 键，然后用 &lt;code&gt;&amp;lt;Leader&amp;gt;w&lt;/code&gt; 来调用 &lt;code&gt;SmartWrite()&lt;/code&gt;，这个键位按起来很方便而且很好记。当然，如果插件较多，按键不够用，我们还可以开启 &lt;code&gt;&amp;lt;Alt&amp;gt;&lt;/code&gt; 键来使用更多的组合键。不过这些都不打紧，因为在文章的最后，我们会把 &lt;code&gt;SmartWrite()&lt;/code&gt; 的调用整合进 &lt;code&gt;SmartQuit()&lt;/code&gt; 中，这样就只要记忆一个 &lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt; 就可以了。&lt;/p&gt;
&lt;p&gt; 接下来，是 &lt;code&gt;SmartWrite()&lt;/code&gt; 的代码 &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; SmartWrite&lt;span class="p"&gt;(&lt;/span&gt;...&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; cmd &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;a&lt;/span&gt;:&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; cmd &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;a&lt;/span&gt;:&lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;endif&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; empty&lt;span class="p"&gt;(&lt;/span&gt;bufname&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;call&lt;/span&gt; WriteWithName&lt;span class="p"&gt;(&lt;/span&gt;cmd&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        exec cmd
    &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; WriteWithName&lt;span class="p"&gt;(&lt;/span&gt;cmd&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;call&lt;/span&gt; inputsave&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; filename &lt;span class="p"&gt;=&lt;/span&gt; input&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;.&lt;span class="k"&gt;a&lt;/span&gt;:cmd.&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; cmds &lt;span class="p"&gt;=&lt;/span&gt; [&lt;span class="k"&gt;a&lt;/span&gt;:cmd&lt;span class="p"&gt;,&lt;/span&gt; filename]
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;empty&lt;span class="p"&gt;(&lt;/span&gt;glob&lt;span class="p"&gt;(&lt;/span&gt;filename&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;redraw&lt;/span&gt;
        echohl WarningMsg
        echo &lt;span class="s1"&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt;.filename.&lt;span class="s1"&gt;&amp;#39;&amp;quot; existed. Force &amp;#39;&lt;/span&gt;.&lt;span class="k"&gt;a&lt;/span&gt;:cmd.&lt;span class="s1"&gt;&amp;#39; [!] ? [Y/n] &amp;#39;&lt;/span&gt;
        echohl None

        &lt;span class="k"&gt;let&lt;/span&gt; choice &lt;span class="p"&gt;=&lt;/span&gt; nr2char&lt;span class="p"&gt;(&lt;/span&gt;getchar&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; choice &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\&amp;lt;CR&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; choice &lt;span class="p"&gt;==&lt;/span&gt;? &lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;
            &lt;span class="k"&gt;call&lt;/span&gt; CmdExecute&lt;span class="p"&gt;(&lt;/span&gt;cmds&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;endif&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;call&lt;/span&gt; CmdExecute&lt;span class="p"&gt;(&lt;/span&gt;cmds&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;endif&lt;/span&gt;

    &lt;span class="k"&gt;call&lt;/span&gt; inputrestore&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; CmdExecute&lt;span class="p"&gt;(&lt;/span&gt;cmds&lt;span class="p"&gt;,&lt;/span&gt; force&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;a&lt;/span&gt;:force
        &lt;span class="k"&gt;let&lt;/span&gt; cmd &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;a&lt;/span&gt;:cmds[&lt;span class="m"&gt;0&lt;/span&gt;].&lt;span class="s1"&gt;&amp;#39;! &amp;#39;&lt;/span&gt;.&lt;span class="k"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;a&lt;/span&gt;:cmds[&lt;span class="m"&gt;1&lt;/span&gt;:]&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; cmd &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;a&lt;/span&gt;:cmds&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;endif&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; exists&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cmd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        exec cmd
    &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt; 好在 Vimscript 并不严格要求函数定义与使用的先后顺序，因为是脚本语言嘛，所以这里就按照逻辑上最自然的先后顺序给出代码了。在 &lt;code&gt;SmartWrite()&lt;/code&gt; 中，我们进行一个判断，看当前文件是否有名字。如果有名字，就直接执行默认为写的命令；如果没有名字，就调用 &lt;code&gt;WriteWithName()&lt;/code&gt;。这个函数会要求输入一个文件名字，然后会检查是否存在同名的文件。如果存在，会提示是否强制写，默认是只有 &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 或者 &lt;code&gt;Y&lt;/code&gt; 起头的输入，才会进行强制写入。决定之后，会调用 &lt;code&gt;CmdExecute()&lt;/code&gt; 来真正执行写入的命令。&lt;/p&gt;
&lt;p&gt; 最后，只要在 &lt;code&gt;SmartQuit()&lt;/code&gt; 里进行一下小的调整，就可以将 &lt;code&gt;SmartWrite()&lt;/code&gt; 整合进去了。我们赘述如下，注意其中的 &lt;code&gt;&amp;lt;C-w&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;C-s&amp;gt;&lt;/code&gt; 键的设置，其实是配置了 &lt;strong&gt; 保存 &lt;/strong&gt; 和 &lt;strong&gt; 保存退出 &lt;/strong&gt; 两个键位。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; SmartQuit&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;&amp;amp;&lt;span class="nb"&gt;modified&lt;/span&gt;
        exec &lt;span class="s2"&gt;&amp;quot;quit&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;redraw&lt;/span&gt;
        echohl WarningMsg
        echo &lt;span class="s2"&gt;&amp;quot;Buffer changed! [^W]w [^S]x [^B^N]q!: &amp;quot;&lt;/span&gt;
        echohl None

        &lt;span class="k"&gt;let&lt;/span&gt; cmd &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;ret&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; nr2char&lt;span class="p"&gt;(&lt;/span&gt;getchar&lt;span class="p"&gt;())&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;ret&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\&amp;lt;C-b&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="k"&gt;ret&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\&amp;lt;C-n&amp;gt;&amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; cmd &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;q!&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="k"&gt;ret&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\&amp;lt;C-w&amp;gt;&amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; cmd &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;call SmartWrite(&amp;#39;w&amp;#39;)&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="k"&gt;ret&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\&amp;lt;C-s&amp;gt;&amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; cmd &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;call SmartWrite(&amp;#39;x&amp;#39;)&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;endif&lt;/span&gt;

        &lt;span class="k"&gt;redraw&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;empty&lt;span class="p"&gt;(&lt;/span&gt;cmd&lt;span class="p"&gt;)&lt;/span&gt;
            exec cmd
        &lt;span class="k"&gt;endif&lt;/span&gt;
    &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt; 最后的最后，别忘了我们的 &lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt; 键映射 &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;unique&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;call&lt;/span&gt; SmartQuit&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt; 以上。&lt;/p&gt;</content><category term="vim"></category></entry><entry><title>Vim 技巧之 Smart Quit</title><link href="http://yuex.in/post/2015/01/vim-technique-smart-quit.html" rel="alternate"></link><published>2015-01-25T00:00:00+08:00</published><updated>2015-01-25T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2015-01-25:/post/2015/01/vim-technique-smart-quit.html</id><summary type="html">&lt;p&gt; 初学 Vim 时，我们都有这样的经历 ——“ 哇，怎么退出？！”。在尝试了 &lt;code&gt;&amp;lt;Ctrl-C&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt; 全都没有效果时，才会注意左下角状态栏的小提示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Type  :quit&amp;lt;Enter&amp;gt;  to exit Vim&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 在小心翼翼地键入这个命令完成退出之后，我们欣喜地自认为已经掌握了 Vim 的退出之法。然而，当我们在 Vim 中进行了一番探索、受了一些嘲弄、做了一些不听使唤的修改后，虔诚地键入 &lt;code&gt;:quit&lt;/code&gt;，准备结束这次不成功的尝试，舒缓一下心神，重新来过之时，Vim 又会无情地用一行血红色的小字警告你：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;E37: No write since last change (add ! to override)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 很多人的 Vim 之旅就此便戛然而止。许多年之后，那些并未放弃的人们，早已掌握了 Vim 中的大多数奥妙，但时不时地，仍然会在完成一些快速修改，准备退出进行一下验证或者修改下一个文件的时候，遭遇 Vim 的 &lt;code&gt;E37&lt;/code&gt; 嘲弄。Vim …&lt;/p&gt;</summary><content type="html">&lt;p&gt; 初学 Vim 时，我们都有这样的经历 ——“ 哇，怎么退出？！”。在尝试了 &lt;code&gt;&amp;lt;Ctrl-C&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt; 全都没有效果时，才会注意左下角状态栏的小提示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Type  :quit&amp;lt;Enter&amp;gt;  to exit Vim&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 在小心翼翼地键入这个命令完成退出之后，我们欣喜地自认为已经掌握了 Vim 的退出之法。然而，当我们在 Vim 中进行了一番探索、受了一些嘲弄、做了一些不听使唤的修改后，虔诚地键入 &lt;code&gt;:quit&lt;/code&gt;，准备结束这次不成功的尝试，舒缓一下心神，重新来过之时，Vim 又会无情地用一行血红色的小字警告你：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;E37: No write since last change (add ! to override)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 很多人的 Vim 之旅就此便戛然而止。许多年之后，那些并未放弃的人们，早已掌握了 Vim 中的大多数奥妙，但时不时地，仍然会在完成一些快速修改，准备退出进行一下验证或者修改下一个文件的时候，遭遇 Vim 的 &lt;code&gt;E37&lt;/code&gt; 嘲弄。Vim 仿佛是在用这种方式训斥你 ——“ 你，图样图森破，上台拿衣服 ”。虽然，无数次地，我们在论坛上、bbs 里，义正言辞地强调 “WYSIWYG，图样图森破；Vim，时尚时尚最时尚 ”，然而在夜深人静的时候，我们扪心自问，深深明白，Vim 还有很多地方不够完美 &lt;sup id="fnref-!neovim"&gt;&lt;a class="footnote-ref" href="#fn-!neovim"&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt; 所以，在这篇文章里，我要展示一个我在用的 Vim 配置，可以让我们在退出的时候，不再遭受 &lt;code&gt;E37&lt;/code&gt; 的痛苦折磨。闲言少叙，直接上相关代码。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; SmartQuit&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;&amp;amp;&lt;span class="nb"&gt;modified&lt;/span&gt;
        exec &lt;span class="s2"&gt;&amp;quot;quit&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;redraw&lt;/span&gt;
        echohl WarningMsg
        echo &lt;span class="s2"&gt;&amp;quot;Buffer changed! [^W]w [^S]x [^B^N]q!: &amp;quot;&lt;/span&gt;
        echohl None

        &lt;span class="k"&gt;let&lt;/span&gt; cmd &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;ret&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; nr2char&lt;span class="p"&gt;(&lt;/span&gt;getchar&lt;span class="p"&gt;())&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;ret&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\&amp;lt;C-b&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="k"&gt;ret&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\&amp;lt;C-n&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;            &amp;quot; BOOM! NUKE!&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; cmd &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;q!&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="k"&gt;ret&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\&amp;lt;C-w&amp;gt;&amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; cmd &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="k"&gt;ret&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\&amp;lt;C-s&amp;gt;&amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; cmd &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;endif&lt;/span&gt;

        &lt;span class="k"&gt;redraw&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;empty&lt;span class="p"&gt;(&lt;/span&gt;cmd&lt;span class="p"&gt;)&lt;/span&gt;
            exec cmd
        &lt;span class="k"&gt;endif&lt;/span&gt;
    &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;

&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;unique&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;call&lt;/span&gt; SmartQuit&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt; 这段代码很简单，我们将 &lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt; 映射到调用 &lt;code&gt;SmartQuit()&lt;/code&gt; 函数。而这个函数会检查当前文件是否已经修改过。若没有修改，则直接退出；若有修改，则会提示你进行保存（&lt;code&gt;&amp;lt;C-w&amp;gt;&lt;/code&gt;）、保存退出（&lt;code&gt;&amp;lt;C-s&amp;gt;&lt;/code&gt;）、强制退出（&lt;code&gt;&amp;lt;C-b&amp;gt;&lt;/code&gt; 或者 &lt;code&gt;&amp;lt;C-n&amp;gt;&lt;/code&gt;）、或者取消操作（&lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt;）。最后根据选择执行相应的命令。&lt;/p&gt;
&lt;p&gt; 当然，如果你不喜欢这几个按键，或者不喜欢那个提示语，可以自行修改以适合自己口味。另外，这个函数在编写的过程中参考了 Stackoverflow 上的一个 &lt;a href="http://stackoverflow.com/a/20075923/2787160"&gt; 回答 &lt;/a&gt;，你也可以进行一下对比，选取合适的部分，再加以发挥形成自己的 SmartQuit。&lt;/p&gt;
&lt;p&gt; 眼尖的读者可能已经发现了，这个配置是要用 &lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt; 来进行退出 Vim。其实我们也可以用这个按键代替 &lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt;&lt;sup id="fnref-!esc"&gt;&lt;a class="footnote-ref" href="#fn-!esc"&gt;2&lt;/a&gt;&lt;/sup&gt; 来退出 Vim 中的各个模式。这在 Vim 中是一个默认设置，大多数情况下两者的行为是一致的。但有一个例外，就是用 &lt;code&gt;&amp;lt;C-v&amp;gt;&lt;/code&gt; 和 &lt;code&gt;I&lt;/code&gt; 进行多行首插入时。&lt;code&gt;:h i_ctrl-c&lt;/code&gt; 中写明 &lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt; 在 insert 模式中不会触发 &lt;code&gt;InsertLeave&lt;/code&gt; 事件，因此也就无法完成多行插入了。解决这个问题，也很简单，只要加入如下配置就好了。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;inoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;unique&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Esc&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt; 另外，以 MacBook Pro 为代表的新一代的笔电设计，愈发地将 &lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt; 缩小，并置于偏离键盘左上角的位置，对于 Vim 的使用造成了一定的不便，所以非常推荐大家用 &lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt; 代替 &lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt;。当然，&lt;strong&gt; 前提是要将 &lt;code&gt;&amp;lt;CapsLock&amp;gt;&lt;/code&gt; 设置为 &lt;code&gt;&amp;lt;Ctrl&amp;gt;&lt;/code&gt;&lt;/strong&gt;。否则，频繁使用 &lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt; 可能还会更痛苦。不过说到底，这个设置的好与不好，要不要采纳，大家还是要在使用中，根据自己的习惯做出适合自己的选择。&lt;/p&gt;
&lt;p&gt; 以上。&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-!neovim"&gt;
&lt;p&gt; 目前针对 Vim 有一个名为 &lt;a href="https://github.com/neovim/neovim"&gt;Neovim&lt;/a&gt; 的改良项目。&amp;#160;&lt;a class="footnote-backref" href="#fnref-!neovim" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-!esc"&gt;
&lt;p&gt;&lt;code&gt;:h esc&lt;/code&gt;，Vim 文档中对 &lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt; 的用途进行了详细的描述。&amp;#160;&lt;a class="footnote-backref" href="#fnref-!esc" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="vim"></category></entry><entry><title>Exclusive Queue 的一个推广</title><link href="http://yuex.in/post/2015/01/little-book-exclusive-queue-generalization.html" rel="alternate"></link><published>2015-01-18T00:00:00+08:00</published><updated>2015-01-18T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2015-01-18:/post/2015/01/little-book-exclusive-queue-generalization.html</id><summary type="html">&lt;p&gt; 最近断断续续地在看一本非常棒的书，Allen B. Downey 的 &lt;a href="http://greenteapress.com/semaphores/"&gt;The Little Book of Semaphores&lt;/a&gt;，理清了许多以前了解得不很确实的知识。&lt;/p&gt;
&lt;p&gt; 这两天看到的书中 3.7 节的 Exclusive Queue。书中介绍了一个可以 1:1 并发向前的队列。一个很自然的想法是如何将其推广到 n:m 的情形。但非常奇怪的是书中并没有像前几节中推广二人约定 Rendezvous&lt;sup id="fnref-!rendezvous"&gt;&lt;a class="footnote-ref" href="#fn-!rendezvous"&gt;1&lt;/a&gt;&lt;/sup&gt;，使之成为多人约定 Barrier 那样，将 1:1 的 Exclusive Queue 推广到 n:m。所以我在这篇拙文中斗胆狗尾续貂，补上这个推广 &lt;sup id="fnref-!note"&gt;&lt;a class="footnote-ref" href="#fn-!note"&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt; 首先，和书中之前的定义一样，n:m 情形下，要求有且仅有 n 个 leader 和 m 个 follower 同时进行 dance()。变量定义如下 &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1 …&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</summary><content type="html">&lt;p&gt; 最近断断续续地在看一本非常棒的书，Allen B. Downey 的 &lt;a href="http://greenteapress.com/semaphores/"&gt;The Little Book of Semaphores&lt;/a&gt;，理清了许多以前了解得不很确实的知识。&lt;/p&gt;
&lt;p&gt; 这两天看到的书中 3.7 节的 Exclusive Queue。书中介绍了一个可以 1:1 并发向前的队列。一个很自然的想法是如何将其推广到 n:m 的情形。但非常奇怪的是书中并没有像前几节中推广二人约定 Rendezvous&lt;sup id="fnref-!rendezvous"&gt;&lt;a class="footnote-ref" href="#fn-!rendezvous"&gt;1&lt;/a&gt;&lt;/sup&gt;，使之成为多人约定 Barrier 那样，将 1:1 的 Exclusive Queue 推广到 n:m。所以我在这篇拙文中斗胆狗尾续貂，补上这个推广 &lt;sup id="fnref-!note"&gt;&lt;a class="footnote-ref" href="#fn-!note"&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt; 首先，和书中之前的定义一样，n:m 情形下，要求有且仅有 n 个 leader 和 m 个 follower 同时进行 dance()。变量定义如下 &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;leaders&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;proceed&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;followers&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;proceed&lt;/span&gt;
&lt;span class="n"&gt;leader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;follower&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="c1"&gt;# 用于记录已经到达的 leader 与 follower 个数 &lt;/span&gt;
&lt;span class="n"&gt;countL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;countF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="c1"&gt;# 用于记录正在进行 dance() 的 leader 与 follower 个数 &lt;/span&gt;
&lt;span class="n"&gt;mutex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Semaphore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# 用于控制 leader 和 follower 的访问 &lt;/span&gt;
&lt;span class="n"&gt;mutexCountL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Semaphore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 用于控制 countL 的访问 &lt;/span&gt;
&lt;span class="n"&gt;mutexCountF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Semaphore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 用于控制 countF 的访问 &lt;/span&gt;
&lt;span class="n"&gt;leaderQ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Semaphore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;# 用于 fire leader queue&lt;/span&gt;
&lt;span class="n"&gt;followerQ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Semaphore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# 用于 fire follower queue&lt;/span&gt;
&lt;span class="n"&gt;rendezvous&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Semaphore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# 用于控制 leader 和 follower 的同步约定 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt; 以下给出推广问题解的 leader 的代码：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mutex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;follower&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;leader&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;follower&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;
    &lt;span class="n"&gt;leader&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;followerQ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;leaderQ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;leader&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;mutex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;leaderQ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;dance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;rendezvous&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;mutexCountL&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;countL&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;countL&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;countL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;mutex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mutexCountL&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;singal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt; 以下给出推广问题解的 follower 的代码：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mutex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;leader&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;follower&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;leader&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
    &lt;span class="n"&gt;follower&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;leaderQ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;followerQ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;follower&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;mutex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;followerQ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;dance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;mutexCountF&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;countF&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;countF&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;countF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;rendezvous&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mutexCountF&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;singal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt; 代码，以上。&lt;/p&gt;
&lt;p&gt; 不过请注意，这里的 n 个 leader 只有在 m 个 follower 全部完成 dance() 之后，才能开始进行第一个 dance()。在 &lt;code&gt;n == m&lt;/code&gt; 的情况下，或者更广泛一点讲，只要 n 和 m 互为整倍数关系时，可以有一个改进，使得固定的一个或几个 follower 完成 dance() 之后，就 fire 成比例的 rendezvous 给 leader。这样 follower 和 leader 就可以一定程度上的并发行进了。&lt;/p&gt;
&lt;p&gt; 拙文，以上。&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-!rendezvous"&gt;
&lt;p&gt;rendezvous 的词源是 render (to present) + vous (you)，引申为约会、约会地、集会地。具体可以参考 &lt;a href="http://www.etymonline.com/index.php?term=rendezvous"&gt;etymonline&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-!rendezvous" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-!note"&gt;
&lt;p&gt; 书还没有看完，我怀疑书后面的章节中可能会有问题涉及到这个推广，所以在书的前面也就没有提及。倘若真是这种情况，之后再补上相关的说明。&amp;#160;&lt;a class="footnote-backref" href="#fnref-!note" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="system"></category><category term="semaphore"></category></entry><entry><title>How Linux Work 笔记</title><link href="http://yuex.in/post/2015/01/how-linux-work-review.html" rel="alternate"></link><published>2015-01-11T00:00:00+08:00</published><updated>2015-01-11T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2015-01-11:/post/2015/01/how-linux-work-review.html</id><summary type="html">&lt;p&gt; 最近看了一本 Linux 方面的 2014 年新书，是 &lt;a href="http://book.douban.com/subject/26266751/"&gt;How Linux Work&lt;/a&gt; 第二版。一开始看名字，以为是 Linux 内核方面相关的，或者是讲如何自制 Linux 发行版的。但最后发现其实就是讲怎么使用 Linux 的。而且这本书也很特别，从内容上来讲，既不是完全给新手看的，也不是完全给老手看，很是别扭。但好在这本书讲到的所有东西都不是很艰深，很多都是信息性的内容，快速过一遍也只要两三个小时。国内人民邮电已经引入了 &lt;a href="http://www.ituring.com.cn/book/1548"&gt; 中文版 &lt;/a&gt;，今年年底前应该可以和大家见面。&lt;/p&gt;
&lt;p&gt; 但诚如至圣先师孔子所言：三人行必有我师。这本书还是让我收获了很多。以下撷取其中的一些内容，与大家分享。&lt;/p&gt;
&lt;p&gt; 使用 mktemp 生成临时文件。只要在 shell 脚本中使用 &lt;code&gt;TEMPFILE=$(mktemp)&lt;/code&gt; 就会在 &lt;code&gt;/tmp&lt;/code&gt; 中生成一个临时文件，然后可以通过访问 &lt;code&gt;${TEMPFILE}&lt;/code&gt; 进行使用，非常方便。&lt;/p&gt;
&lt;p&gt;Shell 脚本的劣势，有以下三点，结合以前的开发经验，还真是这样的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 算术计算，特别是浮点运算，基本不可以原生地做；&lt;/li&gt;
&lt;li&gt; 字符串处理 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt; 最近看了一本 Linux 方面的 2014 年新书，是 &lt;a href="http://book.douban.com/subject/26266751/"&gt;How Linux Work&lt;/a&gt; 第二版。一开始看名字，以为是 Linux 内核方面相关的，或者是讲如何自制 Linux 发行版的。但最后发现其实就是讲怎么使用 Linux 的。而且这本书也很特别，从内容上来讲，既不是完全给新手看的，也不是完全给老手看，很是别扭。但好在这本书讲到的所有东西都不是很艰深，很多都是信息性的内容，快速过一遍也只要两三个小时。国内人民邮电已经引入了 &lt;a href="http://www.ituring.com.cn/book/1548"&gt; 中文版 &lt;/a&gt;，今年年底前应该可以和大家见面。&lt;/p&gt;
&lt;p&gt; 但诚如至圣先师孔子所言：三人行必有我师。这本书还是让我收获了很多。以下撷取其中的一些内容，与大家分享。&lt;/p&gt;
&lt;p&gt; 使用 mktemp 生成临时文件。只要在 shell 脚本中使用 &lt;code&gt;TEMPFILE=$(mktemp)&lt;/code&gt; 就会在 &lt;code&gt;/tmp&lt;/code&gt; 中生成一个临时文件，然后可以通过访问 &lt;code&gt;${TEMPFILE}&lt;/code&gt; 进行使用，非常方便。&lt;/p&gt;
&lt;p&gt;Shell 脚本的劣势，有以下三点，结合以前的开发经验，还真是这样的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 算术计算，特别是浮点运算，基本不可以原生地做；&lt;/li&gt;
&lt;li&gt; 字符串处理 ; &lt;/li&gt;
&lt;li&gt; 数据库操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 利用 python 速起 http 服务：&lt;code&gt;python -m SimpleHTTPServer&lt;/code&gt;。以后给别人传东西就可以不用 U 盘了。&lt;/p&gt;
&lt;p&gt;rsync 中 &lt;code&gt;/&lt;/code&gt; 的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rsync -a dir/ dest_dir&lt;/code&gt; 会把 dir 下所有内容拷贝到 dest_dir/ 下 &lt;/li&gt;
&lt;li&gt;&lt;code&gt;rsync -a dir  dest_dir&lt;/code&gt; 会把 dir 下所有内容拷贝到 dest_dir/dir/&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;X Window 的替代项目。众所周知，X Window 到现在，时间已经比较长了，不可避免地会有很多历史的包袱，对于平板和智能手机这类的新环境的适应也不会那么灵活，所以有几个新项目出现，以 freedesktop 领衔的 &lt;a href="https://en.wikipedia.org/wiki/Wayland_(display_server_protocol)"&gt;Wayland&lt;/a&gt; 和 Canonical 领衔的 &lt;a href="https://en.wikipedia.org/wiki/Mir_(software)"&gt;Mir&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;D-Bus 是 Desktop-Bus 的缩写，是一个消息传递系统，在桌面应用之间提供一个进程间通信机制，由 Red Hat 牵头开发。&lt;/p&gt;
&lt;p&gt; 另有一个技巧，可以把 vim 用作二进制编辑器。如下 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; 以 &lt;code&gt;vim -b file&lt;/code&gt; 打开文件 &lt;/li&gt;
&lt;li&gt; 执行 &lt;code&gt;:%!xxd&lt;/code&gt; 将 ascii 转换为 hex 显示 &lt;/li&gt;
&lt;li&gt; 在 hex 下进行修改 &lt;/li&gt;
&lt;li&gt; 执行 &lt;code&gt;:%!xxd -r&lt;/code&gt; 将 hex 转换回 ascii&lt;/li&gt;
&lt;li&gt; 保存退出 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 以上。&lt;/p&gt;</content><category term="linux"></category></entry><entry><title>使用 bash 渲染模板动态生成配置文件</title><link href="http://yuex.in/post/2014/10/bash-template.html" rel="alternate"></link><published>2014-10-14T00:00:00+08:00</published><updated>2014-10-14T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2014-10-14:/post/2014/10/bash-template.html</id><summary type="html">&lt;p&gt; 在使用 bash 自动化一些配置过程的时候，经常会遇到这样一种情况，我们需要向配置文件中写入一些信息，而这些信息是动态的，只有脚本实际运行的时候，才能知道这些信息。比如我需要自动启动一个由多个 docker container 组成的 cluster。这个 cluster 中的多个 container 形成一个 C/S 架构的星形拓扑。为了可以正常通信，client 至少应该知道 server 的 ip 地址。为了使这个部署可以更灵活，一般会选择使用 dhcp 来动态获取地址。所以，我们不能事先把地址写死，必须在 server container 运行之后动态生成 client 的配置文件。当然，我们也可以把脚本写成两步，先起 server，再起 client。但是这种方法自动化的不彻底，没有一下就把所有工作从头做到尾来得爽快，所以这里也就按下不表了。&lt;/p&gt;
&lt;p&gt; 上面说的这个情况，最直接的方法是用 &lt;code&gt;sed&lt;/code&gt; 配合正则表达一处一处地修改。但是当要修改的地方很多时，这个方法会变得非常繁琐，后期维护也非常困难。我在这里提供一种利用 bash 渲染模板文件动态生成实际使用配置文件的方法。如果你有玩过 …&lt;/p&gt;</summary><content type="html">&lt;p&gt; 在使用 bash 自动化一些配置过程的时候，经常会遇到这样一种情况，我们需要向配置文件中写入一些信息，而这些信息是动态的，只有脚本实际运行的时候，才能知道这些信息。比如我需要自动启动一个由多个 docker container 组成的 cluster。这个 cluster 中的多个 container 形成一个 C/S 架构的星形拓扑。为了可以正常通信，client 至少应该知道 server 的 ip 地址。为了使这个部署可以更灵活，一般会选择使用 dhcp 来动态获取地址。所以，我们不能事先把地址写死，必须在 server container 运行之后动态生成 client 的配置文件。当然，我们也可以把脚本写成两步，先起 server，再起 client。但是这种方法自动化的不彻底，没有一下就把所有工作从头做到尾来得爽快，所以这里也就按下不表了。&lt;/p&gt;
&lt;p&gt; 上面说的这个情况，最直接的方法是用 &lt;code&gt;sed&lt;/code&gt; 配合正则表达一处一处地修改。但是当要修改的地方很多时，这个方法会变得非常繁琐，后期维护也非常困难。我在这里提供一种利用 bash 渲染模板文件动态生成实际使用配置文件的方法。如果你有玩过 jinja2 这种模板语言，这里我要讲的方法和用 jinja2 渲染 template 生成 html 的思路是类似的。&lt;/p&gt;
&lt;p&gt; 闲言少敘，以下是我要讲的方法的代码片段。其中 &lt;code&gt;${template}&lt;/code&gt; 为模板文件的存放路径，而 &lt;code&gt;${dst}&lt;/code&gt; 为生成的配置的文件所欲保存的路径 &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;template&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
awk &lt;span class="s1"&gt;&amp;#39;$0 !~ /^\s*#.*$/&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
sed &lt;span class="s1"&gt;&amp;#39;s/[ &amp;quot;]/\\&amp;amp;/g&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; -r line&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;line&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt; &amp;gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;dst&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt; 以上代码中，&lt;code&gt;awk '$0 !~ /^\s*#.*$/'&lt;/code&gt; 将 &lt;code&gt;cat&lt;/code&gt; 所打印的注释行全部吃掉。&lt;code&gt;sed 's/[ "]/\\&amp;amp;/g'&lt;/code&gt; 将模板文件中的双引号和空格全部转义，用于抵消 &lt;code&gt;eval&lt;/code&gt;。因为我的模板文件中只有这两个 magic character，所以没有处理多余的字符。如果你的模板文件中还使用了其它 magic character，如单引号、圆括弧等，可以根据实际情况修改这一句。&lt;code&gt;while&lt;/code&gt; 循环逐行读入 p 之前管道的输出，&lt;code&gt;-r&lt;/code&gt; 参数保证我们在 &lt;code&gt;sed&lt;/code&gt; 中的转义不会被 &lt;code&gt;read&lt;/code&gt; 吃掉。&lt;code&gt;eval&lt;/code&gt; 将模板中定义的 bash variable 替换为脚本运行时环境中的变量值。最后，将全部结果写入到所欲存储的路径。&lt;/p&gt;
&lt;p&gt; 以下是我所用的模板中的一个片段（yaml 格式的 storm 配置文件）。&lt;code&gt;${ZK_IP}&lt;/code&gt; 是所需要的一个 zookeeper 实例的 ip 地址，需要在 zookeeper container 运行起来之后才能确定。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;storm.zookeeper.servers&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;${ZK_IP}&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt; 经由上面的代码在运行时渲染后，&lt;code&gt;${ZK_IP}&lt;/code&gt; 会被替换为一个 ipv4 地址，所以实际生成的配置文件可能是这个样子的 &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;storm.zookeeper.servers&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;172.16.0.1&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt; 这个就是实际的 storm 实例中会使用的配置文件。&lt;/p&gt;
&lt;p&gt; 以上 :)&lt;/p&gt;</content><category term="bash"></category></entry><entry><title>Arch Linux 上手指南</title><link href="http://yuex.in/post/2014/04/arch-guide.html" rel="alternate"></link><published>2014-04-18T00:00:00+08:00</published><updated>2014-04-18T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2014-04-18:/post/2014/04/arch-guide.html</id><summary type="html">&lt;h1&gt; 缘起 &lt;/h1&gt;
&lt;p&gt; 一直都想写一篇关于 Arch Linux 的博客，可以用来帮助 Arch 新玩家上路，
又可以总结一下自己入坑三四年来的一些心得。
年前的时候，我的 Thinkpad X220 双硬盘中的 mSATA SSD 挂了，援救了一下数据和系统。
本打算借机写写 Arch Linux 的安装，也积累了一些素材。但思来想去，
每个人的硬件型号、网络环境、分区习惯、软件选择的品味等等，不尽相同，
一份安装指南不一定会对每个人都有用，甚至还有可能在某些情况下起到截然相反的效果，
影响观者对于 Arch 的热情，所以最后也就没有落笔。&lt;/p&gt;
&lt;p&gt; 然而，今天又有同事问起 Arch Linux，同事有一些 Linux 基础，对 Arch 比较好奇。
我想不如准备一些参考资料，说说自己作为 Arch 用户的使用心得，
来告诉新玩家 Arch 是什么，使用 Arch 会遇到怎样的问题，这样来得更实在一些。
像安装指南、发行版比较之类，已经有不少很好的资料了，实在不需要我的狗尾续貂 …&lt;/p&gt;</summary><content type="html">&lt;h1&gt; 缘起 &lt;/h1&gt;
&lt;p&gt; 一直都想写一篇关于 Arch Linux 的博客，可以用来帮助 Arch 新玩家上路，
又可以总结一下自己入坑三四年来的一些心得。
年前的时候，我的 Thinkpad X220 双硬盘中的 mSATA SSD 挂了，援救了一下数据和系统。
本打算借机写写 Arch Linux 的安装，也积累了一些素材。但思来想去，
每个人的硬件型号、网络环境、分区习惯、软件选择的品味等等，不尽相同，
一份安装指南不一定会对每个人都有用，甚至还有可能在某些情况下起到截然相反的效果，
影响观者对于 Arch 的热情，所以最后也就没有落笔。&lt;/p&gt;
&lt;p&gt; 然而，今天又有同事问起 Arch Linux，同事有一些 Linux 基础，对 Arch 比较好奇。
我想不如准备一些参考资料，说说自己作为 Arch 用户的使用心得，
来告诉新玩家 Arch 是什么，使用 Arch 会遇到怎样的问题，这样来得更实在一些。
像安装指南、发行版比较之类，已经有不少很好的资料了，实在不需要我的狗尾续貂。
此外，Arch 本身就不太适合刚刚接触 Linux 的玩家。而对于有一定 Linux 基础的玩家，
手把手地教人家怎样安装，应该这样，不要那样，这样才对，那样不对，
在我看来， 无异于对别人的一种不尊重。&lt;/p&gt;
&lt;p&gt; 综上种种，有了这篇小文。本文不会涉及具体的 Arch 安装步骤、详细 Arch 特性比较，
但我会给出这些资料的链接。此外，我会说说我的使用心得和一些 Arch 使用的小建议。&lt;/p&gt;
&lt;h1&gt;Arch Linux 是什么？&lt;/h1&gt;
&lt;p&gt; 可以参考以下几篇文章，这些 wiki 页面中一般都有中文翻译页的链接，可自行跳转 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Arch_Linux"&gt;Arch Linux&lt;/a&gt; - Wikipeida 上的 “Arch Linux” 条目，涉及历史等一些基本信息 &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/The_Arch_Way"&gt;The Arch Way&lt;/a&gt; - Arch Linux 的设计哲学，KISS。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Arch_compared_to_other_distributions"&gt;Arch Compared to Others&lt;/a&gt; - Arch Linux 与其它发行版的比较，如果你是从其它发行版转过来，可以看看从 Arch 这里，你会得到什么，会失去什么，来帮助你选择。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/FAQ"&gt;Arch FAQ&lt;/a&gt; - 还有问题？可以翻翻这个 FAQ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 当然，介绍当中或多或少都有各种各样的忽悠，这里我讲一讲我三四年使用中，
感触最深的三点 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 滚动更新 &lt;/strong&gt;。Arch 采用的是滚动更动，没有 Ubuntu 和 Fedora 中发行版的概念。
你不需要在一个固定年限之后重装系统来保持更新。你的配置可以使用很多时间。
特别的，作为桌面系统，如果你把 &lt;code&gt;/home&lt;/code&gt; 挂载为一个单独的分区，
你甚至可以在 &lt;code&gt;/&lt;/code&gt; 挂掉之后，重装 Arch，挂回 &lt;code&gt;/home&lt;/code&gt;，然后惊喜的发现，
你 &lt;code&gt;/home&lt;/code&gt; 中的各种配置仍然可以正常工作。
不过这里要注意的是，Arch 的滚动更新不是完美的。在一些重大更新的时候，
需要手工配置一些东西，如果没有正确更新，下次直接进行系统整体更新的话，
有可能会让系统无法正常启动。2012-2013 年之间的 Systemd 和 Gnome3 切换，
就出现过这个问题，也吓走了一些 Arch 玩家。
不过，一般来说加入 Arch Announce 的邮件列表之后，重大更新都会在其中宣布。
一年最多也就一两次，不是很频繁。另外，即使系统挂掉了，使用 archboot 救援之后，
都会正常恢复的。比如像我，root 分区所在的 SSD 硬盘挂了两次
（硬件挂了两次，不是软件），&lt;code&gt;/home&lt;/code&gt; 中的资料、配置仍然都在。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 活跃且友好的社区 &lt;/strong&gt;。&lt;a href="http://wiki.archlinux.org/"&gt;Arch Wiki&lt;/a&gt; 和 &lt;a href="http://bbs.archlinux.org/"&gt;Arch Forum&lt;/a&gt; 都是质量非常好的资源，
基本上 Arch 使用过程当中遇到的任何问题，都可以利用 wiki 自己解决。
如果真的没有相关的内容（在我自己的使用过程中目前还没有遇到这种情况），
你可以到论坛上求助，解答都非常热心。不过记得解决问题之后，
要去 wiki 更新一下相关页面。:)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 简洁的包管理格式 &lt;/strong&gt;。Arch 有自己的包管理系统 &lt;a href="https://wiki.archlinux.org/index.php/Pacman"&gt;Pacman&lt;/a&gt; 和包格式 &lt;a href="https://wiki.archlinux.org/index.php/PKGBUILD"&gt;PKGBUILD&lt;/a&gt;。
PKGBUILD 中可以写清楚信赖，源码的位置，编译和安装命令。基于 PKGBUILD，
Arch 官方提供了 AUR ( Arch User Repository )，可以让用户自己提交 PKGBUILD。
而其它用户可以通过 http 或者 &lt;code&gt;yaourt&lt;/code&gt; 或者 &lt;code&gt;packer&lt;/code&gt; 来下载 PKGBUILD，
进行包的编译和安装。也正因为这样，AUR 当中有很多最新的软件。&lt;/p&gt;
&lt;h1&gt; 安装 Arch Linux&lt;/h1&gt;
&lt;p&gt; 详细的安装指导可以参考以下 wiki 页，页面中有对应的中文翻译页，请自行跳转 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Installation_guide"&gt;Installation Guide&lt;/a&gt; - 精简版 &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Beginners'_Guide"&gt;Arch Beginner's Guide&lt;/a&gt; - 详细版 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 在安装之前，或许你会需要检查下你是否了解这些东西：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Uefi"&gt;UEFI&lt;/a&gt;/&lt;a href="https://en.wikipedia.org/wiki/GUID_Partition_Table"&gt;GPT&lt;/a&gt; 或者 BIOS/MBR - 我建议你使用 UEFI/GPT，不可否认，BIOS/MBR 正在被淘汰 &lt;/li&gt;
&lt;li&gt;LVM - 如果将 &lt;code&gt;/&lt;/code&gt;、&lt;code&gt;/home&lt;/code&gt;、&lt;code&gt;/var&lt;/code&gt; 放到 lvm 上的话，对于硬盘空间的充分利用和日后救援系统，都有不少裨益 &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Linux_boot_process"&gt;Linux Boot Process&lt;/a&gt; - 这会帮助你更好地理解 BootLoader、Kernel、Systemd/init 之间的关系，这有助于理解安装过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 在安装过程中，我建议你保持手边有第二台可以连网的设备，因为你可能要不时地查阅
&lt;a href="http://wiki.archlinux.org/"&gt;Arch Wiki&lt;/a&gt;。&lt;/p&gt;
&lt;h1&gt; 安装之后 &lt;/h1&gt;
&lt;p&gt; 成功安装 Arch 之后，你应该可以启动到一个 shell，
虽然这个离一个真正的桌面系统还有点距离，不过已经很近了。
这里，我建议你休息一下，回顾一下安装过程中遇到的各种问题，
或许有针对性的记一些笔记会是个不错主意。如果以上的安装对你来说小菜一碟，
那么不用怀疑，你就是那个为 Arch 而生的人，坚定地走下去吧！:)&lt;/p&gt;
&lt;p&gt; 如果你决定继续进行，我建议你先从图形界面开始。什么？你在桌面系统上不用图形界面？
真有够硬核！如果你决定还是委屈地配合我一下，安装一个图形界面，可以参考 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/General_recommendations#Graphical_user_interface"&gt;Arch GUI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 安装完图形介面之后，基本上 Arch 的安装就可以告一段落了，
但是请检查你是否完成以下工作？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 加入 &lt;a href="https://mailman.archlinux.org/mailman/listinfo/arch-announce"&gt;Arch Announce&lt;/a&gt; 邮件列表，邮件量很少，一年十封左右，但是一旦有信，就意味着你在下次更新之前要仔细阅读，贸然更新可能会挂掉系统 &lt;/li&gt;
&lt;li&gt; 访问 &lt;a href="https://wiki.archlinux.org/index.php/Pacman_rosetta"&gt;Pacman Rosetta&lt;/a&gt;，提供了一个 &lt;code&gt;pacman&lt;/code&gt; 与 &lt;code&gt;yum&lt;/code&gt; 和 &lt;code&gt;apt-get&lt;/code&gt; 之间对应命令的参考。日常使用中，你可能还有用到 &lt;a href="https://wiki.archlinux.org/index.php/Pacman_Tips"&gt;Pacman Tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; 从 AUR 安装 &lt;code&gt;yaourt&lt;/code&gt; 或者 &lt;code&gt;packer&lt;/code&gt;，这应该是第一个也是最后一个你需要手工安装的 AUR 包 , 具体步骤可以参考 &lt;a href="https://wiki.archlinux.org/index.php/AUR"&gt;AUR&lt;/a&gt;。如果有必要，可以参考 &lt;a href="https://wiki.archlinux.org/index.php/Yaourt"&gt;Yaourt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; 如果你以前没有使用过 &lt;code&gt;systemd&lt;/code&gt;，那么你应该访问 &lt;a href="https://wiki.archlinux.org/index.php/Systemd"&gt;Systemd&lt;/a&gt;，目前很多发行版都已经有了 &lt;a href="https://en.wikipedia.org/wiki/Systemd#Adoption"&gt; 迁移计划 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt; 如果你使用 &lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt;，要注意 Arch 官方源当中既有 python2 也有 python3。一般 &lt;code&gt;python&lt;/code&gt; 默认解析到 &lt;code&gt;python3&lt;/code&gt;，要使用 2 版的解析器，必须使用 &lt;code&gt;python2&lt;/code&gt;。不太方便？可以参考使用 virtualenv 和 virtualenvwrapper，如果你真的是一个 pythoner，你会知道去哪里找这两个模块的源码和文档 &lt;/li&gt;
&lt;li&gt; 最后，请从 AUR 安装 &lt;code&gt;archey&lt;/code&gt;, 并且执行它 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 还想玩更多？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 通读 &lt;a href="https://wiki.archlinux.org/index.php/General_recommendations"&gt;Arch Recommendations&lt;/a&gt;，看看大家有什么好东西推荐，或者你可以浏览 &lt;a href="https://wiki.archlinux.org/index.php/List_of_applications"&gt;Application List&lt;/a&gt;，看看有没有什么你想推荐给大家 &lt;/li&gt;
&lt;li&gt; 参与 &lt;a href="http://wiki.archlinux.org/"&gt;Arch Wiki&lt;/a&gt; 的条目编写和 &lt;a href="http://bbs.archlinux.org/"&gt;Arch Forum&lt;/a&gt; 的讨论吧 &lt;/li&gt;
&lt;li&gt; 提交向一个自己的 AUR，不过可能你需要了解一下 &lt;a href="https://wiki.archlinux.org/index.php/ABS"&gt;ABS&lt;/a&gt;，当然还有 &lt;a href="https://wiki.archlinux.org/index.php/PKGBUILD"&gt;PKGBUILD&lt;/a&gt; 和 &lt;a href="https://wiki.archlinux.org/index.php/AUR"&gt;AUR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt; 结语 &lt;/h1&gt;
&lt;p&gt; 欢迎入伙！快去编写 &lt;a href="http://wiki.archlinux.org/"&gt;Arch Wiki&lt;/a&gt; 和提交 &lt;a href="https://wiki.archlinux.org/index.php/AUR"&gt;AUR&lt;/a&gt; 包，来纳你的投名状吧！&lt;/p&gt;
&lt;p&gt; 但请记住，人生总是很艰难，有一股黑暗势力每年都会入侵一次 Arch 的世界。
它们会以各种方式来破坏 Arch 世界的和谐，包括但不限于 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 利用原力损毁你的硬盘 &lt;/li&gt;
&lt;li&gt; 利用意识控制让你忘记查看 &lt;a href="https://mailman.archlinux.org/mailman/listinfo/arch-announce"&gt;Arch Announce&lt;/a&gt;，或执行 &lt;code&gt;rm -rf *&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 做为一名正义的 Archer，你会使用 &lt;a href="https://wiki.archlinux.org/index.php/archboot"&gt;Archboot&lt;/a&gt; 来维护世界和平的，对吗？&lt;/p&gt;</content><category term="archlinux"></category></entry><entry><title>利用耗怒回血解决野蛮人的战斗恢复问题</title><link href="http://yuex.in/post/2014/03/diablo3-barb-build.html" rel="alternate"></link><published>2014-03-30T00:00:00+08:00</published><updated>2014-03-30T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2014-03-30:/post/2014/03/diablo3-barb-build.html</id><summary type="html">&lt;h1&gt;Build 介绍 &lt;/h1&gt;
&lt;p&gt; 在《夺魂之镰》之中，
由于 “ 生命窃取 ” 的去除和 “ 战斗暴怒 ” 与 “ 狂战之怒 ” 两个技能某些符文的修改，
在之前版本中广泛流行的 “ 双旋风 ”build 已经跑不起来了。
作为近战职业之一的野蛮人，寻找新的战斗恢复方式迫在眉睫。
在本文中我想到和试验了一个围绕被动技能 “ 嗜血狂人 ” 建立的 build，
可以在不牺牲装备上任何主要属性的前提之下（不会牺牲 dps），
通过合理搭配稀有装备的属性，让野蛮人达到战撸苦痛 I、II、III 的目的。&lt;/p&gt;
&lt;p&gt; 以下会先说明耗怒回血的原理，接着会根据这个原理展示我目前在用的几个 build，
和几个可能的变种 build。最后是装备选择和巅峰点数的选择。
各位读者可以根据耗怒回血的原理自由发挥，选择自己喜欢的技能奋战《夺魂之镰》。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 耐性不够的朋友可以直接跳转到 “ 技能选择 ” 章节，但我还是建议你看完原理部分 &lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;Build 特点 &lt;/h1&gt;
&lt;p&gt; 优势 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 治疗的提升不以牺牲 dps 和 ehp 为前提，充分利用装备上的词缀，让三者可以共同提升，互不干扰 &lt;/li&gt;
&lt;li&gt; 渐进的装备更新路线，不需要特定传奇的支持，野蛮人可以从稀有装备慢慢过渡到传奇 &lt;/li&gt;
&lt;li&gt; 较好的技能兼容，围绕耗怒回血 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;Build 介绍 &lt;/h1&gt;
&lt;p&gt; 在《夺魂之镰》之中，
由于 “ 生命窃取 ” 的去除和 “ 战斗暴怒 ” 与 “ 狂战之怒 ” 两个技能某些符文的修改，
在之前版本中广泛流行的 “ 双旋风 ”build 已经跑不起来了。
作为近战职业之一的野蛮人，寻找新的战斗恢复方式迫在眉睫。
在本文中我想到和试验了一个围绕被动技能 “ 嗜血狂人 ” 建立的 build，
可以在不牺牲装备上任何主要属性的前提之下（不会牺牲 dps），
通过合理搭配稀有装备的属性，让野蛮人达到战撸苦痛 I、II、III 的目的。&lt;/p&gt;
&lt;p&gt; 以下会先说明耗怒回血的原理，接着会根据这个原理展示我目前在用的几个 build，
和几个可能的变种 build。最后是装备选择和巅峰点数的选择。
各位读者可以根据耗怒回血的原理自由发挥，选择自己喜欢的技能奋战《夺魂之镰》。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 耐性不够的朋友可以直接跳转到 “ 技能选择 ” 章节，但我还是建议你看完原理部分 &lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;Build 特点 &lt;/h1&gt;
&lt;p&gt; 优势 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 治疗的提升不以牺牲 dps 和 ehp 为前提，充分利用装备上的词缀，让三者可以共同提升，互不干扰 &lt;/li&gt;
&lt;li&gt; 渐进的装备更新路线，不需要特定传奇的支持，野蛮人可以从稀有装备慢慢过渡到传奇 &lt;/li&gt;
&lt;li&gt; 较好的技能兼容，围绕耗怒回血，可以选择先祖之锤，旋风斩，跃击，抛尸，山崩地裂等多个技能打造个性化的 build。这是一个 build，却又不是仅仅一个 build，选你所爱，爱你所选，自行车谁爱骑谁骑 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 劣势 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 无怒气时，非常危险。可以考虑巅峰点数选择击中恢复，提供额外的生命恢复手段 &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt; 耗怒回血的原理 &lt;/h1&gt;
&lt;p&gt; 以下会说明耗怒回血的原理和其有效性，以及装备上必要的词缀选择。&lt;/p&gt;
&lt;h2&gt; 被动技能 " 嗜血狂人 "&lt;/h2&gt;
&lt;p&gt; 游戏中对于 “ 嗜血狂人 ” 效果的描述为 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 毎消耗一点怒气恢复 578 点生命值，治疗量加成为生命之球效果加成的 1%&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 这个描述稍有模糊。实际的效果是野蛮人毎点怒气消耗的血量恢复值为
基础值 578 加上 “ 生命之球与药水恢复量 ” 总和乘以 0.01。
举例来说，野蛮人从装备上获得的 “ 生命之球与药水恢复量 ” 总和为 113,000，
则这个加成为 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;113000 * 0.01 = 1130
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 这样，实际的毎点怒气消耗的血量恢复将变为 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;578 + 1130 = 1708
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt; 耗怒回血的有效性 &lt;/h2&gt;
&lt;p&gt; 虽然上面这个数字 1708 看似不起眼，但请注意这是毎点怒气消耗产生的回血量，
对于一个消耗 20 点怒气的技能（先祖之锤，战斗暴怒），
实际的血量恢复将会是（怒气消耗降低为 0 的情况下）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1708 * 20 = 34160
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 而一个护甲免伤和抗性免伤都在 75% 左右的野蛮人，
在苦痛 II 第三幕，血族打击者造成的伤害大约为 15,000 每次，
而结合主动免伤技能（战吼、霸气无伤反伤、忘却痛苦等），这个数值还要大幅降低。
我们以主动技能免伤 35%（霸气无双反弹伤害符文）来计算，
一次先祖之锤带来的血量恢复，相当于 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;34160 / ( 15000 * 0.65 ) = 3.50
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 个杂兵的伤害。此外，由于一般怪物的攻击速度要明显低于野蛮人，
以双持毎秒攻击次数 1.5（考虑了野蛮人的攻击速度加成），
怪物毎秒攻击次数 1.0（无公开数据，目测）计算，我们前面提到的数字会变为 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;3.50 * 1.5 = 5.25
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 换言之，只有当 6 个及以上的杂兵围殴野蛮人的时候，野蛮人才会出现血量下降。
而血族打击者的模型较大，6 个左右基本上会将野蛮人包围起来，
所以野蛮人不会再受到额外血族打击者的攻击伤害。
此外，如果野蛮人的 dps 不是很低的话，选择合适的难度，
基本可以在血族打击者造成明显血量下降之前将其消灭。
所以野蛮人实际可以承受的围殴数字还要高很多。&lt;/p&gt;
&lt;p&gt; 虽然游戏当中的怪物各类多种多样，但是他们的伤害大小、攻击速度、模型大小，
基本符合 “ 体型越大，攻击速度越慢，伤害越高 ” 的规律。因此，上面所讲的例子当中，
野蛮人被围殴时，可能受到的总伤害量并不会有太大的变化。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 我要打十个！
  &lt;small&gt; 甄子丹 &lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt; 耗怒回血的词缀成本 &lt;/h2&gt;
&lt;p&gt; 相比于 “ 毎秒生命恢复 ” 和 “ 击中生命恢复 ”，耗怒回血最大的不同是词缀成本非常低。
秒回和击回做为装备上的主要属性，会占据一个主要属性词缀。
而每一件装备上只能有 4 个主要属性，选择秒回和击回，
就意味着必须要牺牲一条可以提升 dps 或者 ehp 的词缀。
相比之下，耗怒回血所需要的 “ 生命之球与药水恢复 ” 在装备上是做为次要属性出现的，
完全可以在不牺牲 dps 和 ehp 的情况下兼顾。例如，
已经有 4 条不错的主要属性（力量 / 体能 / 全抗 / 镶孔，或者力量 / 爆击 / 爆伤 / 攻速）
的稀有装备可以考虑将其中的次要属性重铸为 “ 生命之球与药水恢复量 +N”；
而已经有 “ 生命之球与药水恢复量 +N” 这条次要属性的装备，
可以考虑将其中一条不太好主要属性重铸为更有用的属性，
如秒回重铸为体能或者全抗。
如此一来，也能使得装备上的词缀利用更充分（其它次要属性大部分为可有可无的属性）。&lt;/p&gt;
&lt;p&gt; 除此之外，“ 生命之球与药水恢复量 ” 本身也是一条不错的词缀。
目前，生命药水的效果是恢复英雄 60% 的生命，以一个血量 450,000 的野蛮人为例，
一次生命药水可以恢复血量 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;450,000 * 0.60 = 270,000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;“ 生命之球与药水恢复量 ” 可以出现在肩 / 胸 / 足 / 项链 / 戒指 1/ 戒指 2，共 6 件装备上，
词缀取值范围约 14,000~20,000，以 17,000 计算，6 件装备可以产生的加成总量为 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;17,000 * 6 = 102,000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 所以使用一次生命药水，可以恢复生命 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;102,000 + 270,000 = 372,000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 的生命。这相当于 83% 的生命量。换言之，
当野蛮人需要使用生命药水时（一般是血量低于 20% 的时候），
一个生命药水就可以将野蛮人的生命全部补满。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 三精牌葡萄糖酸锌口服液，我只喝红瓶的！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt; 技能选择 &lt;/h1&gt;
&lt;p&gt; 这里会先会针对伤害输出、耗怒回血、怒气产生、走位等 内容做一点讨论，
之后会根据讨论结果给出几个可以兼容几种常见的技能的 build 变种。
各位读者可以进一步发挥 &lt;/p&gt;
&lt;h2&gt; 伤害输出 &lt;/h2&gt;
&lt;p&gt; 先祖之锤配合战斗暴怒（血溅八方），即可以作为单体输出，
也可以利用溅射伤害作为小范围群体输出。
这里我推荐恶魔铁贴这个符文，是因为所带的减速效果，
在击杀哥布林和远程怪时，具有非常好的控制效果。&lt;/p&gt;
&lt;p&gt; 山崩地裂的怒气消耗减 CD 和耗怒回血一样，需要的快速消耗怒气。
将其做为主要的输出技能也是不错的选择。&lt;/p&gt;
&lt;p&gt; 上古之矛（巨岩怒掷）消耗所有怒气，也是个不错的输出技能。&lt;/p&gt;
&lt;h2&gt; 耗怒回血 &lt;/h2&gt;
&lt;p&gt; 站桩砸先祖之锤是最主要的耗怒回血方式，提供了一种小量持续的生命恢复。&lt;/p&gt;
&lt;p&gt; 上古之矛（巨岩怒掷）消耗所有怒气，可以做为一个大治疗存在。&lt;/p&gt;
&lt;p&gt; 战斗暴怒的 20 点怒气消耗也可以作为额外的回血手段。&lt;/p&gt;
&lt;h2&gt; 怒气产生 &lt;/h2&gt;
&lt;p&gt; 无可饶恕提供稳定的毎秒怒气累积。&lt;/p&gt;
&lt;p&gt; 战吼（迎敌怒喝）加怒气提供了不错的怒气爆发，
可以视情况切换（顽抗战吼）加抗性，或者（鼓舞土气）加秒回。&lt;/p&gt;
&lt;p&gt; 迷信提供了某些精英战中额外的怒气产生，踩着好几个瘟疫和亵渎砸先祖之锤，
怒气可以达到不衰退。&lt;/p&gt;
&lt;p&gt; 山崩地裂可以搭配被动技能大地之怒，来提供怒气。这里我推荐（天崩地裂）这个符文，
累积 3 次，想用就用。&lt;/p&gt;
&lt;p&gt; 狂暴冲锋（韧劲）毎击中一个敌人就产生 10 点怒气，还可以提供一个走位方式。&lt;/p&gt;
&lt;p&gt; 狂乱等主要技能作为额外的怒气补充，可以用来应对某些尴尬的情况。
这里我推荐选择了（狂人）加伤害，可以根据喜好选择其它符文。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I'm the special one.
  &lt;small&gt;Mourinho&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt; 伤害减免 &lt;/h2&gt;
&lt;p&gt; 战吼提供护甲加成，队友也能享受得到。&lt;/p&gt;
&lt;p&gt; 霸气无双（制敌先机）提供了 35% 的伤害减免。虽然这不是野蛮人减伤最高的技能，
但结合先祖之锤在满怒时的高爆击，可以很快地触发霸气无双的爆击减 CD，
提供非常不错的伤害减免覆盖。更可贵的是这 35% 的伤害减免会反弹给攻击者。&lt;/p&gt;
&lt;p&gt; 威吓怒吼也是个不错的选择，虽然减伤比例低，但是覆盖时间更长，操作更安逸。&lt;/p&gt;
&lt;p&gt; 忘却痛苦 CD 过长，目前来看不是一个太好的选择。&lt;/p&gt;
&lt;h2&gt; 走位 &lt;/h2&gt;
&lt;p&gt; 跃击可以提供一种霸气的走位方式，我推荐使用（亚瑞特的呼唤）
同时具有小范围拉怪的能力，组队时有不错的救驾队友的功能，可以视情况选择其它符文。
在某些特定地图中，跃击还可以像传送一样达到快速旅行的目的。&lt;/p&gt;
&lt;p&gt; 狂暴冲锋的（韧劲）加怒气、（绝情猛攻）减 CD，都是不错的走位技能，
有传奇支持后，冲锋这个技能会更神。&lt;/p&gt;
&lt;p&gt; 旋风斩（烈风剪）加怒气。要注意的是，旋风斩是个消耗 10 点怒气的技能，
配合耗怒回血，等于是享受了（集血斩）这个符文，
喜欢旋风斩的朋友可以尝试开着霸气无双的反伤来转怪群，回血又回怒，感觉不错。&lt;/p&gt;
&lt;h2&gt; 免疫控制 &lt;/h2&gt;
&lt;p&gt; 势不可当做为主要的控制免疫技能，提供 30% 的时间缩短，
而且有一定机率恢复 20% 的生命，经常在血不满的情况下被控制，然后瞬间血就满了。
这个被动技能还可以通过装备上的另外一个次要属性 “ 控场时间缩短 ” 来进一步缩短时间，
感觉应该可以达到被控制一下，立刻解除，还有机会恢复 20% 的血量。
实际上装备上的时间缩短加上这个被动，是可以达到 100% 控场时间缩短的，
但是不确定是否 100% 控场时间缩短之后还会触发势不可挡的回血特效。
由于目前装备有限，这个我还没有进行测试。&lt;/p&gt;
&lt;p&gt; 狂战之怒由于超长的 CD，目前来看性价比不高。&lt;/p&gt;
&lt;h2&gt; 技能变种 &lt;/h2&gt;
&lt;h3&gt; 变种 1：组队坦克 &lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt; 撼山易，撼岳家军难 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="barb-build-tank" src="/image/diablo3-build/barb-build-tank.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 鼠标左键：狂乱（狂人）&lt;/li&gt;
&lt;li&gt; 鼠标右键：跃击（亚瑞特呼唤）&lt;/li&gt;
&lt;li&gt; 一号按键：先祖之锤（恶魔铁砧）&lt;/li&gt;
&lt;li&gt; 二号按键：霸气无双（制敌先机）&lt;/li&gt;
&lt;li&gt; 三号按键：战斗暴怒（血溅八方）&lt;/li&gt;
&lt;li&gt; 四号按键：战吼（迎敌怒喝）&lt;/li&gt;
&lt;li&gt; 被动技能：无可饶恕，迷信，嗜血狂人，势不可当 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 先祖之锤结合霸气无双的反伤，站桩扛精英游刃有余；
配合战斗暴怒（血溅八方）也有不错的群伤能力。
这里推荐（恶魔铁砧）减速符文，击杀哥布林和组队控制精英怪可以更游刃有余。&lt;/p&gt;
&lt;p&gt; 跃击相比冲锋和旋风斩，移动速度要快很多，这里选择（亚瑞特呼唤）具有拉怪功能，
非常适合组队救驾。试想一下，某个女猎魔人正在被杂兵纠缠骚扰，一名野蛮人从天而降，
英雄救美，何等霸气。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 我的意中人是个盖世英雄，有一天他会踩着七色的云彩来娶我。
  &lt;small&gt; 大话西游 &lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt; 变种 2：旋风斩 &lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt; 其疾如风，其徐如林，侵掠如火，不动如山
  &lt;small&gt; 孙子兵法 ・ 军争 &lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="barb-build-whirlwind" src="/image/diablo3-build/barb-build-whirlwind.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 鼠标左键：狂乱（狂乱先驱）&lt;/li&gt;
&lt;li&gt; 鼠标右键：旋风斩（烈风剪）&lt;/li&gt;
&lt;li&gt; 一号按键：先祖之锤（恶魔铁砧）&lt;/li&gt;
&lt;li&gt; 二号按键：霸气无双（制敌先机）&lt;/li&gt;
&lt;li&gt; 三号按键：战斗暴怒（血溅八方）&lt;/li&gt;
&lt;li&gt; 四号按键：山崩地裂（天崩地裂）&lt;/li&gt;
&lt;li&gt; 被动技能：无可饶恕，迷信，嗜血狂人，大地之怒 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 这个变种中使用山崩地裂（天崩地裂）配合大地之怒提供较高的怒气产生。
由于放弃了势不可当的控制减免，需要通过装备上的控场减免来弥补。&lt;/p&gt;
&lt;p&gt; 旋风斩推荐（烈风剪）回怒，一旦怒气偏少，只要停下来放一个山崩地裂就可以继续上路了 &lt;/p&gt;
&lt;p&gt; 这里，狂乱选择了（狂乱先驱）增加移动速度，让旋风斩更流畅。&lt;/p&gt;
&lt;p&gt; 此外，先祖站桩过程中，使用山崩地裂还可以提供额外的伤害输出。&lt;/p&gt;
&lt;h3&gt; 变种 3：巨岩怒掷 &lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt; 力拔山兮气盖世
  &lt;small&gt; 垓下歌 &lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="barb-build-rock" src="/image/diablo3-build/barb-build-rock.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 鼠标左键：狂乱（天袭）&lt;/li&gt;
&lt;li&gt; 鼠标右键：跃击（烈风剪）&lt;/li&gt;
&lt;li&gt; 一号按键：上古之矛（巨岩怒掷）&lt;/li&gt;
&lt;li&gt; 二号按键：霸气无双（制敌先机）&lt;/li&gt;
&lt;li&gt; 三号按键：战斗暴怒（血溅八方）&lt;/li&gt;
&lt;li&gt; 四号按键：战吼（迎敌怒喝）&lt;/li&gt;
&lt;li&gt; 被动技能：无可饶恕，迷信，嗜血狂人，怒意高涨 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 旋风斩用来提供小量的生命恢复，同时提供走位。&lt;/p&gt;
&lt;p&gt; 巨岩怒掷作为主要的输出技能，同时提供大量的生命恢复。
因此，当血量下降到 40% 时使用巨岩怒掷会有比较好的利用率。&lt;/p&gt;
&lt;p&gt; 因为装备水平不高的时候，怒气产生的比较慢，所以这里选择了怒意高涨，
战吼（迎敌怒喝），和旋风斩（烈风剪）。同时无怒气就不能进行耗怒回血，
所以这里选择了狂乱（天袭），来让精英战中的怒气累积更安全。&lt;/p&gt;
&lt;p&gt; 由于经常处于怒气匮乏和贫血的状态，大家可以关注下
踏泥铁头靴的 “ 生命损失提高移动速度 ” 和清水羽织的 “ 生命低于 20% 攻击一定爆击 ”，
当然还有夺魂者裹腕的 “ 生命之球恢复 25% 主要能理 ”。&lt;/p&gt;
&lt;h1&gt; 装备选择 &lt;/h1&gt;
&lt;h2&gt; 武器 &lt;/h2&gt;
&lt;p&gt; 由于耗怒回血需要较快地倾泻怒气，所以推荐使用双持。
此外，双持武器的高攻速也有利于快速将霸气无双的 CD 置零。&lt;/p&gt;
&lt;h2&gt; 生命之球恢复词缀选择 &lt;/h2&gt;
&lt;p&gt; 如前所述，“ 生命之球与药水恢复量 +N” 可能出现在肩 / 胸 / 足 / 项链 / 戒指 1/ 戒指 2，
共 6 个位置，取值范围为 14,000~20,000，可以期待的总量是 170,000，
会提供毎点耗怒恢复 1700 点生命。&lt;/p&gt;
&lt;p&gt; 已经有 4 条不错的主要属性的稀有装备，
例如力量 / 体能 / 全抗 / 镶孔，或者力量 / 爆击 / 爆伤 / 攻速，
可以考虑将其中的次要属性重铸为 “ 生命之球与药水恢复量 +N”；
而已经有 “ 生命之球与药水恢复量 +N” 这条次要属性的装备，
可以考虑将其中一条不太好主要属性重铸为更有用的属性，
如秒回重铸为体能或者全抗。&lt;/p&gt;
&lt;h2&gt; 控场时间缩短词缀选择 &lt;/h2&gt;
&lt;p&gt; 这个词缀可以出现在头 / 项链 / 戒指 1/ 戒指 2，共 4 个位置，取值范围为 10%~20%。
由于是次要属性，可以考虑在保证生命之球回复加成的前提，尽量兼顾这条词缀 &lt;/p&gt;
&lt;h2&gt; 消耗怒气回血 &lt;/h2&gt;
&lt;p&gt; 重型腰带上，这条词缀会以主要属性的方式出现，是否重铸或保留这条词缀，
大家可以根据情况决定，由于这条词缀的上限不超过 200，
所以即使没有，也不会产生很大的影响。
此外，要注意的是不朽之王的套装奖励也有这条词缀 &lt;/p&gt;
&lt;h1&gt; 巅峰点数 &lt;/h1&gt;
&lt;p&gt; 额外需要注意的是辅肋中不要使用 “ 能量消耗降低 ”，因为就是需要用怒气消耗来恢复血量。
这里推荐使用击中生命恢复，可以提供额外的战斗恢复补充。&lt;/p&gt;
&lt;h1&gt; 结语 &lt;/h1&gt;
&lt;p&gt; 是男人就要刚正面 &lt;/p&gt;
&lt;p&gt;&lt;img alt="barb-xuyunlong" src="/image/diablo3-build/barb-xuyunlong.jpg"&gt;&lt;/p&gt;</content><category term="diablo3"></category></entry><entry><title>动手写 PAM 模块让 sshd 支持用户接入控制</title><link href="http://yuex.in/post/2013/09/hands-on-pam-module-and-sshd.html" rel="alternate"></link><published>2013-09-29T00:00:00+08:00</published><updated>2013-09-29T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2013-09-29:/post/2013/09/hands-on-pam-module-and-sshd.html</id><summary type="html">&lt;p&gt; 承接上一篇 blog，某本意是想用 pam_limits.so 来做用户登录限制，从而可以让多个用户共用一台机器做 ssh 代理。这样一来，服务器端就必须要对用户进行基于用户名和登录 ip 的。&lt;/p&gt;
&lt;p&gt; 想当然的做法是用 /etc/security/limits.conf 中的 maxlogins 解决。但是这个是有问题的，maxlogins 是要用户登录到 shell 才会统计的。pam_limits.so 中读取的是 utmp，这个是存在 /var/run/utmp 中的，用 &lt;code&gt;w&lt;/code&gt; 可以查看。而 &lt;code&gt;ssh -N&lt;/code&gt; 是不会被 utmp 记录为 login 的。所以，如果用上篇 blog 中的方法实践的话，用户可以用 &lt;code&gt;ssh -N&lt;/code&gt; 绕过所有的接入控制。一般而言，这也不是什么大问题，因为用户 &lt;code&gt;ssh -N&lt;/code&gt; 接入的话 …&lt;/p&gt;</summary><content type="html">&lt;p&gt; 承接上一篇 blog，某本意是想用 pam_limits.so 来做用户登录限制，从而可以让多个用户共用一台机器做 ssh 代理。这样一来，服务器端就必须要对用户进行基于用户名和登录 ip 的。&lt;/p&gt;
&lt;p&gt; 想当然的做法是用 /etc/security/limits.conf 中的 maxlogins 解决。但是这个是有问题的，maxlogins 是要用户登录到 shell 才会统计的。pam_limits.so 中读取的是 utmp，这个是存在 /var/run/utmp 中的，用 &lt;code&gt;w&lt;/code&gt; 可以查看。而 &lt;code&gt;ssh -N&lt;/code&gt; 是不会被 utmp 记录为 login 的。所以，如果用上篇 blog 中的方法实践的话，用户可以用 &lt;code&gt;ssh -N&lt;/code&gt; 绕过所有的接入控制。一般而言，这也不是什么大问题，因为用户 &lt;code&gt;ssh -N&lt;/code&gt; 接入的话，只能做端口转发这一件事情。而若 sshd 禁用端口转发的话，这个也就只能用来攻击了，而这种又太容易防范了（做贼还要用真名吗），所以也不会够成实质性的威胁。&lt;/p&gt;
&lt;p&gt; 但对于希望把端口转发做为一项服务的某来话，这就是个大问题了。一项服务，如果不能进行用户权限控制的话，那只能算是自己给自己开了一个安全漏洞。解决的方法，最好就是 ssh 可以提供相应的功能。但目前来看，似乎不太可能。而且即使有这个可能，自己动手 commit 的话，直到 merge 也要太长的周期。所以某转而来调研 pam 是不是也能实现这个功能。&lt;/p&gt;
&lt;p&gt; 答案是肯定的。而且更加方便的方法是用 pam_script.so 来做这件事。在进行账户验证的时候，执行脚本，来完成对 ssh 接入用户数和用户 ip 的检查，从而完成对单个账号登录和单个 ip 登录数目的限制。可惜的是，pam 的发行包中没有 pam_script 这个模块。网上可以找到一些别人写的，但大多语焉不详，有的是 doc 一笔带过，有的是编译无法一次通过。此外，某发现这些 pam_script.so 的实现，都只能针对 auth，password 和 session 进行插入，而独没有 account。根据 &lt;code&gt;man pam&lt;/code&gt; 中的解释 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;account - provide account verification types of service: has the user's password expired?; is this user permitted access to the requested service?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 似乎 account 才是最符合某的接入控制需求的。所以，某决定还是自己动手写一个简单的 pam_script.so 吧。对于如何写一个 pam module，可以参考 &lt;a href="http://www.rkeene.org/projects/info/wiki/222"&gt; 这个 &lt;/a&gt; 和 &lt;a href="http://www.freebsd.org/doc/en/articles/pam/article.html#pam-sample-module"&gt; 这个 &lt;/a&gt;。因为我只做 account 用，所以只要实现 &lt;code&gt;pam_sm_acct_mgmt&lt;/code&gt; 就可以了。只要在 C 中指定一个脚本路径，然后用一些参数调用这个脚本，并读取返回值就可以了。而外部脚本，可以使用 shell script，也可以使用 python，对登录数目的统计可以用 &lt;code&gt;ps&lt;/code&gt; 和 &lt;code&gt;netstat&lt;/code&gt;，只要检查完把结果返回给 &lt;code&gt;pam_script.so&lt;/code&gt; 就可以了。&lt;/p&gt;
&lt;p&gt; 最后一步，不要忘记把 &lt;code&gt;pam_script.so&lt;/code&gt; 加入到 /etc/pam.d/sshd 中 &lt;/p&gt;
&lt;p&gt; 因为目前某的 vps 还在做小范围的测试，代码要晚点才能放到 github 上。&lt;/p&gt;</content><category term="sshd"></category><category term="pam"></category><category term="python"></category></entry><entry><title>配置 sshd 使用 pam 认证小结</title><link href="http://yuex.in/post/2013/09/config-sshd-using-pam.html" rel="alternate"></link><published>2013-09-25T00:00:00+08:00</published><updated>2013-09-25T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2013-09-25:/post/2013/09/config-sshd-using-pam.html</id><summary type="html">&lt;p&gt; 某今年新入了一台 linode 主机，最便宜的 plan，年中的时候，linode 流量从 2GB 免费升级到了 2TB。因为某的博客是直接放到 github 上的，所以对 linode 的使用一直都不怎么充分。仅限于几个朋友之间的 L2TP 和自己的 &lt;code&gt;ssh -D&lt;/code&gt;。一直都有一个架立一个 socks 伺服的想法，来给大家免费用。无奈于大部分的浏览器都不支持有密码的 socks 认证，如果架设一个没有验证的伺服又有很严重的管理和用户性能区分保证的问题，所以这个想法一直没有落实。今天花了一些时间，用 ssh＋pam＋chroot jail 完成了这个想法，将思路大概记录一下，希望对有同样需求的同学有所帮助。&lt;/p&gt;
&lt;p&gt;ssh＋pam＋chroot 各模块的功能如下 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ssh/sshd：client and server，支持密码用户 &lt;/li&gt;
&lt;li&gt;pam：提供基于用户名和 ip 地址段的登陆认证和限制 &lt;/li&gt;
&lt;li&gt;chroot：做成一个 chroot jail 限制用户在主机上的权限 &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;chroot …&lt;/h2&gt;</summary><content type="html">&lt;p&gt; 某今年新入了一台 linode 主机，最便宜的 plan，年中的时候，linode 流量从 2GB 免费升级到了 2TB。因为某的博客是直接放到 github 上的，所以对 linode 的使用一直都不怎么充分。仅限于几个朋友之间的 L2TP 和自己的 &lt;code&gt;ssh -D&lt;/code&gt;。一直都有一个架立一个 socks 伺服的想法，来给大家免费用。无奈于大部分的浏览器都不支持有密码的 socks 认证，如果架设一个没有验证的伺服又有很严重的管理和用户性能区分保证的问题，所以这个想法一直没有落实。今天花了一些时间，用 ssh＋pam＋chroot jail 完成了这个想法，将思路大概记录一下，希望对有同样需求的同学有所帮助。&lt;/p&gt;
&lt;p&gt;ssh＋pam＋chroot 各模块的功能如下 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ssh/sshd：client and server，支持密码用户 &lt;/li&gt;
&lt;li&gt;pam：提供基于用户名和 ip 地址段的登陆认证和限制 &lt;/li&gt;
&lt;li&gt;chroot：做成一个 chroot jail 限制用户在主机上的权限 &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;chroot jail&lt;/h2&gt;
&lt;p&gt; 在 sshd 中添加 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Match Group groupname
    ChrootDirectory /path/to/jail
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 这会使得 groupname 的用户在登陆 ssh 之后，会自动被 chroot 到管理员定义的 jail 到中，这里以 /path/to/jail 为例。这只是办了入狱手续，还要真正的建立监狱才行。chroot 之后，会自动调用 bash，要保证在这个路径下，bash 可以正常使用。只要用 &lt;code&gt;ldd&lt;/code&gt; 解析一下 bash 的依赖，然后将所以依赖放到这个路径下就可以了。监狱制成之后，要自己 &lt;code&gt;chroot&lt;/code&gt;&lt;del&gt; 体验 &lt;/del&gt; 验证一下。&lt;/p&gt;
&lt;h2&gt;ssh&lt;/h2&gt;
&lt;p&gt;ssh 的问题主要是客户端。linux 和 mac 用户就不用说了，&lt;code&gt;ssh -D&lt;/code&gt; 可以直接参考 manpage，还不会的就去面壁吧。windows 下可以使用 putty，并且 putty 可以事先设置好，直接分发给用户。用户先建立 ssh 连接，再用浏览器 socks 连接到本地绑定的端口。更进一步可以通过安装浏览器插件来根据规则自动地应用 socks，比如 chrome 上可以使用 Proxy Swichy&lt;/p&gt;
&lt;h2&gt;pam&lt;/h2&gt;
&lt;p&gt;pam 有两方面的作用，一个是提供基于用户和地址的登陆验证，一个是限制用户使用系统资源。对于资源限制，主要是防止 fork bomb 和限制登陆数目。这两个都可以在 /etc/security/limits.conf 中完成。其实在 centos6 当中，对于 fork bomb 系统有防范，可以参考 /etc/security/limits.d/，这个值是 1024。另外，对于写的权限控制，最简单的方法是把 jail 建立在 /var 来解决，/var 对非 root:root 的用户是没有写的权限的。对于登陆验证，需要在 sshd_config 中打开 &lt;code&gt;UsePam yes&lt;/code&gt;，并且在 /etc/pam.d/sshd 中加入 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;account    required     pam_nologin.so
account    required     pam_access.so  &lt;span class="c1"&gt;# &amp;lt;- added line&lt;/span&gt;
account    include      password&lt;span class="o"&gt;-&lt;/span&gt;auth
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 此外还要在 /etc/security/access.conf 中写入具体的登陆控制，可以参考其中的 comments，支持用户和 ip 区分。注意这两个文件都是顺序解析的，First Come Firs Serve。所以要注意写入规则的顺序。&lt;/p&gt;
&lt;p&gt; 对于这样建立的 socks 伺服并非没有问题，比如 bandwidth 的限额。&lt;/p&gt;</content><category term="sshd"></category><category term="pam"></category></entry><entry><title>terminal 切换小结</title><link href="http://yuex.in/post/2013/09/terminal-switching.html" rel="alternate"></link><published>2013-09-24T00:00:00+08:00</published><updated>2013-09-24T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2013-09-24:/post/2013/09/terminal-switching.html</id><summary type="html">&lt;p&gt; 早就听说 xterm 和 urxvt 是轻量高可配置，所以想利用周末的时间把某现在在用的 terminator 切换到 xterm 或者 urxvt。结果放弃了。倒不是因为配置太过复杂，而是某觉得，在进行了一定配置之后，对比需求 / 成本 / 收益觉得，这样的配置不能称之为有效。某认为将这些东西总结一下，可能有助于有同样切换初衷的同学少走一些弯路。&lt;/p&gt;
&lt;p&gt; 某切换 terminal 的初始需求 :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; 可全屏 &lt;/li&gt;
&lt;li&gt; 支持 solarized 的颜色设置 &lt;/li&gt;
&lt;li&gt; 支持 inconsolata-g 和 wenquanyi 中文 &lt;/li&gt;
&lt;li&gt; 支持 tab&lt;/li&gt;
&lt;li&gt; 可以和 tmux 和 powerline 和谐相处 &lt;/li&gt;
&lt;li&gt; 轻量化 &lt;/li&gt;
&lt;li&gt;copy and paste&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 因为 urxvt 的初衷就是取代 xterm。而 terminator，konsole，gnome-terminal，xfce4-terminal 的设置都是大同小异。所以下面的讨论主要以 urxvt 和 terminator 为例。&lt;/p&gt;
&lt;p&gt; 第一条 …&lt;/p&gt;</summary><content type="html">&lt;p&gt; 早就听说 xterm 和 urxvt 是轻量高可配置，所以想利用周末的时间把某现在在用的 terminator 切换到 xterm 或者 urxvt。结果放弃了。倒不是因为配置太过复杂，而是某觉得，在进行了一定配置之后，对比需求 / 成本 / 收益觉得，这样的配置不能称之为有效。某认为将这些东西总结一下，可能有助于有同样切换初衷的同学少走一些弯路。&lt;/p&gt;
&lt;p&gt; 某切换 terminal 的初始需求 :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; 可全屏 &lt;/li&gt;
&lt;li&gt; 支持 solarized 的颜色设置 &lt;/li&gt;
&lt;li&gt; 支持 inconsolata-g 和 wenquanyi 中文 &lt;/li&gt;
&lt;li&gt; 支持 tab&lt;/li&gt;
&lt;li&gt; 可以和 tmux 和 powerline 和谐相处 &lt;/li&gt;
&lt;li&gt; 轻量化 &lt;/li&gt;
&lt;li&gt;copy and paste&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 因为 urxvt 的初衷就是取代 xterm。而 terminator，konsole，gnome-terminal，xfce4-terminal 的设置都是大同小异。所以下面的讨论主要以 urxvt 和 terminator 为例。&lt;/p&gt;
&lt;p&gt; 第一条 &lt;/p&gt;
&lt;p&gt;urxvt 需要使用 wmctrl 来进行全屏控制，需要对 urxvt 进行 perl 扩展，可以参考 AUR 中的 urxvt-fullscreen&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;。xterm 内建支持 fullscreen，只不过绑定键位是 Alt-Enter&lt;/p&gt;
&lt;p&gt; 第二条 &lt;/p&gt;
&lt;p&gt;urxvt 和 xterm 的颜色设置都是通过 .Xresources 或者 .Xdefaults 来进行的 ( 为个简便，以下仅用 .Xresources 进行指代 )。可以通过 &lt;code&gt;*color&lt;/code&gt; 的通位方式来让 xterm 和 urxvt 来使用相同的位置。但是一旦设置了 foreground color，那么在 vim 当中，就没 reverse video 的效果了。光标不会再根据当前 text 的语法高亮情况来变换光标颜色了 .。&lt;/p&gt;
&lt;p&gt; 第三条 &lt;/p&gt;
&lt;p&gt;urxvt 和 xterm 都可以设置两种字体。不同的是二者在 .Xresources 中的资源名是不同的。urxvt 通过 &lt;code&gt;URxvt.font: xft:*，xft:*&lt;/code&gt; 来指定，而 xterm 要分别使用 &lt;code&gt;xterm.faceName&lt;/code&gt; 和 &lt;code&gt;xterm.faceNameDoubleSize&lt;/code&gt; 来指定英文和中文字体。不过要注意的是，像某这样使用 inconsolata-g 有 &lt;code&gt;-&lt;/code&gt; 符号的，&lt;code&gt;fc-list&lt;/code&gt; 会显示实际的名字要使用 "Inconsolata-g"，这个用法在 &lt;code&gt;urxvt -fn&lt;/code&gt; 的选项中是没有问题的。但如果要将这个配置写入到 .Xresources 当中，要将 &lt;code&gt;\&lt;/code&gt; 再 escape 一次，变成 &lt;code&gt;URxvt.font:xft:Inconsolata\\-g&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt; 第四条 &lt;/p&gt;
&lt;p&gt;xterm 不支持。urxvt 要通过 perl 扩展。可以参考 tabbed 和 tabbedex&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;。tabbed 是 urxvt 自带的扩展。不同的是 tabbed 只支持新建 tab 和 tab 之间的切换，而 tabbedex 还额外支持 tab 重命名和 tab 位置的相互调换。tabbedex 可以参考 AUR 中的，但是要注意的是 tabbedex 的实现目前有 bug，要手动注释掉其代码中的 &lt;code&gt;on_user_command&lt;/code&gt; 函数，这个并不影响 tabbedex 的功能，只是一个留给用户进行键位绑定的 hook，可以 &lt;code&gt;man urxvtperl&lt;/code&gt; 确认。其实如果是配合 tmux 使用的话，tab 支持可以不考虑，可以用 tmux 的 window 来模拟 tab。&lt;/p&gt;
&lt;p&gt; 第五条 &lt;/p&gt;
&lt;p&gt;xterm 不能显示 powerline 中的 fancy symbol，即使将字体 patch 过也不行。urxvt 可以正常使用 powerline。但二者在配合 tmux 使用时，在使用 manpage 的时候，less 会的 reverse video 有问题，需要做一个 hack&lt;sup id="fnref-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt;。但是做完这个 hack 之后，会使得二者的可移植性大大降低。甚至在 urxvt 中使用 tmux 后，做 &lt;code&gt;sudo&lt;/code&gt; 的时候都会提示，root 下没有做这个 hack，更别说将这些配置直接拷贝到其它机器上了。需要将这个 hack 一同拷贝。&lt;/p&gt;
&lt;p&gt; 第六条 &lt;/p&gt;
&lt;p&gt; 不可否认 xterm 和 urxvt 都是轻量级的 terminal emulator，对系统资源占用较少。某粗略测算 urxvt 是 terminaotr 的 1/5，xterm 是 terminator 的 1/10。但考虑到目前笔电的硬件配置，系统资源占用少已经不能算是一个 killer feature 了。而且就算考虑到系统资源占用，完全可以换装 xfce4-terminal，它的资源使用和 urxvt 和 xterm 完全是可比的。再者说，也没有人会在高负载的 server 上使用图形介面吧 ? 如果还要使用 VNC 来连接 server 的话，这个做法本身就有问题了。&lt;/p&gt;
&lt;p&gt; 第七条 &lt;/p&gt;
&lt;p&gt;xterm 和 urxvt 都需要进行额外的配置。因为做到这一步，某已经决定就到这里了，所以就没有再继续进行这一项的具体配置了。&lt;/p&gt;
&lt;p&gt; 这上面几条来看，虽然 urxvt 和 xterm 可以在经过配置后达到这些目的，但是对应的移植性和维护性都要有所降低，与 terminaotr 这些 terminal 相比，已经不具有即装即用性了。当然，urxvt 也并非全然没有它的特点。比如，在 urxvt 中通过 perl 扩展，可以开启 url 选择模式，完全通过键盘就可以选择 url 并在 browser 中打开。还可以通过 &lt;code&gt;URxvt.colorUL&lt;/code&gt; 来让有下划线的 text 有不同的样式，这个在 manpage 中还是蛮方便的。&lt;/p&gt;
&lt;p&gt; 上所述，某最后决定还是继续使用 terminator 好了。正如一些同学批评的那样 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 有这个时间还不如多写现行代码 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;&lt;a href="https://aur.archlinux.org/packages/urxvt-fullscreen/"&gt;https://aur.archlinux.org/packages/urxvt-fullscreen/&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;&lt;a href="https://aur.archlinux.org/packages/urxvt-tabbedex-git/"&gt;https://aur.archlinux.org/packages/urxvt-tabbedex-git/&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;&lt;a href="http://tmux.svn.sourceforge.net/viewvc/tmux/trunk/FAQ"&gt;http://tmux.svn.sourceforge.net/viewvc/tmux/trunk/FAQ&lt;/a&gt; search "reverse video"&amp;#160;&lt;a class="footnote-backref" href="#fnref-3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="terminal"></category><category term="xterm"></category><category term="urxvt"></category></entry><entry><title>Archlinux 环境下 pdf 注记工具推荐</title><link href="http://yuex.in/post/2013/03/pdf-annotation.html" rel="alternate"></link><published>2013-03-16T00:00:00+08:00</published><updated>2013-03-16T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2013-03-16:/post/2013/03/pdf-annotation.html</id><summary type="html">&lt;p&gt; 从事学术工作的朋友可能像笔者一样，经常会遇到要帮助别人修改文章，或者自己阅读文献要进行批注的情况。由于并不是人人都使用 Linux 和 Latex，所以一般大家会默认地将写好的文章转换为 pdf 格式，然后再进行修改 &lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;。这样在 Linux 下选择一款得心应手的带有注记功能的 pdf viewer 软件就十分重要了。&lt;/p&gt;
&lt;p&gt; 在 Archlinux 上，有如下几种选择 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Okular          - extra, kde&lt;/li&gt;
&lt;li&gt;evince          - extra, gnome&lt;/li&gt;
&lt;li&gt;masterpdfeditor - aur&lt;/li&gt;
&lt;li&gt;xournal         - extra&lt;/li&gt;
&lt;li&gt;mendeleydesktop - aur&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 不过这些都和 Adobe Acrobat 的用户体验有所差距。有些虽然具有 sticky note 和 highlight 功能，但是 export 之后，在某些 pdf viewer 当中查看存在兼容性问题。几经比较，最后笔者选择了如下的组合 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.tracker-software.com/product/pdf-xchange-viewer"&gt;PDF-XChange Viewer&lt;/a&gt; - needs wine support&lt;/li&gt;
&lt;li&gt;acroread - aur …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt; 从事学术工作的朋友可能像笔者一样，经常会遇到要帮助别人修改文章，或者自己阅读文献要进行批注的情况。由于并不是人人都使用 Linux 和 Latex，所以一般大家会默认地将写好的文章转换为 pdf 格式，然后再进行修改 &lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;。这样在 Linux 下选择一款得心应手的带有注记功能的 pdf viewer 软件就十分重要了。&lt;/p&gt;
&lt;p&gt; 在 Archlinux 上，有如下几种选择 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Okular          - extra, kde&lt;/li&gt;
&lt;li&gt;evince          - extra, gnome&lt;/li&gt;
&lt;li&gt;masterpdfeditor - aur&lt;/li&gt;
&lt;li&gt;xournal         - extra&lt;/li&gt;
&lt;li&gt;mendeleydesktop - aur&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 不过这些都和 Adobe Acrobat 的用户体验有所差距。有些虽然具有 sticky note 和 highlight 功能，但是 export 之后，在某些 pdf viewer 当中查看存在兼容性问题。几经比较，最后笔者选择了如下的组合 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.tracker-software.com/product/pdf-xchange-viewer"&gt;PDF-XChange Viewer&lt;/a&gt; - needs wine support&lt;/li&gt;
&lt;li&gt;acroread - aur, acrobat reader linux version&lt;/li&gt;
&lt;li&gt;mendeleydesktop&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PDF-Xchange Viewer 需要 wine 的支持，但却比较好的提供了与 acrobat pro 相同的体验，并且生成的注记内容的兼容性非常好。&lt;/p&gt;
&lt;p&gt;acroread 是 acrobat reader 的 linux 版本，可以用来验证 linux 下生成的 pdf 文档在 windows 上打开的效果。&lt;/p&gt;
&lt;p&gt;mendeleydesktop 的注记功能在输出的时候虽然存在兼容性的问题，但用来做个人的文献整理还是非常不错的。&lt;/p&gt;
&lt;p&gt; 另外，以下字体也比较建议安装 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ttf-mac-fonts - aur&lt;/li&gt;
&lt;li&gt;ttf-ms-fonts - aur&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 这两个字体基本提供了 mac 和 microsoft 系统常用的字体，可以保证不会出现字体缺少造成相同文档在不同系统上的字体差异 &lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt; 使用 word 的朋友，一定要先在 windows 上用 word 将 doc 文档转换好 pdf 再发给 Linux 的朋友进行修改。Linux 下虽然也可以对 doc 进行转换，但转换效果并不理想。&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="pdf"></category><category term="archlinux"></category></entry><entry><title>在 shell 中区分 option 与 args</title><link href="http://yuex.in/post/2013/03/differ-optons-from-args-in-shell.html" rel="alternate"></link><published>2013-03-02T00:00:00+08:00</published><updated>2013-03-02T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2013-03-02:/post/2013/03/differ-optons-from-args-in-shell.html</id><summary type="html">&lt;p&gt; 使用 &lt;code&gt;--&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt; 如下，&lt;code&gt;-rf&lt;/code&gt; 会解析为 option，而 &lt;code&gt;--help&lt;/code&gt; 会解析为 args&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ rm -rf -- --help
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;&lt;code&gt;man bash&lt;/code&gt; 之后 &lt;code&gt;/--&lt;/code&gt;，可以了解更多信息 &amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><content type="html">&lt;p&gt; 使用 &lt;code&gt;--&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt; 如下，&lt;code&gt;-rf&lt;/code&gt; 会解析为 option，而 &lt;code&gt;--help&lt;/code&gt; 会解析为 args&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ rm -rf -- --help
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;&lt;code&gt;man bash&lt;/code&gt; 之后 &lt;code&gt;/--&lt;/code&gt;，可以了解更多信息 &amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="bash"></category></entry></feed>