<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>yuex (悟道洞穴人) - linux</title><link href="http://yuex.in/" rel="alternate"></link><link href="http://yuex.in/feeds/linux.atom.xml" rel="self"></link><id>http://yuex.in/</id><updated>2017-01-04T00:00:00+08:00</updated><entry><title>Install Gentoo to VirtualBox and Package It to Vagrant</title><link href="http://yuex.in/post/2017/01/gentoo-install-virtualbox-and-vagrant.html" rel="alternate"></link><published>2017-01-04T00:00:00+08:00</published><updated>2017-01-04T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2017-01-04:/post/2017/01/gentoo-install-virtualbox-and-vagrant.html</id><summary type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I have been fiddling with MacBook Pro in the past few days. The Quartz Desktop
is really awesome. MacOS has got some software supports as pretty as Windows.
Graphical applications like Steam and BattleNet are available. But still I
didn't get used to BSD toolchains.&lt;/p&gt;
&lt;p&gt;At first thought, I told myself not to be so close-minded.  So I tried …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I have been fiddling with MacBook Pro in the past few days. The Quartz Desktop
is really awesome. MacOS has got some software supports as pretty as Windows.
Graphical applications like Steam and BattleNet are available. But still I
didn't get used to BSD toolchains.&lt;/p&gt;
&lt;p&gt;At first thought, I told myself not to be so close-minded.  So I tried Gentoo
Prefix, then MacPorts and HomeBrew. Gentoo Prefix was bootstrapped successfully
after manually patched several packages. But the support is not excellent (as
stated on Gentoo Prefix's Gentoo wiki page). Some packages' compilations are
broken on MacOS because the environment is so different to Linux. Let alone some
Linux-specific packages like procps are no way to compile. It seems that there
is also a lack of maintainers for Gentoo Prefix on Mac. After all, it's the
amd64 Linux where Gentoo shines.&lt;/p&gt;
&lt;p&gt;So I turned to MacPorts and HomeBrew.&lt;/p&gt;
&lt;p&gt;HomeBrew is awesome. The development is active. The community is large. But the
problem is it doesn't handle dependencies well. To me, after the revelation to
emerge, this is a huge defect.  But it doesn't mean the HomeBrew finds no place
in my toolbox. Still I am very happy to use HomeBrew Cask to install GUI apps
which has no dependencies. Besides, HomeBrew doesn't provide packages to install
pip or cabal modules yet.&lt;/p&gt;
&lt;p&gt;Like Portage, MacPorts derives from Unix Port too. But its toolkits are somehow
primitive to Portage. You have no way to search files with packages like &lt;code&gt;yum
whatprovides&lt;/code&gt; unless you have installed it. For Portage, this function is
provided by &lt;code&gt;e-file&lt;/code&gt; command of pfl which search in an external indexing
database. And there are also some broken dependencies. For example, VirtualBox
Guestion Additions requires gcc-42 to build. But this package is not provided
for MacOS beyond El Capitan. Also the ghc package has been broken for quite a
while and doesn't show any indication to change (the maintainer explained the
obstacles in the mailing list in Q3 or Q4 of 2016).&lt;/p&gt;
&lt;p&gt;The conclusion is that to my knowledge Gentoo Portage on amd64 is still the best
choice. Let alone there is also &lt;code&gt;layman&lt;/code&gt; by which you can introduce an extra
layer to the Portage tree where you can customize your our own versions of some
packages. This feature is not provided by HomeBrew or MacPorts yet.&lt;/p&gt;
&lt;p&gt;Now the problem is how to get myself a Linux environment on MacOS. First, I
tried Docker. But with no Linux kernel, Docker for Mac also has to use a VM to
map Linux API to OSX. Well, this just give it no pros. The cons comes from
ctrl-p. I have no idea why I have to type ctrl-p twice in the Docker tty to go
last command. The ctrl-n and up arrow are good. Also by using Docker, we have
no way to customize the kernel.&lt;/p&gt;
&lt;p&gt;So finally, I decided to go to virtual machine. One of the cons is that you have
to go through the installation again. Like I said, it's fun but tedious. The
first thought was that I had to use vagrant. The second thought is that if
someone had already prepared some Gentoo images. I checked out the most
downloaded Gentoo image from vagrant box list. But later I found it was using
OpenRC instead of systemd. and disk was not using LVM. That was why I decided to
DIY a vagrant box.&lt;/p&gt;
&lt;p&gt;I also tried chroot. But I can not do it natively on MacOS. Because I want a
pure GNU/Linux environment. I tried to use docker or virtualbox to start a Linux
kernel and then chroot to shared folder to install Gentoo Portage. But the
problem is that both vboxfs and osxfs have some problems. vboxfs doesn't allow
permission change within the guest OS which will cause you a permission deny
hell even if you switched to root. osxfs has some performance issue just like
vboxfs. But the most severe problem is that osxfs will just hang. I have to
reset Docker for Mac to kill it. But this way works on Linux. So I guess it's a
bug related to Moby VM or osxfs.&lt;/p&gt;
&lt;p&gt;Anyway, to get yourself a vagrant box, there are just two steps&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, you install a Gentoo to a VM&lt;/li&gt;
&lt;li&gt;Second, you packge the VM and put it online&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Install Gentoo to VirtualBox&lt;/h1&gt;
&lt;p&gt;The process is very similar to install it to a PC but somehow different to my
previous post. First, we have to prepare the disk using parted. Second, we also
need to configure VirtualBox a little bit to be able to ssh to.&lt;/p&gt;
&lt;p&gt;Still, we use [SystemRescueCD][]. Insert it into the Optical Drive of the VM. By
default, VirtualBox's network uses NAT. To make ssh easier, we change it to
Bridged Adapter to get the VM a dedicated IP address so that we needn't to
configure port forwarding. Configure CPU cores and memory close to host machine
so that the compilation will be quicker. 20 or 30 Gib should be enough for
Gentoo system. We don't taken into user data here because I am sure you want to
mount it as a shared folder. Because the disk image is always configured as
dynamically allocated, I recomment to double it to 60GiB just in case. I use the
vmdk format. It's more popularly supported than vdi. Remember to enable EFI in
the VM setting.&lt;/p&gt;
&lt;p&gt;Now boot the VM, enter &lt;CR&gt; until you see the prompt.&lt;/p&gt;
&lt;p&gt;First, we start sshd&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/ssh/sshd_config
PasswordAuthentication yes
PermitRootLogin yes

/etc/init.d/sshd restart
passwd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Check out the IP address and ssh to the VM.&lt;/p&gt;
&lt;p&gt;Now we prepare the disk using &lt;code&gt;parted&lt;/code&gt;. Still, I don't use a swap here. Because
I think that sleep or hibernate a VM is pretty rare. In case the memory is used
up, you can just allocate more or even over-allocate. But this time we need a
EFI partition to install Grub. Again I use LVM here. Just in case you ran out of
memory, you can still add a second disk image and extend your LVM VG and still
present a single disk to OS. But Luks is not needed anymore. Entrypted a VM? We
should encrypt the host OS.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;parted /dev/sda
mklabel gpt
mkpart efi fat32 # hundreds of MB should be enough
mkpart root ext4 # all remaining
set 1 boot on
set 2 lvm on
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Quit the &lt;code&gt;parted&lt;/code&gt;. Since the EFI partition has to be FAT32, we format it as
needed&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkfs.vfat -F32 /dev/sda1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then the LVM partition&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pvcreate /dev/sda2
vgcreate vg /dev/sda2
lvcreate -l 100%FREE -n root vg
mkfs.ext4 /dev/vg/root
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, mount the filesystems and download stage3 and portage&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mount /dev/vg/root /mnt
cd /mnt
wget http://distfiles.gentoo.org/releases/amd64/autobuilds/current-stage3-amd64-systemd/&amp;lt;latest&amp;gt;
tar xvf stage3*
wget http://distfiles.gentoo.org/releases/snapshots/current/portage-latest.tar.xz
tar xvf portage* -C usr
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, prepare to chroot&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mount -t proc /proc proc/
mount -o bind /sys sys/
mount -o bind /dev dev/
cp -L /etc/resolv.conf etc/
chroot . /bin/bash
env-update
source /etc/profile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After that, you may want to install vim and configure &lt;code&gt;/etc/portage/make.conf&lt;/code&gt;.
The most imoprtant thing is to add &lt;code&gt;MAKEOPTS&lt;/code&gt; and &lt;code&gt;CPU_FLAGS_X86&lt;/code&gt;. The later one
can be automatically generated by &lt;code&gt;cpuid2cpuflags&lt;/code&gt;. But first you need to
installed.&lt;/p&gt;
&lt;p&gt;Before compiling kernel, we modify &lt;code&gt;/etc/fstab&lt;/code&gt; to reflect our disk scheme.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim /etc/fstab
/dev/sda1      /boot/efi    vfat    defaults,noauto,noatime,discard    1 2
/dev/vg/root   /            ext4    defaults,noauto,noatime,discard    0 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, let's compile the kernel. Because we are using a VM, we don't need to worry
about drivers. linux-firmware is not need. Just&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;emerge gentoo-sources genkernel-next
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Edit &lt;code&gt;/etc/genkernel.conf&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;INSTALL=&amp;quot;yes&amp;quot;
OLDCONFIG=&amp;quot;yes&amp;quot;
MENUCONFIG=&amp;quot;yes&amp;quot;
NCONFIG=&amp;quot;no&amp;quot;
CLEAN=&amp;quot;yes&amp;quot;
MRPROPER=&amp;quot;no&amp;quot;
MOUNTBOOT=&amp;quot;no&amp;quot;
SAVE_CONFIG=&amp;quot;yes&amp;quot;
USECOLOR=&amp;quot;yes&amp;quot;
MAKEOPTS=&amp;quot;-j5&amp;quot;
LVM=&amp;quot;yes&amp;quot;
UDEV=&amp;quot;yes&amp;quot;
BOOTLOADER=&amp;quot;grub&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, we use kernel's default configurations. Thus exit the menuconfig&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;genkernel all
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After a while, the kernel will be compiled and installed. Let's turn to
bootloader. First, mount the EFI partition&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p /boot/efi
mount /dev/sda1 boot/efi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then install grub&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo &amp;quot;sys-boot/grub device-mapper&amp;quot; &amp;gt;&amp;gt; /etc/portage/package.use/grub
emerge grub
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, install it. But before that, configure and restart LVM&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim /etc/lvm/lvm.conf
use_lvmetad = 0
/etc/init.d/lvm restart
grub-install --efi-directory=/boot/efi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you forget to enable EFI for the VM, &lt;code&gt;grub-install&lt;/code&gt; will tell not able to
embed to BIOS. Just reboot after enable it.&lt;/p&gt;
&lt;p&gt;Finally, configure grub and generate the cfg file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim /etc/default/grub
GRUB_CMDLINE_LINUX=&amp;quot;init=/usr/lib/systemd/systemd root=/dev/vg/root dolvm rootfstype=ext4&amp;quot;
grub-mkconfig -o /boot/grub/grub.cfg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can now verify EFI boot configuration by&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;efibootmgr -v

efibootmgr -o # change order
efibootmgr --create --label Gentoo --loader &amp;quot;\EFI\gentoo\grubx64.efi&amp;quot; # add new entry
efibootmgr -Bb &amp;lt;hex&amp;gt; # remove entry
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Before reboot, remember to check profile and update world&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;eselect profile set default/linux/amd64/13.0/systemd
emerge --ask --update --deep --newuse @world
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There shouldn't be too much to update if you are using the latest stage3 and
portage.&lt;/p&gt;
&lt;p&gt;Also remember to install NetworkManager and passwd root so that you can login&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;emerge networkmanager
passwd
reboot
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If it goes well, you should be prompt to login. But it seems VirtualBox will
lost the EFI boot configuration when devices change like remove install image
from optical drive. In that case, you will be prompted a EFI shell. Then&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Shell&amp;gt;fs0:
FS0:\&amp;gt;edit startup.nsh

FS0:\EFI\gentoo\grubx64.efi
&amp;lt;ctrl-s&amp;gt;&amp;lt;CR&amp;gt;&amp;lt;CR&amp;gt; to save
&amp;lt;ctrl-q&amp;gt;&amp;lt;CR&amp;gt; to quit
&amp;lt;reboot&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And afterwards, when the EFI have no way to boot you can just type &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;
several times to activate this default script to boot grub.&lt;/p&gt;
&lt;p&gt;You can also quickly type &lt;code&gt;&amp;lt;F12&amp;gt;&lt;/code&gt; when you see the splash after booting the VM
to enter VirtualBox's EFI Manager Program to change the order.&lt;/p&gt;
&lt;h1&gt;Package It as A Vagrant Box&lt;/h1&gt;
&lt;p&gt;Before packaging it as a vagrant box, we have to finish some configurations.&lt;/p&gt;
&lt;p&gt;First, we finalize systemd's configuration&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemd-machine-id-setup
systemctl enable NetworkManager
systemctl start NetworkManager
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also setup hostname or timezone here. After that, go check the
requirements of a vagrant box, if you like&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.vagrantup.com/docs/boxes/base.html"&gt;https://www.vagrantup.com/docs/boxes/base.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.vagrantup.com/docs/virtualbox/boxes.html"&gt;https://www.vagrantup.com/docs/virtualbox/boxes.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The things are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set up a normal user named vagrant&lt;/li&gt;
&lt;li&gt;add an insecure pubkey for vagrant&lt;/li&gt;
&lt;li&gt;add it to sudo&lt;/li&gt;
&lt;li&gt;passwd root&lt;/li&gt;
&lt;li&gt;setup and enable sshd&lt;/li&gt;
&lt;li&gt;install VirtualBox Guest Additions and enable it as startup services&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'll go through this list one by one. Create user vagrant is easy&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;useradd -m vagrant
su vagrant
passwd
&amp;lt;vagrant&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, we add an insecure pubkey to enable private key ssh. This key will be
replaced with a randomly generated one upon the first time login of vagrant
automatically.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd ~/.ssh
wget https://raw.githubusercontent.com/mitchellh/vagrant/master/keys/vagrant.pub
mv vagrant.pub authorized_keys
chmod 600 authorized_keys
chmod 700 ~/.ssh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we add vagrant to sudoer. But first you may need to install sudo&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;emerge sys-admin/sudo
vim /etc/sudoers
vagrant ALL=(ALL) NOPASSWD:ALL
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next passwd root&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;passwd
&amp;lt;vagrant&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then enable sshd&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemctl enable sshd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And finally, we need to install VirtualBox Guest Additions. You may need to
download it with the same version of the VirtualBox from their
mirror
&lt;a href="http://download.virtualbox.org/virtualbox/"&gt;http://download.virtualbox.org/virtualbox/&lt;/a&gt;.
Insert into the optical drive of the VM and reboot. After that, you need to
mount it&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lsblk # to check out the right device to mount
mount /dev/sr0 /mnt
sh /mnt/VBoxLinuxAdditions.run
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It will install some service scripts to &lt;code&gt;/etc/init.d/&lt;/code&gt;. But since we are using
systemd here, we have to write some unit files and enable them. [Riann's Post][]
has already provided some examples. You can take them from there. Just remember
to enable them&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemctl enable vboxadd
systemctl enable vboxadd-service
systemctl enable vboxadd-x11
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Before packaging, we can do two things to reduce the image size. First, we can
remove the gentoo-sources. Second, we can remove the portage tree. These can
save nearly 2GiB.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;emerge -ac gentoo-sources
emerge --depclean
rm -rf /usr/portage
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now poweroff the VM and change the network back to NAT and run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vagrant package --base &amp;lt;name-of-the-VM-as-showed-in-VirtualBox&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will generate a &lt;code&gt;package.box&lt;/code&gt; file. Before uploading it to vagrant's boxes
list, we can test it locally&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vagrant box add gentoo /path/to/the/package.box
vagrant init gentoo
vagrant up
vagrant ssh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Acutally, your can skip the steps to add unit files for vboxadd. But then you
need to install a vagrant plugin&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vagrant plugin install vagrant-vbguest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This automatically detect if the vboxadd is installed. If it is installed but
not enabled, it will automatically start it.&lt;/p&gt;
&lt;p&gt;Now, you can register an accound on Vagrant's website and upload the box. Next
time, you add your box from the box list before start a VM&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vagrant box add yuex/gentoo
vagrant up
vagrant ssh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On MacOS, you can also install vagrant-manager. It will add an system tray to
the menubar to help to monitor and manage your vagrant VMs.&lt;/p&gt;</content><category term="gentoo"></category></entry><entry><title>Gentoo Installation on MacBook Pro (Mid 2015) - Base System</title><link href="http://yuex.in/post/2016/12/gentoo-install-mbp-1.html" rel="alternate"></link><published>2016-12-26T00:00:00+08:00</published><updated>2016-12-26T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2016-12-26:/post/2016/12/gentoo-install-mbp-1.html</id><summary type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I got a MacBook Pro recently, the mid 2015 15" version. I have to admit that
MacOs and Homebrew are cool. But still I want Gentoo Portage back. Actually I
doubt if anyone can still date with other package system after you have seen
the true beauty of Gentoo Portage. So I tried Gentoo Prefix. But unfortunately,
at this …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I got a MacBook Pro recently, the mid 2015 15" version. I have to admit that
MacOs and Homebrew are cool. But still I want Gentoo Portage back. Actually I
doubt if anyone can still date with other package system after you have seen
the true beauty of Gentoo Portage. So I tried Gentoo Prefix. But unfortunately,
at this point, due to the new release of MacOS Sierra and LLVM, bintutils-apple
failed to compile with clang-3.9. I tried to use the system clang (Apple 8.0.0)
and clang-3.8.  binutils-apple could compile. But later on glib failed to
compile. It looks like glib used some new features supported in clang-3.9. That
was where I gave up.  Maybe I will try it again later.&lt;/p&gt;
&lt;p&gt;Anyway, here I am, going to install Gentoo natively on this MacBook Pro mid
2015 15" laptop. Its product number is MJLT2LL/A if you want details. Believe
me, we're gonna have a lot of details here. I think there are not too many
differences between installation on Mac or on PC. The biggest one comes from
the kernel configuration since hardware always varies from laptop to laptop,
even under same brand same product number. So generally, the installation guide
below also applies to PC except the kernel options configuration part.&lt;/p&gt;
&lt;p&gt;Installation of Gentoo is not easy. You may have successfully installed
ArchLinux once or two. Gentoo installation is a little bit harder than that.
But not too much, just that you need to configure the kernel yourself using
some Gentoo-specific tools. But if your only Linux installation exprience comes
from Ubuntu, Fedora, or CentOS with a nice graphics installation interface,
then you're gonna have troubles. You can still try.  But my advice is to find
yourself two or three days and follow &lt;a href="https://wiki.gentoo.org/wiki/Sakaki%27s_EFI_Install_Guide"&gt;Sakaki's Guide&lt;/a&gt;. Because there
are gonna be a lot new concepts.&lt;/p&gt;
&lt;h1&gt;Acknoledgements&lt;/h1&gt;
&lt;p&gt;Thanks to Artem and, parts of this guide are adapted from their installation
guide. In case you have troubles in following this guide, you may want to check
out theirs. BTW, they use 2013 models.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.artembutusov.com/gentoo-on-macbook-pro-retina-part-1-base-system/"&gt;Artem's Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vitobotta.com/encrypted-gentoo-macbook-pro/"&gt;Vito's Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And of course, I want to thank Sakaki. My first Gentoo installation is
following &lt;a href="https://wiki.gentoo.org/wiki/Sakaki%27s_EFI_Install_Guide"&gt;his guide&lt;/a&gt;. But the problem is that he uses his own
tools like buildkernel and showem which are provided by adding a portage
overlay. I think that's too much for a Gentoo newbie and obscure the original
installation process and the relationships among Gentoo Portage, Kernel, Xorg,
and Gnome or KDE. So here I will stick with genkernel.&lt;/p&gt;
&lt;h1&gt;Expectation&lt;/h1&gt;
&lt;p&gt;In this guide, I will introduce step by step how to install a dual-boot Gentoo
on MacBook Pro 15" (mid 2015). The filesystem will be encrypted by using luks
and lvm. We use systemd and grub2 here. After the installation, you should be
able to boot into Gentoo to see a console command line or into MacOs to see
GUI. In following posts, I will introduce how to install KDE from there. Once
you have a bootable Gentoo, it's pretty easy to install KDE or Gnome.&lt;/p&gt;
&lt;p&gt;Besides, following guide assuems that you have a wireless network (you don't
have Ethernet port on Mac, right?). Though not necessary, another laptop with
SSH client at your hands will be much pretty handier.&lt;/p&gt;
&lt;h1&gt;Prepare Boot Media and Disk&lt;/h1&gt;
&lt;p&gt;Unlike PC, Mac is an UEFI-only system. We cannot just &lt;code&gt;dd&lt;/code&gt; an ISO image to an
USB stick and boot. We have to make an UEFI-bootable USB stick. It's just a
little bit more than &lt;code&gt;dd&lt;/code&gt;. You need to install and configure a bootloader like
grub or syslinux on that USB sticks.  That's a little bit tedious. So here I
will use some tool.&lt;/p&gt;
&lt;p&gt;Here, you may be interested of the difference between BIOS and UEFI, and
perhaps Linus's comments on UEFI&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface"&gt;Wikipedia UEFI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/BIOS"&gt;Wikipedia BIOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://yarchive.net/comp/linux/efi.html"&gt;Linus on UEFI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In &lt;a href="https://wiki.gentoo.org/wiki/UEFI_Gentoo_Quick_Install_Guide"&gt;UEFI Gentoo Quick Install Gudie&lt;/a&gt;, it is recommended to use
&lt;a href="http://www.system-rescue-cd.org/SystemRescueCd_Homepage"&gt;SystemRescureCD&lt;/a&gt;. It's a Gentoo-based rescue system. You need to download it
from their website.&lt;/p&gt;
&lt;p&gt;To make the USB stick, we will use [UNetbootin][] here. It supports all three
platform. After download, the burning is easy. Just remeber, before burning,
you have to format the USB stick as a FAT filesystem. If you are using Linux,
you need to mount it then.&lt;/p&gt;
&lt;p&gt;Suppose your USB stick is &lt;code&gt;/dev/sdb1&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkfs.fat /dev/sdb1
mount /dev/sdb1 /media
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, use unetbootin to make the USB stick.&lt;/p&gt;
&lt;p&gt;Then, if you want dual boot to MacOS, you need to resize the disk to save some
space for Gentoo. It can be done by using Disk Utility. The filesystem format
doesn't matter. We will re-format it later. The label doesn't matter right too
because we can set it later. But I recommend you set it now, just name it as
Gentoo HD or some thing else you like. Usually, fresh Gentoo needs 20GiB.  But
if you are planning to use it afterwards, I recommend no less than 100GiB.&lt;/p&gt;
&lt;h1&gt;Boot from USB Stick&lt;/h1&gt;
&lt;p&gt;Plug in your USB stick and reboot. Hold Alt (or Option) key after you hear the
boot sound. Then choose to boot from USB stick. Press Enter until you see the
welcome message to command line and the prompt is ready.&lt;/p&gt;
&lt;h1&gt;Setup Remote Access&lt;/h1&gt;
&lt;p&gt;You can install by using the console command line. But probably you have found
that the fonts are too small. Even if they were large enough, typing commands
there is still painful. So here we are gonna set up remote access so that you
can login remotely by using SSH.&lt;/p&gt;
&lt;p&gt;First, we need to connect to the WIFI&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nmcli dev wifi connect &amp;quot;ap-name&amp;quot; password &amp;quot;pass&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you are using Ethernet or you want GUI, you can try&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;net-setup
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But personally, I prefer &lt;code&gt;nmcli&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, modify&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# /etc/ssh/sshd_config
PasswordAuthentication yes
PermitRootLogin yes
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, since the resuce system is using OpenRC, you need to restart sshd by&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/init.d/sshd restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And last, don't forget to setup the password for root by&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;passwd
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Create the Disk&lt;/h1&gt;
&lt;p&gt;To create some encrypted disk, we need to load the encryption modules first&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;modprobe dm-crypt
modprobe aes
# error means no hardware cryptographic device
# run modprobe aes_generic
modprobe sha256
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, check out your partition for Gentoo&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;blkid
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure which one you want to format. You should be able to identify the
label when you resize the disk for Gentoo. In my case it is &lt;code&gt;/dev/sda4&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cryptsetup luksFormat /dev/sda4 # enter your passphrase
cryptsetup luksOpen /dev/sda4 gentoo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, we formated the disk and opened it as &lt;code&gt;/dev/mapper/gentoo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then, create lvm which enable you to adjust your disk's size without
reformating. This is the thing that Windows still doesn't support.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pvcreate /dev/mapper/gentoo
vgcreate vg /dev/mapper/gentoo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, we created a virtual group named as &lt;code&gt;vg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Finally, we create a partion for root and format it as Ext4&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lvcreate -l 100%FREE -n root vg
mkfs.ext4 /dev/vg/root
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since we are using SSD with 8 or 16 GiB memory, I think swap is not necessary.
People may argue that we need swap to support hibernation. But usually for
laptop with a buit-in battery, what we need is sleep instead of hibernation.&lt;/p&gt;
&lt;p&gt;Please checkout&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Hibernation_(computing)#Comparison_to_sleep_mode"&gt;Wikipedia Hibernation Comparison to Sleep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Logical_Volume_Manager_(Linux)"&gt;Wikipedia LVM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Prepare Portage&lt;/h1&gt;
&lt;p&gt;Gentoo's package system is Portage.  You can simply think Portage as a
collections of recipes defining how to accquire, compile, and install some
source code.  It use tools like &lt;code&gt;emerge&lt;/code&gt; to install packages. Like Debian,
&lt;code&gt;emerge&lt;/code&gt; uses other tools to search. To compiler kernel, we need to setup
Portage first.&lt;/p&gt;
&lt;p&gt;Synchronize time is not necessary, but it doesn't hurt&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ntpdate -s time.nist.gov
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mount the file system we created&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mount /dev/vg/root /mnt/gentoo
cd /mnt/gentoo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Get the Gentoo stage3 snapshot, you should check &lt;a href="http://distfiles.gentoo.org/releases/amd64/autobuilds/current-stage3-amd64-systemd/"&gt;Gentoo Mirror&lt;/a&gt;
to get the latest snapshot for systemd.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://distfiles.gentoo.org/releases/amd64/autobuilds/current-stage3-amd64-systemd/stage3-amd64-systemd-20161218.tar.bz2
tar xvf stage3*
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For what is stage3, please checkout &lt;a href="https://wiki.gentoo.org/wiki/Stage_tarball"&gt;Gentoo Stage&lt;/a&gt;. Actually, if you try
Gentoo Prefix, all stages will be went through. But here, stage3 is enough.&lt;/p&gt;
&lt;p&gt;Get the latest Portage&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://distfiles.gentoo.org/releases/snapshots/current/portage-latest.tar.xz
tar xvf portage* -C /mnt/gentoo/usr
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But still Portage needs some configuration. First we change root to our future
file system. But before that, we need to mount it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mount -t proc none /mnt/gentoo/proc
mount -o bind /dev /mnt/gentoo/dev
mount -o bind /sys /mnt/gentoo/sys
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, copy the name resolution file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cp -L /etc/resolve.conf /mnt/gentoo/etc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then change root, and up&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chroot /mnt/gentoo /bin/bash
env-update &amp;amp;&amp;amp; source /etc/profile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, we need to edit &lt;code&gt;/etc/portage/make.conf&lt;/code&gt;. But first, you may want to
install vim&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;emerge vim
vim /etc/portage/make.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For now, the most important thing is to add some compile options.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/portage/make.conf
# Doc https://wiki.gentoo.org/wiki//etc/portage/make.conf

CFLAGS=&amp;quot;-O2 -pipe -march=native&amp;quot;
CXXFLAGS=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;CFLAGS&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
CHOST=&amp;quot;x86_64-pc-linux-gnu&amp;quot;

# cores + 1
MAKEOPTS=&amp;quot;-j5&amp;quot;
EMERGE_DEFAULT_OPTS=&amp;quot;--jobs 4&amp;quot;

ACCEPT_LICENSE=&amp;quot;*&amp;quot;
ACCEPT_KEYWORDS=&amp;quot;amd64&amp;quot;

VIDEO_CARDS=&amp;quot;radeon radeonsi intel&amp;quot;
INPUT_DEVICES=&amp;quot;evdev synaptics mtrack mouse&amp;quot;

PORTDIR=&amp;quot;/usr/portage&amp;quot;
DISTDIR=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PORTDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/distfiles&amp;quot;
PKGDIR=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PORTDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/packages&amp;quot;

FEATURES=&amp;quot;binpkg-logs clean-logs split-log&amp;quot;

USE=&amp;quot;unicode nls bluetooth alsa infinality cjk&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another thing is to define &lt;code&gt;CPU_FLAGS_X86&lt;/code&gt; so that &lt;code&gt;emerge&lt;/code&gt; can use these
CPU-specific flags to optimize the generated code. There is a tool to generate
these flags for you&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;emerge cpuid2cpuflags -1
cpuinfo2cpuflags-x86 &amp;gt;&amp;gt; /etc/portage/make.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Kernel&lt;/h1&gt;
&lt;p&gt;Before configuring kernel, we modify the &lt;code&gt;/etc/fstab&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim /etc/fstab
/dev/sda1               /boot/efi       vfat            defaults,noauto,noatime,discard 1 2
/dev/vg/root            /               ext4            defaults,noatime,discard        0 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, &lt;code&gt;/dev/sda1&lt;/code&gt; is Mac's original EFI partition.&lt;/p&gt;
&lt;p&gt;Then, we install kernel sources and build tool &lt;code&gt;genkernel-next&lt;/code&gt;. Since we want
to use an encrypted disk, &lt;code&gt;genkernel-next&lt;/code&gt; needs to pull in some support.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p /etc/portage/package.use
touch -p /etc/portage/package.use/zzz_via_automask
echo &amp;quot;sys-kernel/genkernel-next cryptsetup&amp;quot; &amp;gt; /etc/portage/package.use/genkernel-next
emerge gentoo-sources
emerge genkernel-next
emerge linux-firmwares
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;genkernel-next&lt;/code&gt; also needs some configuration&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;INSTALL=&amp;quot;yes&amp;quot;
OLDCONFIG=&amp;quot;yes&amp;quot;
MENUCONFIG=&amp;quot;yes&amp;quot;
NCONFIG=&amp;quot;no&amp;quot;
CLEAN=&amp;quot;yes&amp;quot;
MRPROPER=&amp;quot;no&amp;quot;
MOUNTBOOT=&amp;quot;no&amp;quot;
SAVE_CONFIG=&amp;quot;yes&amp;quot;
USECOLOR=&amp;quot;yes&amp;quot;
MAKEOPTS=&amp;quot;-j5&amp;quot;
LVM=&amp;quot;yes&amp;quot;
LUKS=&amp;quot;yes&amp;quot;
GPG=&amp;quot;no&amp;quot;
DMRAID=&amp;quot;no&amp;quot;
BUSYBOX=&amp;quot;yes&amp;quot;
UDEV=&amp;quot;yes&amp;quot;
MDADM=&amp;quot;no&amp;quot;
ISCSI=&amp;quot;no&amp;quot;
E2FSPROGS=&amp;quot;no&amp;quot;
FIRMWARE=&amp;quot;yes&amp;quot;
FIRMWARE_DIR=&amp;quot;/lib/firmware&amp;quot;
BOOTLOADER=&amp;quot;grub&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, we configure the kernel. Though this is interesting, it is also very
tedious. For example, you need to configure kernel options for&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Systemd https://wiki.gentoo.org/wiki/Systemd#Kernel&lt;/li&gt;
&lt;li&gt;Thunderbolt&lt;/li&gt;
&lt;li&gt;Thunderbolt Ethernet&lt;/li&gt;
&lt;li&gt;SD Card&lt;/li&gt;
&lt;li&gt;Others Misc https://wiki.gentoo.org/wiki/Apple_Macbook_Pro_Retina_(early_2013)&lt;/li&gt;
&lt;li&gt;Wireless https://wiki.gentoo.org/wiki/Wifi&lt;/li&gt;
&lt;li&gt;Bluetooth https://wiki.gentoo.org/wiki/Bluetooth&lt;/li&gt;
&lt;li&gt;Radeon https://wiki.gentoo.org/wiki/Radeon&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I won't go into details here. If you like, you can use
&lt;a href="https://github.com/yuex/gentoo/blob/master/kernel-config-x86_64-4.4.26-gentoo"&gt;my configuration&lt;/a&gt;
. It's for 4.4.26. Save it under &lt;code&gt;/etc/kernels/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, compile and install the kernel&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;genkernel all
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It takes some time. You should be able to hear the roar of your fans.&lt;/p&gt;
&lt;h1&gt;Bootloader&lt;/h1&gt;
&lt;p&gt;First, mount Mac's EFI partition&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p /boot/efi
mount /dev/sda1 /boot/efi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, we need to install Grub. Since we are using lvm and luks, we need Grub to
support device mapper.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo &amp;quot;sys-boot/grub device-mapper&amp;quot; &amp;gt;&amp;gt; /etc/portage/package.use/grub 
emerge grub
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lvm should be pulled in by grub. We need some configurations&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim /etc/lvm/lvm.conf
use_lvmetad = 0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then restart&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/init.d/lvm restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, we configure Grub&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim /etc/default/grub
GRUB_CMDLINE_LINUX=&amp;quot;init=/usr/lib/systemd/systemd crypt_root=/dev/sda4 root=/dev/mapper/vg-root dolvm rootfstype=ext4&amp;quot;
GRUB_ENABLE_CRYPTODISK=y
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add an entry to boot MacOS from Grub&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim /etc/grub.d/40_custom
menuentry &amp;quot;Mac OS X&amp;quot; {
    insmod hfsplus
    set root=&amp;#39;(hd1,gpt3)&amp;#39;
    chainloader ($root)/System/Library/CoreServices/boot.efi
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can use &lt;code&gt;efibootmgr&lt;/code&gt; to check out EFI entries&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# check
efibootmgr -v

# add an entry
efibootmgr --create --label Gentoo --loader &amp;quot;\EFI\gentoo\grubx64.efi&amp;quot;

# remove an entry
efibootmgr -B -b &amp;lt;hex&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Install Grub&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grub-install --efi-directory=/boot/efi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Generate Grub configuration&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grub-mkconfig -o /boot/grub/grub.cfg
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Ready to Boot&lt;/h1&gt;
&lt;p&gt;Now, we are just one step away from boot into Gentoo. Before that, we need to
configure some profiles for Gentoo&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;eselect profile set default/linux/amd64/13.0/systemd
emerge --ask --update --deep --newuse @world
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then install NetworkManager to manage network after we boot into Gentoo&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;emerge networkmanager
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Setup a password for root so that you can login&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;passwd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, try to reboot&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;reboot
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Systemd Configuration&lt;/h1&gt;
&lt;p&gt;If everything goes fine, you should be able to boot into a command line console
after entering the passphrase for decrypting disk and password for logining.&lt;/p&gt;
&lt;p&gt;Now, we need to configure Systemd to finalize our installation&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemd-machine-id-setup
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Auto start Network Manager&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemctl enable NetworkManager
systemctl start NetworkManager
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Connect to network&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nmcli dev wifi connect &amp;quot;ap-name&amp;quot; password &amp;quot;pass&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Setup hostname&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;hostnamectl set-hostname macbookpro
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Setup locales&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/locale.conf
en_US.UTF-8 UTF-8
locale-gen
localectl set-locale LANG=en_US.UTF-8
localectl set-keymap us
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Setup timezone&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;timedatectl set-timezone US/Eastern
timedatectl set-ntp 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you like, you can also add a normal user now.&lt;/p&gt;</content><category term="gentoo"></category></entry><entry><title>彩色终端</title><link href="http://yuex.in/post/2016/11/colorful-terminal.html" rel="alternate"></link><published>2016-11-11T00:00:00+08:00</published><updated>2016-11-11T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2016-11-11:/post/2016/11/colorful-terminal.html</id><summary type="html">&lt;p&gt; 说真的，当发现 Emacs 还不支持全彩色时，我还是有点吃惊的。毕竟很多程序都已经开始支
持了，比如 vim，neovim，konsole 等等。连 tmux 都从今年三月的 2.2 版本开始支持全彩色了。
没有全彩色支持对于 terminal 下工作的人来说，真的很不爽，像是 solarized 常用的主题颜
色在非全彩色情况下的退化表现一般都不是很理想。不过好在 emacs 上有全彩色的 patch，可
以实现这个小目标。&lt;/p&gt;
&lt;p&gt; 以 24.5 版本为例 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl https://goo.gl/a9qsIY &amp;gt; emacs-24.5-24bit.diff
wget http://gnu.mirrors.pair.com/gnu/emacs/emacs-24.5.tar.gz
tar xzf emacs-24.5 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt; 说真的，当发现 Emacs 还不支持全彩色时，我还是有点吃惊的。毕竟很多程序都已经开始支
持了，比如 vim，neovim，konsole 等等。连 tmux 都从今年三月的 2.2 版本开始支持全彩色了。
没有全彩色支持对于 terminal 下工作的人来说，真的很不爽，像是 solarized 常用的主题颜
色在非全彩色情况下的退化表现一般都不是很理想。不过好在 emacs 上有全彩色的 patch，可
以实现这个小目标。&lt;/p&gt;
&lt;p&gt; 以 24.5 版本为例 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl https://goo.gl/a9qsIY &amp;gt; emacs-24.5-24bit.diff
wget http://gnu.mirrors.pair.com/gnu/emacs/emacs-24.5.tar.gz
tar xzf emacs-24.5.tar.gz
cd emacs-24.5.tar.gz
patch -p0 &amp;lt; ../emacs-24.5-24bit.diff
./configure
make
sudo make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 最终的程序会被安装到 &lt;code&gt;/usr/local/bin/&lt;/code&gt; 下。另外需要注意的是，在 melpa 中，
&lt;code&gt;solarized-theme&lt;/code&gt; 是全彩色的，效果会好一些。&lt;/p&gt;
&lt;p&gt; 此外，该 patch 中通过检测两个环境变量来判断所用终端是否支持全彩色，所以不要忘记设
置。我尝试过 iTerm，但貌似在设置 &lt;code&gt;ITERM_24BIT&lt;/code&gt; 时，其支持效果并不好。反而设置
&lt;code&gt;KONSOLE_DBUS_SESSION&lt;/code&gt; 就没有问题。因此我自己是不管用什么终端都统一设置
&lt;code&gt;KONSOLE_DBUS_SESSION&lt;/code&gt;。但如果你真的是用 Konsole，这个变量其实已经设置好了。&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/XVilka/8346728"&gt; 常见工具的全彩色支持情况 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/choppsv1/e8198df70cb1778b04d6"&gt;emacs-24.5 tc patch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sunaku.github.io/tmux-24bit-color.html"&gt;tmux 24bit color&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="emacs"></category><category term="tmux"></category></entry><entry><title>Awesome LaTeX</title><link href="http://yuex.in/post/2016/09/awesome-latex.html" rel="alternate"></link><published>2016-09-12T00:00:00+08:00</published><updated>2016-09-12T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2016-09-12:/post/2016/09/awesome-latex.html</id><summary type="html">&lt;p&gt;(Note, files metioned below are included in &lt;a href="https://github.com/yuex/awesome-latex"&gt;this&lt;/a&gt; github repo)&lt;/p&gt;
&lt;p&gt;Well, it's complicated, sort of.&lt;/p&gt;
&lt;p&gt;To appreciate the awesomeness of LaTeX, you need to put aside a few hours to
fiddle with not only another gigantic tool and a not-so-easy-to-learn syntax
but also another no-so-well-managed software distribution system.&lt;/p&gt;
&lt;p&gt;To save your time, you can just install &lt;code&gt;texlive&lt;/code&gt; and use &lt;code&gt;homework …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;(Note, files metioned below are included in &lt;a href="https://github.com/yuex/awesome-latex"&gt;this&lt;/a&gt; github repo)&lt;/p&gt;
&lt;p&gt;Well, it's complicated, sort of.&lt;/p&gt;
&lt;p&gt;To appreciate the awesomeness of LaTeX, you need to put aside a few hours to
fiddle with not only another gigantic tool and a not-so-easy-to-learn syntax
but also another no-so-well-managed software distribution system.&lt;/p&gt;
&lt;p&gt;To save your time, you can just install &lt;code&gt;texlive&lt;/code&gt; and use &lt;code&gt;homework.tex&lt;/code&gt;. It's a
popular homework template at CMU introduced by the help page of &lt;a href="http://www.cs.cmu.edu/afs/cs/academic/class/15251/Site/current/Help/late"&gt;15251&lt;/a&gt;. When
you are done with your homework using the template, just run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pdflatex homework.tex
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;homework.tex&lt;/code&gt; should be happy with the default packages included in texlive.
If everything goes well, a pdf file will be generated.&lt;/p&gt;
&lt;p&gt;Alright, if you have some time or you find a cooler template on the Internet
which requires additional LaTeX packages, then be prepared to get some
frustrations. Here's the steps to make it work, probably.&lt;/p&gt;
&lt;p&gt;First, install texlive using the package manager you hate or love or whatever
provided by your distribution or 3rd party or some guys you have no idea of but
you have to use.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# gentoo example
# set aside half an hour at least, it will take some time to compile
# if you want cjk support, turn the flag on manually (disabled by default)
emerge -av textlive
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Second, try to compile the tex file and find out which package is missing&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pdflatex template.tex
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Third, fortunately &lt;code&gt;tlmgr&lt;/code&gt; provided by texlive is not working on gentoo so you
get the chance to do it in the traditional way, i.e., manually. Checkout the
&lt;a href="https://en.wikibooks.org/wiki/LaTeX/Installing_Extra_Packages"&gt;wikibook&lt;/a&gt;. In general you need to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. find and download the package source from CTAN https://www.ctan.org/
2. unzip and compile the source. some authors provide a Makefile to easy
   this process. in that case you should thank his/her kindness

       latex packname.idx
       latex packname.dtx
       latex packname.ins

3. move generated files to their destinations according the table and their
   suffixes as described in the wikibook. generally, using a local texmf
   directory in your home directory is a good idea. create subdirectories
   as needed
4. use `texhash` to update the package database

       texhash ~/texmf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the fun part is that if the package you are installing depends on other
CTAN packages, you have to resolve the dependencies yourself manually. So
please keep calm, carry on, and try hard to have some fun. Or what else you can
do?&lt;/p&gt;
&lt;p&gt;Awesome, right? If you don't feel so, then try harder.&lt;/p&gt;
&lt;p&gt;BTW, if you want to give it a shot, try compile &lt;code&gt;assignment.tex&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;EDIT: I found actually many frequently used latex packages are packaged up by
texlive as a texlive-latexextra in portage or texlive-latex-extra in
macports. You can just install them to save a lot of time.&lt;/p&gt;
&lt;p&gt;-EOF-&lt;/p&gt;</content><category term="latex"></category></entry><entry><title>Vim 技巧之 Meta 键</title><link href="http://yuex.in/post/2015/02/vim-technique-meta-key.html" rel="alternate"></link><published>2015-02-08T00:00:00+08:00</published><updated>2015-02-08T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2015-02-08:/post/2015/02/vim-technique-meta-key.html</id><summary type="html">&lt;p&gt; 在 terminal 环境下使用 Vim 时，Meta 键（亦即 Alt）一般是不起作用的 &lt;sup id="fnref-!map-alt-keys"&gt;&lt;a class="footnote-ref" href="#fn-!map-alt-keys"&gt;1&lt;/a&gt;&lt;/sup&gt;。但是随着插件越用越多，绑定的组合键越来越多，按键难免会出现越来越不够用的情况。若是可以使用 Meta 键进行键位组合，至少会增加 26 个组合键。这里给出一个通过配置 Vim 来启用 Meta 组合键的方法。&lt;/p&gt;
&lt;p&gt; 还是直接上代码。这里启用了从 &lt;code&gt;&amp;lt;M-a&amp;gt;&lt;/code&gt; 到 &lt;code&gt;&amp;lt;M-z&amp;gt;&lt;/code&gt; 的 26 组合键和从 &lt;code&gt;&amp;lt;M-0&amp;gt;&lt;/code&gt; 到 &lt;code&gt;&amp;lt;M-9&amp;gt;&lt;/code&gt; 的 10 个组合键。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; range&lt;span class="p"&gt;(&lt;/span&gt;char2nr&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; char2nr&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; nr2char&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    exec &lt;span class="s2"&gt;&amp;quot;set &amp;lt;M-&amp;quot;&lt;/span&gt;.&lt;span class="k"&gt;i&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;&amp;gt;=\&amp;lt;Esc&amp;gt;&amp;quot;&lt;/span&gt;.&lt;span class="k"&gt;i&lt;/span&gt;
    exec &lt;span class="s2"&gt;&amp;quot;inoremap \&amp;lt;Esc …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt; 在 terminal 环境下使用 Vim 时，Meta 键（亦即 Alt）一般是不起作用的 &lt;sup id="fnref-!map-alt-keys"&gt;&lt;a class="footnote-ref" href="#fn-!map-alt-keys"&gt;1&lt;/a&gt;&lt;/sup&gt;。但是随着插件越用越多，绑定的组合键越来越多，按键难免会出现越来越不够用的情况。若是可以使用 Meta 键进行键位组合，至少会增加 26 个组合键。这里给出一个通过配置 Vim 来启用 Meta 组合键的方法。&lt;/p&gt;
&lt;p&gt; 还是直接上代码。这里启用了从 &lt;code&gt;&amp;lt;M-a&amp;gt;&lt;/code&gt; 到 &lt;code&gt;&amp;lt;M-z&amp;gt;&lt;/code&gt; 的 26 组合键和从 &lt;code&gt;&amp;lt;M-0&amp;gt;&lt;/code&gt; 到 &lt;code&gt;&amp;lt;M-9&amp;gt;&lt;/code&gt; 的 10 个组合键。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; range&lt;span class="p"&gt;(&lt;/span&gt;char2nr&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; char2nr&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; nr2char&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    exec &lt;span class="s2"&gt;&amp;quot;set &amp;lt;M-&amp;quot;&lt;/span&gt;.&lt;span class="k"&gt;i&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;&amp;gt;=\&amp;lt;Esc&amp;gt;&amp;quot;&lt;/span&gt;.&lt;span class="k"&gt;i&lt;/span&gt;
    exec &lt;span class="s2"&gt;&amp;quot;inoremap \&amp;lt;Esc&amp;gt;&amp;quot;&lt;/span&gt;.&lt;span class="k"&gt;i&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot; &amp;lt;M-&amp;quot;&lt;/span&gt;.&lt;span class="k"&gt;i&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;endfor&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; range&lt;span class="p"&gt;(&lt;/span&gt;char2nr&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; char2nr&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;9&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; nr2char&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    exec &lt;span class="s2"&gt;&amp;quot;set &amp;lt;M-&amp;quot;&lt;/span&gt;.&lt;span class="k"&gt;i&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;&amp;gt;=\&amp;lt;Esc&amp;gt;&amp;quot;&lt;/span&gt;.&lt;span class="k"&gt;i&lt;/span&gt;
    exec &lt;span class="s2"&gt;&amp;quot;inoremap \&amp;lt;Esc&amp;gt;&amp;quot;&lt;/span&gt;.&lt;span class="k"&gt;i&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot; &amp;lt;M-&amp;quot;&lt;/span&gt;.&lt;span class="k"&gt;i&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;endfor&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 在上面这段代码中，我们将诸如 &lt;code&gt;&amp;lt;M-h&amp;gt;&lt;/code&gt; 这样的值设置为 &lt;code&gt;&amp;lt;Esc&amp;gt;h&lt;/code&gt;，然后用 &lt;code&gt;&amp;lt;M-h&amp;gt;&lt;/code&gt; 进行键位绑定，这样 Vim 在某些 terminal 中就可以把 &lt;code&gt;&amp;lt;Esc&amp;gt;h&lt;/code&gt; 的按键序列正确地对应到 &lt;code&gt;&amp;lt;M-h&amp;gt;&lt;/code&gt; 表示的按键操作上了。为了便 &lt;code&gt;&amp;lt;M-h&amp;gt;&lt;/code&gt; 的组合键在 insert 模式中也能使用，我们在上面的代码中加入了 &lt;code&gt;innoremap&lt;/code&gt; 一句。之后，我们就可以用 &lt;code&gt;&amp;lt;M-h&amp;gt;&lt;/code&gt; 来进行键位映射了，例如以下组合键就可以正常打印信息了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;unique&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;M&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;h&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :echo &lt;span class="s1"&gt;&amp;#39;&amp;lt;\M-h&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 实际上，这句映射相当于 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;unique&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Esc&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;h&lt;/span&gt; :echo &lt;span class="s1"&gt;&amp;#39;&amp;lt;\M-h&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 只不过 &lt;code&gt;&amp;lt;Esc&amp;gt;h&lt;/code&gt; 是针对某一类特殊 terminal 才管用的 dirty hack。用 &lt;code&gt;&amp;lt;M-h&amp;gt;&lt;/code&gt; 进行配置，代码的可读性更好一些，换到其它 terminal 下的移植性也更好一些。&lt;/p&gt;
&lt;p&gt; 以上。&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-!map-alt-keys"&gt;
&lt;p&gt;&lt;code&gt;:h map-alt-keys&lt;/code&gt; 详细解释了为什么 meta 键不起作用，并给出了一个设置 shell 的方法来解决这个问题。&amp;#160;&lt;a class="footnote-backref" href="#fnref-!map-alt-keys" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="vim"></category></entry><entry><title>Vim 技巧之 Smart Write</title><link href="http://yuex.in/post/2015/02/vim-technique-smart-write.html" rel="alternate"></link><published>2015-02-01T00:00:00+08:00</published><updated>2015-02-01T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2015-02-01:/post/2015/02/vim-technique-smart-write.html</id><summary type="html">&lt;p&gt; 上篇讲到 &lt;code&gt;SmartQuit()&lt;/code&gt;，通过处理 Vim 中的 &lt;code&gt;E37&lt;/code&gt; 异常，让我们可以更畅快地退出 Vim。但这个解法并不完美，例如我们通过 &lt;code&gt;vim&lt;/code&gt; 命令编辑无名文件时，&lt;code&gt;SmartQuit()&lt;/code&gt; 在退出时会尝试用 &lt;code&gt;w&lt;/code&gt; 进行保存，但由于当前文件没有文件名，所以会遭遇 Vim 中的 &lt;code&gt;E32&lt;/code&gt; 异常 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;E32: No file name&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 在这篇文章里，我提供一个我在用的 &lt;code&gt;SmartWrite()&lt;/code&gt; 函数，来解决 &lt;code&gt;E32&lt;/code&gt;。闲言少叙，我们还是直接上代码 &lt;/p&gt;
&lt;p&gt; 首先，我们先将 &lt;code&gt;SmartWrite()&lt;/code&gt; 的调用绑定到一个键位，这里暂时用 &lt;code&gt;wq&lt;/code&gt; 替代好了。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;unique&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;wq&lt;/span&gt; :&lt;span class="k"&gt;call&lt;/span&gt; SmartWrite&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt; 一个更好的方法是将 &lt;code&gt;;&lt;/code&gt; 映射为 &lt;code&gt;&amp;lt;Leader&amp;gt;&lt;/code&gt; 键，然后用 &lt;code&gt;&amp;lt;Leader&amp;gt;w&lt;/code&gt; 来调用 &lt;code&gt;SmartWrite()&lt;/code&gt;，这个键位按起来很方便而且很好记。当然 …&lt;/p&gt;</summary><content type="html">&lt;p&gt; 上篇讲到 &lt;code&gt;SmartQuit()&lt;/code&gt;，通过处理 Vim 中的 &lt;code&gt;E37&lt;/code&gt; 异常，让我们可以更畅快地退出 Vim。但这个解法并不完美，例如我们通过 &lt;code&gt;vim&lt;/code&gt; 命令编辑无名文件时，&lt;code&gt;SmartQuit()&lt;/code&gt; 在退出时会尝试用 &lt;code&gt;w&lt;/code&gt; 进行保存，但由于当前文件没有文件名，所以会遭遇 Vim 中的 &lt;code&gt;E32&lt;/code&gt; 异常 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;E32: No file name&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 在这篇文章里，我提供一个我在用的 &lt;code&gt;SmartWrite()&lt;/code&gt; 函数，来解决 &lt;code&gt;E32&lt;/code&gt;。闲言少叙，我们还是直接上代码 &lt;/p&gt;
&lt;p&gt; 首先，我们先将 &lt;code&gt;SmartWrite()&lt;/code&gt; 的调用绑定到一个键位，这里暂时用 &lt;code&gt;wq&lt;/code&gt; 替代好了。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;unique&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;wq&lt;/span&gt; :&lt;span class="k"&gt;call&lt;/span&gt; SmartWrite&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt; 一个更好的方法是将 &lt;code&gt;;&lt;/code&gt; 映射为 &lt;code&gt;&amp;lt;Leader&amp;gt;&lt;/code&gt; 键，然后用 &lt;code&gt;&amp;lt;Leader&amp;gt;w&lt;/code&gt; 来调用 &lt;code&gt;SmartWrite()&lt;/code&gt;，这个键位按起来很方便而且很好记。当然，如果插件较多，按键不够用，我们还可以开启 &lt;code&gt;&amp;lt;Alt&amp;gt;&lt;/code&gt; 键来使用更多的组合键。不过这些都不打紧，因为在文章的最后，我们会把 &lt;code&gt;SmartWrite()&lt;/code&gt; 的调用整合进 &lt;code&gt;SmartQuit()&lt;/code&gt; 中，这样就只要记忆一个 &lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt; 就可以了。&lt;/p&gt;
&lt;p&gt; 接下来，是 &lt;code&gt;SmartWrite()&lt;/code&gt; 的代码 &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; SmartWrite&lt;span class="p"&gt;(&lt;/span&gt;...&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; cmd &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;a&lt;/span&gt;:&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; cmd &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;a&lt;/span&gt;:&lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;endif&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; empty&lt;span class="p"&gt;(&lt;/span&gt;bufname&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;call&lt;/span&gt; WriteWithName&lt;span class="p"&gt;(&lt;/span&gt;cmd&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        exec cmd
    &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; WriteWithName&lt;span class="p"&gt;(&lt;/span&gt;cmd&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;call&lt;/span&gt; inputsave&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; filename &lt;span class="p"&gt;=&lt;/span&gt; input&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;.&lt;span class="k"&gt;a&lt;/span&gt;:cmd.&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; cmds &lt;span class="p"&gt;=&lt;/span&gt; [&lt;span class="k"&gt;a&lt;/span&gt;:cmd&lt;span class="p"&gt;,&lt;/span&gt; filename]
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;empty&lt;span class="p"&gt;(&lt;/span&gt;glob&lt;span class="p"&gt;(&lt;/span&gt;filename&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;redraw&lt;/span&gt;
        echohl WarningMsg
        echo &lt;span class="s1"&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt;.filename.&lt;span class="s1"&gt;&amp;#39;&amp;quot; existed. Force &amp;#39;&lt;/span&gt;.&lt;span class="k"&gt;a&lt;/span&gt;:cmd.&lt;span class="s1"&gt;&amp;#39; [!] ? [Y/n] &amp;#39;&lt;/span&gt;
        echohl None

        &lt;span class="k"&gt;let&lt;/span&gt; choice &lt;span class="p"&gt;=&lt;/span&gt; nr2char&lt;span class="p"&gt;(&lt;/span&gt;getchar&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; choice &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\&amp;lt;CR&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; choice &lt;span class="p"&gt;==&lt;/span&gt;? &lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;
            &lt;span class="k"&gt;call&lt;/span&gt; CmdExecute&lt;span class="p"&gt;(&lt;/span&gt;cmds&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;endif&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;call&lt;/span&gt; CmdExecute&lt;span class="p"&gt;(&lt;/span&gt;cmds&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;endif&lt;/span&gt;

    &lt;span class="k"&gt;call&lt;/span&gt; inputrestore&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; CmdExecute&lt;span class="p"&gt;(&lt;/span&gt;cmds&lt;span class="p"&gt;,&lt;/span&gt; force&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;a&lt;/span&gt;:force
        &lt;span class="k"&gt;let&lt;/span&gt; cmd &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;a&lt;/span&gt;:cmds[&lt;span class="m"&gt;0&lt;/span&gt;].&lt;span class="s1"&gt;&amp;#39;! &amp;#39;&lt;/span&gt;.&lt;span class="k"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;a&lt;/span&gt;:cmds[&lt;span class="m"&gt;1&lt;/span&gt;:]&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; cmd &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;a&lt;/span&gt;:cmds&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;endif&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; exists&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cmd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        exec cmd
    &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt; 好在 Vimscript 并不严格要求函数定义与使用的先后顺序，因为是脚本语言嘛，所以这里就按照逻辑上最自然的先后顺序给出代码了。在 &lt;code&gt;SmartWrite()&lt;/code&gt; 中，我们进行一个判断，看当前文件是否有名字。如果有名字，就直接执行默认为写的命令；如果没有名字，就调用 &lt;code&gt;WriteWithName()&lt;/code&gt;。这个函数会要求输入一个文件名字，然后会检查是否存在同名的文件。如果存在，会提示是否强制写，默认是只有 &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 或者 &lt;code&gt;Y&lt;/code&gt; 起头的输入，才会进行强制写入。决定之后，会调用 &lt;code&gt;CmdExecute()&lt;/code&gt; 来真正执行写入的命令。&lt;/p&gt;
&lt;p&gt; 最后，只要在 &lt;code&gt;SmartQuit()&lt;/code&gt; 里进行一下小的调整，就可以将 &lt;code&gt;SmartWrite()&lt;/code&gt; 整合进去了。我们赘述如下，注意其中的 &lt;code&gt;&amp;lt;C-w&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;C-s&amp;gt;&lt;/code&gt; 键的设置，其实是配置了 &lt;strong&gt; 保存 &lt;/strong&gt; 和 &lt;strong&gt; 保存退出 &lt;/strong&gt; 两个键位。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; SmartQuit&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;&amp;amp;&lt;span class="nb"&gt;modified&lt;/span&gt;
        exec &lt;span class="s2"&gt;&amp;quot;quit&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;redraw&lt;/span&gt;
        echohl WarningMsg
        echo &lt;span class="s2"&gt;&amp;quot;Buffer changed! [^W]w [^S]x [^B^N]q!: &amp;quot;&lt;/span&gt;
        echohl None

        &lt;span class="k"&gt;let&lt;/span&gt; cmd &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;ret&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; nr2char&lt;span class="p"&gt;(&lt;/span&gt;getchar&lt;span class="p"&gt;())&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;ret&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\&amp;lt;C-b&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="k"&gt;ret&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\&amp;lt;C-n&amp;gt;&amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; cmd &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;q!&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="k"&gt;ret&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\&amp;lt;C-w&amp;gt;&amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; cmd &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;call SmartWrite(&amp;#39;w&amp;#39;)&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="k"&gt;ret&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\&amp;lt;C-s&amp;gt;&amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; cmd &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;call SmartWrite(&amp;#39;x&amp;#39;)&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;endif&lt;/span&gt;

        &lt;span class="k"&gt;redraw&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;empty&lt;span class="p"&gt;(&lt;/span&gt;cmd&lt;span class="p"&gt;)&lt;/span&gt;
            exec cmd
        &lt;span class="k"&gt;endif&lt;/span&gt;
    &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt; 最后的最后，别忘了我们的 &lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt; 键映射 &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;unique&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;call&lt;/span&gt; SmartQuit&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt; 以上。&lt;/p&gt;</content><category term="vim"></category></entry><entry><title>Vim 技巧之 Smart Quit</title><link href="http://yuex.in/post/2015/01/vim-technique-smart-quit.html" rel="alternate"></link><published>2015-01-25T00:00:00+08:00</published><updated>2015-01-25T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2015-01-25:/post/2015/01/vim-technique-smart-quit.html</id><summary type="html">&lt;p&gt; 初学 Vim 时，我们都有这样的经历 ——“ 哇，怎么退出？！”。在尝试了 &lt;code&gt;&amp;lt;Ctrl-C&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt; 全都没有效果时，才会注意左下角状态栏的小提示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Type  :quit&amp;lt;Enter&amp;gt;  to exit Vim&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 在小心翼翼地键入这个命令完成退出之后，我们欣喜地自认为已经掌握了 Vim 的退出之法。然而，当我们在 Vim 中进行了一番探索、受了一些嘲弄、做了一些不听使唤的修改后，虔诚地键入 &lt;code&gt;:quit&lt;/code&gt;，准备结束这次不成功的尝试，舒缓一下心神，重新来过之时，Vim 又会无情地用一行血红色的小字警告你：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;E37: No write since last change (add ! to override)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 很多人的 Vim 之旅就此便戛然而止。许多年之后，那些并未放弃的人们，早已掌握了 Vim 中的大多数奥妙，但时不时地，仍然会在完成一些快速修改，准备退出进行一下验证或者修改下一个文件的时候，遭遇 Vim 的 &lt;code&gt;E37&lt;/code&gt; 嘲弄。Vim …&lt;/p&gt;</summary><content type="html">&lt;p&gt; 初学 Vim 时，我们都有这样的经历 ——“ 哇，怎么退出？！”。在尝试了 &lt;code&gt;&amp;lt;Ctrl-C&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt; 全都没有效果时，才会注意左下角状态栏的小提示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Type  :quit&amp;lt;Enter&amp;gt;  to exit Vim&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 在小心翼翼地键入这个命令完成退出之后，我们欣喜地自认为已经掌握了 Vim 的退出之法。然而，当我们在 Vim 中进行了一番探索、受了一些嘲弄、做了一些不听使唤的修改后，虔诚地键入 &lt;code&gt;:quit&lt;/code&gt;，准备结束这次不成功的尝试，舒缓一下心神，重新来过之时，Vim 又会无情地用一行血红色的小字警告你：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;E37: No write since last change (add ! to override)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 很多人的 Vim 之旅就此便戛然而止。许多年之后，那些并未放弃的人们，早已掌握了 Vim 中的大多数奥妙，但时不时地，仍然会在完成一些快速修改，准备退出进行一下验证或者修改下一个文件的时候，遭遇 Vim 的 &lt;code&gt;E37&lt;/code&gt; 嘲弄。Vim 仿佛是在用这种方式训斥你 ——“ 你，图样图森破，上台拿衣服 ”。虽然，无数次地，我们在论坛上、bbs 里，义正言辞地强调 “WYSIWYG，图样图森破；Vim，时尚时尚最时尚 ”，然而在夜深人静的时候，我们扪心自问，深深明白，Vim 还有很多地方不够完美 &lt;sup id="fnref-!neovim"&gt;&lt;a class="footnote-ref" href="#fn-!neovim"&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt; 所以，在这篇文章里，我要展示一个我在用的 Vim 配置，可以让我们在退出的时候，不再遭受 &lt;code&gt;E37&lt;/code&gt; 的痛苦折磨。闲言少叙，直接上相关代码。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; SmartQuit&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;&amp;amp;&lt;span class="nb"&gt;modified&lt;/span&gt;
        exec &lt;span class="s2"&gt;&amp;quot;quit&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;redraw&lt;/span&gt;
        echohl WarningMsg
        echo &lt;span class="s2"&gt;&amp;quot;Buffer changed! [^W]w [^S]x [^B^N]q!: &amp;quot;&lt;/span&gt;
        echohl None

        &lt;span class="k"&gt;let&lt;/span&gt; cmd &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;ret&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; nr2char&lt;span class="p"&gt;(&lt;/span&gt;getchar&lt;span class="p"&gt;())&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;ret&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\&amp;lt;C-b&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="k"&gt;ret&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\&amp;lt;C-n&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;            &amp;quot; BOOM! NUKE!&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; cmd &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;q!&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="k"&gt;ret&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\&amp;lt;C-w&amp;gt;&amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; cmd &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="k"&gt;ret&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\&amp;lt;C-s&amp;gt;&amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; cmd &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;endif&lt;/span&gt;

        &lt;span class="k"&gt;redraw&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;empty&lt;span class="p"&gt;(&lt;/span&gt;cmd&lt;span class="p"&gt;)&lt;/span&gt;
            exec cmd
        &lt;span class="k"&gt;endif&lt;/span&gt;
    &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;

&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;unique&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;call&lt;/span&gt; SmartQuit&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt; 这段代码很简单，我们将 &lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt; 映射到调用 &lt;code&gt;SmartQuit()&lt;/code&gt; 函数。而这个函数会检查当前文件是否已经修改过。若没有修改，则直接退出；若有修改，则会提示你进行保存（&lt;code&gt;&amp;lt;C-w&amp;gt;&lt;/code&gt;）、保存退出（&lt;code&gt;&amp;lt;C-s&amp;gt;&lt;/code&gt;）、强制退出（&lt;code&gt;&amp;lt;C-b&amp;gt;&lt;/code&gt; 或者 &lt;code&gt;&amp;lt;C-n&amp;gt;&lt;/code&gt;）、或者取消操作（&lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt;）。最后根据选择执行相应的命令。&lt;/p&gt;
&lt;p&gt; 当然，如果你不喜欢这几个按键，或者不喜欢那个提示语，可以自行修改以适合自己口味。另外，这个函数在编写的过程中参考了 Stackoverflow 上的一个 &lt;a href="http://stackoverflow.com/a/20075923/2787160"&gt; 回答 &lt;/a&gt;，你也可以进行一下对比，选取合适的部分，再加以发挥形成自己的 SmartQuit。&lt;/p&gt;
&lt;p&gt; 眼尖的读者可能已经发现了，这个配置是要用 &lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt; 来进行退出 Vim。其实我们也可以用这个按键代替 &lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt;&lt;sup id="fnref-!esc"&gt;&lt;a class="footnote-ref" href="#fn-!esc"&gt;2&lt;/a&gt;&lt;/sup&gt; 来退出 Vim 中的各个模式。这在 Vim 中是一个默认设置，大多数情况下两者的行为是一致的。但有一个例外，就是用 &lt;code&gt;&amp;lt;C-v&amp;gt;&lt;/code&gt; 和 &lt;code&gt;I&lt;/code&gt; 进行多行首插入时。&lt;code&gt;:h i_ctrl-c&lt;/code&gt; 中写明 &lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt; 在 insert 模式中不会触发 &lt;code&gt;InsertLeave&lt;/code&gt; 事件，因此也就无法完成多行插入了。解决这个问题，也很简单，只要加入如下配置就好了。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;inoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;unique&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Esc&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt; 另外，以 MacBook Pro 为代表的新一代的笔电设计，愈发地将 &lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt; 缩小，并置于偏离键盘左上角的位置，对于 Vim 的使用造成了一定的不便，所以非常推荐大家用 &lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt; 代替 &lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt;。当然，&lt;strong&gt; 前提是要将 &lt;code&gt;&amp;lt;CapsLock&amp;gt;&lt;/code&gt; 设置为 &lt;code&gt;&amp;lt;Ctrl&amp;gt;&lt;/code&gt;&lt;/strong&gt;。否则，频繁使用 &lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt; 可能还会更痛苦。不过说到底，这个设置的好与不好，要不要采纳，大家还是要在使用中，根据自己的习惯做出适合自己的选择。&lt;/p&gt;
&lt;p&gt; 以上。&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-!neovim"&gt;
&lt;p&gt; 目前针对 Vim 有一个名为 &lt;a href="https://github.com/neovim/neovim"&gt;Neovim&lt;/a&gt; 的改良项目。&amp;#160;&lt;a class="footnote-backref" href="#fnref-!neovim" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-!esc"&gt;
&lt;p&gt;&lt;code&gt;:h esc&lt;/code&gt;，Vim 文档中对 &lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt; 的用途进行了详细的描述。&amp;#160;&lt;a class="footnote-backref" href="#fnref-!esc" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="vim"></category></entry><entry><title>使用 bash 渲染模板动态生成配置文件</title><link href="http://yuex.in/post/2014/10/bash-template.html" rel="alternate"></link><published>2014-10-14T00:00:00+08:00</published><updated>2014-10-14T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2014-10-14:/post/2014/10/bash-template.html</id><summary type="html">&lt;p&gt; 在使用 bash 自动化一些配置过程的时候，经常会遇到这样一种情况，我们需要向配置文件中写入一些信息，而这些信息是动态的，只有脚本实际运行的时候，才能知道这些信息。比如我需要自动启动一个由多个 docker container 组成的 cluster。这个 cluster 中的多个 container 形成一个 C/S 架构的星形拓扑。为了可以正常通信，client 至少应该知道 server 的 ip 地址。为了使这个部署可以更灵活，一般会选择使用 dhcp 来动态获取地址。所以，我们不能事先把地址写死，必须在 server container 运行之后动态生成 client 的配置文件。当然，我们也可以把脚本写成两步，先起 server，再起 client。但是这种方法自动化的不彻底，没有一下就把所有工作从头做到尾来得爽快，所以这里也就按下不表了。&lt;/p&gt;
&lt;p&gt; 上面说的这个情况，最直接的方法是用 &lt;code&gt;sed&lt;/code&gt; 配合正则表达一处一处地修改。但是当要修改的地方很多时，这个方法会变得非常繁琐，后期维护也非常困难。我在这里提供一种利用 bash 渲染模板文件动态生成实际使用配置文件的方法。如果你有玩过 …&lt;/p&gt;</summary><content type="html">&lt;p&gt; 在使用 bash 自动化一些配置过程的时候，经常会遇到这样一种情况，我们需要向配置文件中写入一些信息，而这些信息是动态的，只有脚本实际运行的时候，才能知道这些信息。比如我需要自动启动一个由多个 docker container 组成的 cluster。这个 cluster 中的多个 container 形成一个 C/S 架构的星形拓扑。为了可以正常通信，client 至少应该知道 server 的 ip 地址。为了使这个部署可以更灵活，一般会选择使用 dhcp 来动态获取地址。所以，我们不能事先把地址写死，必须在 server container 运行之后动态生成 client 的配置文件。当然，我们也可以把脚本写成两步，先起 server，再起 client。但是这种方法自动化的不彻底，没有一下就把所有工作从头做到尾来得爽快，所以这里也就按下不表了。&lt;/p&gt;
&lt;p&gt; 上面说的这个情况，最直接的方法是用 &lt;code&gt;sed&lt;/code&gt; 配合正则表达一处一处地修改。但是当要修改的地方很多时，这个方法会变得非常繁琐，后期维护也非常困难。我在这里提供一种利用 bash 渲染模板文件动态生成实际使用配置文件的方法。如果你有玩过 jinja2 这种模板语言，这里我要讲的方法和用 jinja2 渲染 template 生成 html 的思路是类似的。&lt;/p&gt;
&lt;p&gt; 闲言少敘，以下是我要讲的方法的代码片段。其中 &lt;code&gt;${template}&lt;/code&gt; 为模板文件的存放路径，而 &lt;code&gt;${dst}&lt;/code&gt; 为生成的配置的文件所欲保存的路径 &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;template&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
awk &lt;span class="s1"&gt;&amp;#39;$0 !~ /^\s*#.*$/&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
sed &lt;span class="s1"&gt;&amp;#39;s/[ &amp;quot;]/\\&amp;amp;/g&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; -r line&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;line&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt; &amp;gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;dst&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt; 以上代码中，&lt;code&gt;awk '$0 !~ /^\s*#.*$/'&lt;/code&gt; 将 &lt;code&gt;cat&lt;/code&gt; 所打印的注释行全部吃掉。&lt;code&gt;sed 's/[ "]/\\&amp;amp;/g'&lt;/code&gt; 将模板文件中的双引号和空格全部转义，用于抵消 &lt;code&gt;eval&lt;/code&gt;。因为我的模板文件中只有这两个 magic character，所以没有处理多余的字符。如果你的模板文件中还使用了其它 magic character，如单引号、圆括弧等，可以根据实际情况修改这一句。&lt;code&gt;while&lt;/code&gt; 循环逐行读入 p 之前管道的输出，&lt;code&gt;-r&lt;/code&gt; 参数保证我们在 &lt;code&gt;sed&lt;/code&gt; 中的转义不会被 &lt;code&gt;read&lt;/code&gt; 吃掉。&lt;code&gt;eval&lt;/code&gt; 将模板中定义的 bash variable 替换为脚本运行时环境中的变量值。最后，将全部结果写入到所欲存储的路径。&lt;/p&gt;
&lt;p&gt; 以下是我所用的模板中的一个片段（yaml 格式的 storm 配置文件）。&lt;code&gt;${ZK_IP}&lt;/code&gt; 是所需要的一个 zookeeper 实例的 ip 地址，需要在 zookeeper container 运行起来之后才能确定。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;storm.zookeeper.servers&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;${ZK_IP}&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt; 经由上面的代码在运行时渲染后，&lt;code&gt;${ZK_IP}&lt;/code&gt; 会被替换为一个 ipv4 地址，所以实际生成的配置文件可能是这个样子的 &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;storm.zookeeper.servers&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;172.16.0.1&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt; 这个就是实际的 storm 实例中会使用的配置文件。&lt;/p&gt;
&lt;p&gt; 以上 :)&lt;/p&gt;</content><category term="bash"></category></entry><entry><title>Arch Linux 上手指南</title><link href="http://yuex.in/post/2014/04/arch-guide.html" rel="alternate"></link><published>2014-04-18T00:00:00+08:00</published><updated>2014-04-18T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2014-04-18:/post/2014/04/arch-guide.html</id><summary type="html">&lt;h1&gt; 缘起 &lt;/h1&gt;
&lt;p&gt; 一直都想写一篇关于 Arch Linux 的博客，可以用来帮助 Arch 新玩家上路，
又可以总结一下自己入坑三四年来的一些心得。
年前的时候，我的 Thinkpad X220 双硬盘中的 mSATA SSD 挂了，援救了一下数据和系统。
本打算借机写写 Arch Linux 的安装，也积累了一些素材。但思来想去，
每个人的硬件型号、网络环境、分区习惯、软件选择的品味等等，不尽相同，
一份安装指南不一定会对每个人都有用，甚至还有可能在某些情况下起到截然相反的效果，
影响观者对于 Arch 的热情，所以最后也就没有落笔。&lt;/p&gt;
&lt;p&gt; 然而，今天又有同事问起 Arch Linux，同事有一些 Linux 基础，对 Arch 比较好奇。
我想不如准备一些参考资料，说说自己作为 Arch 用户的使用心得，
来告诉新玩家 Arch 是什么，使用 Arch 会遇到怎样的问题，这样来得更实在一些。
像安装指南、发行版比较之类，已经有不少很好的资料了，实在不需要我的狗尾续貂 …&lt;/p&gt;</summary><content type="html">&lt;h1&gt; 缘起 &lt;/h1&gt;
&lt;p&gt; 一直都想写一篇关于 Arch Linux 的博客，可以用来帮助 Arch 新玩家上路，
又可以总结一下自己入坑三四年来的一些心得。
年前的时候，我的 Thinkpad X220 双硬盘中的 mSATA SSD 挂了，援救了一下数据和系统。
本打算借机写写 Arch Linux 的安装，也积累了一些素材。但思来想去，
每个人的硬件型号、网络环境、分区习惯、软件选择的品味等等，不尽相同，
一份安装指南不一定会对每个人都有用，甚至还有可能在某些情况下起到截然相反的效果，
影响观者对于 Arch 的热情，所以最后也就没有落笔。&lt;/p&gt;
&lt;p&gt; 然而，今天又有同事问起 Arch Linux，同事有一些 Linux 基础，对 Arch 比较好奇。
我想不如准备一些参考资料，说说自己作为 Arch 用户的使用心得，
来告诉新玩家 Arch 是什么，使用 Arch 会遇到怎样的问题，这样来得更实在一些。
像安装指南、发行版比较之类，已经有不少很好的资料了，实在不需要我的狗尾续貂。
此外，Arch 本身就不太适合刚刚接触 Linux 的玩家。而对于有一定 Linux 基础的玩家，
手把手地教人家怎样安装，应该这样，不要那样，这样才对，那样不对，
在我看来， 无异于对别人的一种不尊重。&lt;/p&gt;
&lt;p&gt; 综上种种，有了这篇小文。本文不会涉及具体的 Arch 安装步骤、详细 Arch 特性比较，
但我会给出这些资料的链接。此外，我会说说我的使用心得和一些 Arch 使用的小建议。&lt;/p&gt;
&lt;h1&gt;Arch Linux 是什么？&lt;/h1&gt;
&lt;p&gt; 可以参考以下几篇文章，这些 wiki 页面中一般都有中文翻译页的链接，可自行跳转 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Arch_Linux"&gt;Arch Linux&lt;/a&gt; - Wikipeida 上的 “Arch Linux” 条目，涉及历史等一些基本信息 &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/The_Arch_Way"&gt;The Arch Way&lt;/a&gt; - Arch Linux 的设计哲学，KISS。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Arch_compared_to_other_distributions"&gt;Arch Compared to Others&lt;/a&gt; - Arch Linux 与其它发行版的比较，如果你是从其它发行版转过来，可以看看从 Arch 这里，你会得到什么，会失去什么，来帮助你选择。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/FAQ"&gt;Arch FAQ&lt;/a&gt; - 还有问题？可以翻翻这个 FAQ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 当然，介绍当中或多或少都有各种各样的忽悠，这里我讲一讲我三四年使用中，
感触最深的三点 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 滚动更新 &lt;/strong&gt;。Arch 采用的是滚动更动，没有 Ubuntu 和 Fedora 中发行版的概念。
你不需要在一个固定年限之后重装系统来保持更新。你的配置可以使用很多时间。
特别的，作为桌面系统，如果你把 &lt;code&gt;/home&lt;/code&gt; 挂载为一个单独的分区，
你甚至可以在 &lt;code&gt;/&lt;/code&gt; 挂掉之后，重装 Arch，挂回 &lt;code&gt;/home&lt;/code&gt;，然后惊喜的发现，
你 &lt;code&gt;/home&lt;/code&gt; 中的各种配置仍然可以正常工作。
不过这里要注意的是，Arch 的滚动更新不是完美的。在一些重大更新的时候，
需要手工配置一些东西，如果没有正确更新，下次直接进行系统整体更新的话，
有可能会让系统无法正常启动。2012-2013 年之间的 Systemd 和 Gnome3 切换，
就出现过这个问题，也吓走了一些 Arch 玩家。
不过，一般来说加入 Arch Announce 的邮件列表之后，重大更新都会在其中宣布。
一年最多也就一两次，不是很频繁。另外，即使系统挂掉了，使用 archboot 救援之后，
都会正常恢复的。比如像我，root 分区所在的 SSD 硬盘挂了两次
（硬件挂了两次，不是软件），&lt;code&gt;/home&lt;/code&gt; 中的资料、配置仍然都在。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 活跃且友好的社区 &lt;/strong&gt;。&lt;a href="http://wiki.archlinux.org/"&gt;Arch Wiki&lt;/a&gt; 和 &lt;a href="http://bbs.archlinux.org/"&gt;Arch Forum&lt;/a&gt; 都是质量非常好的资源，
基本上 Arch 使用过程当中遇到的任何问题，都可以利用 wiki 自己解决。
如果真的没有相关的内容（在我自己的使用过程中目前还没有遇到这种情况），
你可以到论坛上求助，解答都非常热心。不过记得解决问题之后，
要去 wiki 更新一下相关页面。:)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 简洁的包管理格式 &lt;/strong&gt;。Arch 有自己的包管理系统 &lt;a href="https://wiki.archlinux.org/index.php/Pacman"&gt;Pacman&lt;/a&gt; 和包格式 &lt;a href="https://wiki.archlinux.org/index.php/PKGBUILD"&gt;PKGBUILD&lt;/a&gt;。
PKGBUILD 中可以写清楚信赖，源码的位置，编译和安装命令。基于 PKGBUILD，
Arch 官方提供了 AUR ( Arch User Repository )，可以让用户自己提交 PKGBUILD。
而其它用户可以通过 http 或者 &lt;code&gt;yaourt&lt;/code&gt; 或者 &lt;code&gt;packer&lt;/code&gt; 来下载 PKGBUILD，
进行包的编译和安装。也正因为这样，AUR 当中有很多最新的软件。&lt;/p&gt;
&lt;h1&gt; 安装 Arch Linux&lt;/h1&gt;
&lt;p&gt; 详细的安装指导可以参考以下 wiki 页，页面中有对应的中文翻译页，请自行跳转 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Installation_guide"&gt;Installation Guide&lt;/a&gt; - 精简版 &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Beginners'_Guide"&gt;Arch Beginner's Guide&lt;/a&gt; - 详细版 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 在安装之前，或许你会需要检查下你是否了解这些东西：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Uefi"&gt;UEFI&lt;/a&gt;/&lt;a href="https://en.wikipedia.org/wiki/GUID_Partition_Table"&gt;GPT&lt;/a&gt; 或者 BIOS/MBR - 我建议你使用 UEFI/GPT，不可否认，BIOS/MBR 正在被淘汰 &lt;/li&gt;
&lt;li&gt;LVM - 如果将 &lt;code&gt;/&lt;/code&gt;、&lt;code&gt;/home&lt;/code&gt;、&lt;code&gt;/var&lt;/code&gt; 放到 lvm 上的话，对于硬盘空间的充分利用和日后救援系统，都有不少裨益 &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Linux_boot_process"&gt;Linux Boot Process&lt;/a&gt; - 这会帮助你更好地理解 BootLoader、Kernel、Systemd/init 之间的关系，这有助于理解安装过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 在安装过程中，我建议你保持手边有第二台可以连网的设备，因为你可能要不时地查阅
&lt;a href="http://wiki.archlinux.org/"&gt;Arch Wiki&lt;/a&gt;。&lt;/p&gt;
&lt;h1&gt; 安装之后 &lt;/h1&gt;
&lt;p&gt; 成功安装 Arch 之后，你应该可以启动到一个 shell，
虽然这个离一个真正的桌面系统还有点距离，不过已经很近了。
这里，我建议你休息一下，回顾一下安装过程中遇到的各种问题，
或许有针对性的记一些笔记会是个不错主意。如果以上的安装对你来说小菜一碟，
那么不用怀疑，你就是那个为 Arch 而生的人，坚定地走下去吧！:)&lt;/p&gt;
&lt;p&gt; 如果你决定继续进行，我建议你先从图形界面开始。什么？你在桌面系统上不用图形界面？
真有够硬核！如果你决定还是委屈地配合我一下，安装一个图形界面，可以参考 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/General_recommendations#Graphical_user_interface"&gt;Arch GUI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 安装完图形介面之后，基本上 Arch 的安装就可以告一段落了，
但是请检查你是否完成以下工作？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 加入 &lt;a href="https://mailman.archlinux.org/mailman/listinfo/arch-announce"&gt;Arch Announce&lt;/a&gt; 邮件列表，邮件量很少，一年十封左右，但是一旦有信，就意味着你在下次更新之前要仔细阅读，贸然更新可能会挂掉系统 &lt;/li&gt;
&lt;li&gt; 访问 &lt;a href="https://wiki.archlinux.org/index.php/Pacman_rosetta"&gt;Pacman Rosetta&lt;/a&gt;，提供了一个 &lt;code&gt;pacman&lt;/code&gt; 与 &lt;code&gt;yum&lt;/code&gt; 和 &lt;code&gt;apt-get&lt;/code&gt; 之间对应命令的参考。日常使用中，你可能还有用到 &lt;a href="https://wiki.archlinux.org/index.php/Pacman_Tips"&gt;Pacman Tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; 从 AUR 安装 &lt;code&gt;yaourt&lt;/code&gt; 或者 &lt;code&gt;packer&lt;/code&gt;，这应该是第一个也是最后一个你需要手工安装的 AUR 包 , 具体步骤可以参考 &lt;a href="https://wiki.archlinux.org/index.php/AUR"&gt;AUR&lt;/a&gt;。如果有必要，可以参考 &lt;a href="https://wiki.archlinux.org/index.php/Yaourt"&gt;Yaourt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; 如果你以前没有使用过 &lt;code&gt;systemd&lt;/code&gt;，那么你应该访问 &lt;a href="https://wiki.archlinux.org/index.php/Systemd"&gt;Systemd&lt;/a&gt;，目前很多发行版都已经有了 &lt;a href="https://en.wikipedia.org/wiki/Systemd#Adoption"&gt; 迁移计划 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt; 如果你使用 &lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt;，要注意 Arch 官方源当中既有 python2 也有 python3。一般 &lt;code&gt;python&lt;/code&gt; 默认解析到 &lt;code&gt;python3&lt;/code&gt;，要使用 2 版的解析器，必须使用 &lt;code&gt;python2&lt;/code&gt;。不太方便？可以参考使用 virtualenv 和 virtualenvwrapper，如果你真的是一个 pythoner，你会知道去哪里找这两个模块的源码和文档 &lt;/li&gt;
&lt;li&gt; 最后，请从 AUR 安装 &lt;code&gt;archey&lt;/code&gt;, 并且执行它 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 还想玩更多？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 通读 &lt;a href="https://wiki.archlinux.org/index.php/General_recommendations"&gt;Arch Recommendations&lt;/a&gt;，看看大家有什么好东西推荐，或者你可以浏览 &lt;a href="https://wiki.archlinux.org/index.php/List_of_applications"&gt;Application List&lt;/a&gt;，看看有没有什么你想推荐给大家 &lt;/li&gt;
&lt;li&gt; 参与 &lt;a href="http://wiki.archlinux.org/"&gt;Arch Wiki&lt;/a&gt; 的条目编写和 &lt;a href="http://bbs.archlinux.org/"&gt;Arch Forum&lt;/a&gt; 的讨论吧 &lt;/li&gt;
&lt;li&gt; 提交向一个自己的 AUR，不过可能你需要了解一下 &lt;a href="https://wiki.archlinux.org/index.php/ABS"&gt;ABS&lt;/a&gt;，当然还有 &lt;a href="https://wiki.archlinux.org/index.php/PKGBUILD"&gt;PKGBUILD&lt;/a&gt; 和 &lt;a href="https://wiki.archlinux.org/index.php/AUR"&gt;AUR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt; 结语 &lt;/h1&gt;
&lt;p&gt; 欢迎入伙！快去编写 &lt;a href="http://wiki.archlinux.org/"&gt;Arch Wiki&lt;/a&gt; 和提交 &lt;a href="https://wiki.archlinux.org/index.php/AUR"&gt;AUR&lt;/a&gt; 包，来纳你的投名状吧！&lt;/p&gt;
&lt;p&gt; 但请记住，人生总是很艰难，有一股黑暗势力每年都会入侵一次 Arch 的世界。
它们会以各种方式来破坏 Arch 世界的和谐，包括但不限于 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 利用原力损毁你的硬盘 &lt;/li&gt;
&lt;li&gt; 利用意识控制让你忘记查看 &lt;a href="https://mailman.archlinux.org/mailman/listinfo/arch-announce"&gt;Arch Announce&lt;/a&gt;，或执行 &lt;code&gt;rm -rf *&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 做为一名正义的 Archer，你会使用 &lt;a href="https://wiki.archlinux.org/index.php/archboot"&gt;Archboot&lt;/a&gt; 来维护世界和平的，对吗？&lt;/p&gt;</content><category term="archlinux"></category></entry><entry><title>动手写 PAM 模块让 sshd 支持用户接入控制</title><link href="http://yuex.in/post/2013/09/hands-on-pam-module-and-sshd.html" rel="alternate"></link><published>2013-09-29T00:00:00+08:00</published><updated>2013-09-29T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2013-09-29:/post/2013/09/hands-on-pam-module-and-sshd.html</id><summary type="html">&lt;p&gt; 承接上一篇 blog，某本意是想用 pam_limits.so 来做用户登录限制，从而可以让多个用户共用一台机器做 ssh 代理。这样一来，服务器端就必须要对用户进行基于用户名和登录 ip 的。&lt;/p&gt;
&lt;p&gt; 想当然的做法是用 /etc/security/limits.conf 中的 maxlogins 解决。但是这个是有问题的，maxlogins 是要用户登录到 shell 才会统计的。pam_limits.so 中读取的是 utmp，这个是存在 /var/run/utmp 中的，用 &lt;code&gt;w&lt;/code&gt; 可以查看。而 &lt;code&gt;ssh -N&lt;/code&gt; 是不会被 utmp 记录为 login 的。所以，如果用上篇 blog 中的方法实践的话，用户可以用 &lt;code&gt;ssh -N&lt;/code&gt; 绕过所有的接入控制。一般而言，这也不是什么大问题，因为用户 &lt;code&gt;ssh -N&lt;/code&gt; 接入的话 …&lt;/p&gt;</summary><content type="html">&lt;p&gt; 承接上一篇 blog，某本意是想用 pam_limits.so 来做用户登录限制，从而可以让多个用户共用一台机器做 ssh 代理。这样一来，服务器端就必须要对用户进行基于用户名和登录 ip 的。&lt;/p&gt;
&lt;p&gt; 想当然的做法是用 /etc/security/limits.conf 中的 maxlogins 解决。但是这个是有问题的，maxlogins 是要用户登录到 shell 才会统计的。pam_limits.so 中读取的是 utmp，这个是存在 /var/run/utmp 中的，用 &lt;code&gt;w&lt;/code&gt; 可以查看。而 &lt;code&gt;ssh -N&lt;/code&gt; 是不会被 utmp 记录为 login 的。所以，如果用上篇 blog 中的方法实践的话，用户可以用 &lt;code&gt;ssh -N&lt;/code&gt; 绕过所有的接入控制。一般而言，这也不是什么大问题，因为用户 &lt;code&gt;ssh -N&lt;/code&gt; 接入的话，只能做端口转发这一件事情。而若 sshd 禁用端口转发的话，这个也就只能用来攻击了，而这种又太容易防范了（做贼还要用真名吗），所以也不会够成实质性的威胁。&lt;/p&gt;
&lt;p&gt; 但对于希望把端口转发做为一项服务的某来话，这就是个大问题了。一项服务，如果不能进行用户权限控制的话，那只能算是自己给自己开了一个安全漏洞。解决的方法，最好就是 ssh 可以提供相应的功能。但目前来看，似乎不太可能。而且即使有这个可能，自己动手 commit 的话，直到 merge 也要太长的周期。所以某转而来调研 pam 是不是也能实现这个功能。&lt;/p&gt;
&lt;p&gt; 答案是肯定的。而且更加方便的方法是用 pam_script.so 来做这件事。在进行账户验证的时候，执行脚本，来完成对 ssh 接入用户数和用户 ip 的检查，从而完成对单个账号登录和单个 ip 登录数目的限制。可惜的是，pam 的发行包中没有 pam_script 这个模块。网上可以找到一些别人写的，但大多语焉不详，有的是 doc 一笔带过，有的是编译无法一次通过。此外，某发现这些 pam_script.so 的实现，都只能针对 auth，password 和 session 进行插入，而独没有 account。根据 &lt;code&gt;man pam&lt;/code&gt; 中的解释 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;account - provide account verification types of service: has the user's password expired?; is this user permitted access to the requested service?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 似乎 account 才是最符合某的接入控制需求的。所以，某决定还是自己动手写一个简单的 pam_script.so 吧。对于如何写一个 pam module，可以参考 &lt;a href="http://www.rkeene.org/projects/info/wiki/222"&gt; 这个 &lt;/a&gt; 和 &lt;a href="http://www.freebsd.org/doc/en/articles/pam/article.html#pam-sample-module"&gt; 这个 &lt;/a&gt;。因为我只做 account 用，所以只要实现 &lt;code&gt;pam_sm_acct_mgmt&lt;/code&gt; 就可以了。只要在 C 中指定一个脚本路径，然后用一些参数调用这个脚本，并读取返回值就可以了。而外部脚本，可以使用 shell script，也可以使用 python，对登录数目的统计可以用 &lt;code&gt;ps&lt;/code&gt; 和 &lt;code&gt;netstat&lt;/code&gt;，只要检查完把结果返回给 &lt;code&gt;pam_script.so&lt;/code&gt; 就可以了。&lt;/p&gt;
&lt;p&gt; 最后一步，不要忘记把 &lt;code&gt;pam_script.so&lt;/code&gt; 加入到 /etc/pam.d/sshd 中 &lt;/p&gt;
&lt;p&gt; 因为目前某的 vps 还在做小范围的测试，代码要晚点才能放到 github 上。&lt;/p&gt;</content><category term="sshd"></category><category term="pam"></category><category term="python"></category></entry><entry><title>配置 sshd 使用 pam 认证小结</title><link href="http://yuex.in/post/2013/09/config-sshd-using-pam.html" rel="alternate"></link><published>2013-09-25T00:00:00+08:00</published><updated>2013-09-25T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2013-09-25:/post/2013/09/config-sshd-using-pam.html</id><summary type="html">&lt;p&gt; 某今年新入了一台 linode 主机，最便宜的 plan，年中的时候，linode 流量从 2GB 免费升级到了 2TB。因为某的博客是直接放到 github 上的，所以对 linode 的使用一直都不怎么充分。仅限于几个朋友之间的 L2TP 和自己的 &lt;code&gt;ssh -D&lt;/code&gt;。一直都有一个架立一个 socks 伺服的想法，来给大家免费用。无奈于大部分的浏览器都不支持有密码的 socks 认证，如果架设一个没有验证的伺服又有很严重的管理和用户性能区分保证的问题，所以这个想法一直没有落实。今天花了一些时间，用 ssh＋pam＋chroot jail 完成了这个想法，将思路大概记录一下，希望对有同样需求的同学有所帮助。&lt;/p&gt;
&lt;p&gt;ssh＋pam＋chroot 各模块的功能如下 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ssh/sshd：client and server，支持密码用户 &lt;/li&gt;
&lt;li&gt;pam：提供基于用户名和 ip 地址段的登陆认证和限制 &lt;/li&gt;
&lt;li&gt;chroot：做成一个 chroot jail 限制用户在主机上的权限 &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;chroot …&lt;/h2&gt;</summary><content type="html">&lt;p&gt; 某今年新入了一台 linode 主机，最便宜的 plan，年中的时候，linode 流量从 2GB 免费升级到了 2TB。因为某的博客是直接放到 github 上的，所以对 linode 的使用一直都不怎么充分。仅限于几个朋友之间的 L2TP 和自己的 &lt;code&gt;ssh -D&lt;/code&gt;。一直都有一个架立一个 socks 伺服的想法，来给大家免费用。无奈于大部分的浏览器都不支持有密码的 socks 认证，如果架设一个没有验证的伺服又有很严重的管理和用户性能区分保证的问题，所以这个想法一直没有落实。今天花了一些时间，用 ssh＋pam＋chroot jail 完成了这个想法，将思路大概记录一下，希望对有同样需求的同学有所帮助。&lt;/p&gt;
&lt;p&gt;ssh＋pam＋chroot 各模块的功能如下 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ssh/sshd：client and server，支持密码用户 &lt;/li&gt;
&lt;li&gt;pam：提供基于用户名和 ip 地址段的登陆认证和限制 &lt;/li&gt;
&lt;li&gt;chroot：做成一个 chroot jail 限制用户在主机上的权限 &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;chroot jail&lt;/h2&gt;
&lt;p&gt; 在 sshd 中添加 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Match Group groupname
    ChrootDirectory /path/to/jail
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 这会使得 groupname 的用户在登陆 ssh 之后，会自动被 chroot 到管理员定义的 jail 到中，这里以 /path/to/jail 为例。这只是办了入狱手续，还要真正的建立监狱才行。chroot 之后，会自动调用 bash，要保证在这个路径下，bash 可以正常使用。只要用 &lt;code&gt;ldd&lt;/code&gt; 解析一下 bash 的依赖，然后将所以依赖放到这个路径下就可以了。监狱制成之后，要自己 &lt;code&gt;chroot&lt;/code&gt;&lt;del&gt; 体验 &lt;/del&gt; 验证一下。&lt;/p&gt;
&lt;h2&gt;ssh&lt;/h2&gt;
&lt;p&gt;ssh 的问题主要是客户端。linux 和 mac 用户就不用说了，&lt;code&gt;ssh -D&lt;/code&gt; 可以直接参考 manpage，还不会的就去面壁吧。windows 下可以使用 putty，并且 putty 可以事先设置好，直接分发给用户。用户先建立 ssh 连接，再用浏览器 socks 连接到本地绑定的端口。更进一步可以通过安装浏览器插件来根据规则自动地应用 socks，比如 chrome 上可以使用 Proxy Swichy&lt;/p&gt;
&lt;h2&gt;pam&lt;/h2&gt;
&lt;p&gt;pam 有两方面的作用，一个是提供基于用户和地址的登陆验证，一个是限制用户使用系统资源。对于资源限制，主要是防止 fork bomb 和限制登陆数目。这两个都可以在 /etc/security/limits.conf 中完成。其实在 centos6 当中，对于 fork bomb 系统有防范，可以参考 /etc/security/limits.d/，这个值是 1024。另外，对于写的权限控制，最简单的方法是把 jail 建立在 /var 来解决，/var 对非 root:root 的用户是没有写的权限的。对于登陆验证，需要在 sshd_config 中打开 &lt;code&gt;UsePam yes&lt;/code&gt;，并且在 /etc/pam.d/sshd 中加入 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;account    required     pam_nologin.so
account    required     pam_access.so  &lt;span class="c1"&gt;# &amp;lt;- added line&lt;/span&gt;
account    include      password&lt;span class="o"&gt;-&lt;/span&gt;auth
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 此外还要在 /etc/security/access.conf 中写入具体的登陆控制，可以参考其中的 comments，支持用户和 ip 区分。注意这两个文件都是顺序解析的，First Come Firs Serve。所以要注意写入规则的顺序。&lt;/p&gt;
&lt;p&gt; 对于这样建立的 socks 伺服并非没有问题，比如 bandwidth 的限额。&lt;/p&gt;</content><category term="sshd"></category><category term="pam"></category></entry><entry><title>terminal 切换小结</title><link href="http://yuex.in/post/2013/09/terminal-switching.html" rel="alternate"></link><published>2013-09-24T00:00:00+08:00</published><updated>2013-09-24T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2013-09-24:/post/2013/09/terminal-switching.html</id><summary type="html">&lt;p&gt; 早就听说 xterm 和 urxvt 是轻量高可配置，所以想利用周末的时间把某现在在用的 terminator 切换到 xterm 或者 urxvt。结果放弃了。倒不是因为配置太过复杂，而是某觉得，在进行了一定配置之后，对比需求 / 成本 / 收益觉得，这样的配置不能称之为有效。某认为将这些东西总结一下，可能有助于有同样切换初衷的同学少走一些弯路。&lt;/p&gt;
&lt;p&gt; 某切换 terminal 的初始需求 :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; 可全屏 &lt;/li&gt;
&lt;li&gt; 支持 solarized 的颜色设置 &lt;/li&gt;
&lt;li&gt; 支持 inconsolata-g 和 wenquanyi 中文 &lt;/li&gt;
&lt;li&gt; 支持 tab&lt;/li&gt;
&lt;li&gt; 可以和 tmux 和 powerline 和谐相处 &lt;/li&gt;
&lt;li&gt; 轻量化 &lt;/li&gt;
&lt;li&gt;copy and paste&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 因为 urxvt 的初衷就是取代 xterm。而 terminator，konsole，gnome-terminal，xfce4-terminal 的设置都是大同小异。所以下面的讨论主要以 urxvt 和 terminator 为例。&lt;/p&gt;
&lt;p&gt; 第一条 …&lt;/p&gt;</summary><content type="html">&lt;p&gt; 早就听说 xterm 和 urxvt 是轻量高可配置，所以想利用周末的时间把某现在在用的 terminator 切换到 xterm 或者 urxvt。结果放弃了。倒不是因为配置太过复杂，而是某觉得，在进行了一定配置之后，对比需求 / 成本 / 收益觉得，这样的配置不能称之为有效。某认为将这些东西总结一下，可能有助于有同样切换初衷的同学少走一些弯路。&lt;/p&gt;
&lt;p&gt; 某切换 terminal 的初始需求 :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; 可全屏 &lt;/li&gt;
&lt;li&gt; 支持 solarized 的颜色设置 &lt;/li&gt;
&lt;li&gt; 支持 inconsolata-g 和 wenquanyi 中文 &lt;/li&gt;
&lt;li&gt; 支持 tab&lt;/li&gt;
&lt;li&gt; 可以和 tmux 和 powerline 和谐相处 &lt;/li&gt;
&lt;li&gt; 轻量化 &lt;/li&gt;
&lt;li&gt;copy and paste&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 因为 urxvt 的初衷就是取代 xterm。而 terminator，konsole，gnome-terminal，xfce4-terminal 的设置都是大同小异。所以下面的讨论主要以 urxvt 和 terminator 为例。&lt;/p&gt;
&lt;p&gt; 第一条 &lt;/p&gt;
&lt;p&gt;urxvt 需要使用 wmctrl 来进行全屏控制，需要对 urxvt 进行 perl 扩展，可以参考 AUR 中的 urxvt-fullscreen&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;。xterm 内建支持 fullscreen，只不过绑定键位是 Alt-Enter&lt;/p&gt;
&lt;p&gt; 第二条 &lt;/p&gt;
&lt;p&gt;urxvt 和 xterm 的颜色设置都是通过 .Xresources 或者 .Xdefaults 来进行的 ( 为个简便，以下仅用 .Xresources 进行指代 )。可以通过 &lt;code&gt;*color&lt;/code&gt; 的通位方式来让 xterm 和 urxvt 来使用相同的位置。但是一旦设置了 foreground color，那么在 vim 当中，就没 reverse video 的效果了。光标不会再根据当前 text 的语法高亮情况来变换光标颜色了 .。&lt;/p&gt;
&lt;p&gt; 第三条 &lt;/p&gt;
&lt;p&gt;urxvt 和 xterm 都可以设置两种字体。不同的是二者在 .Xresources 中的资源名是不同的。urxvt 通过 &lt;code&gt;URxvt.font: xft:*，xft:*&lt;/code&gt; 来指定，而 xterm 要分别使用 &lt;code&gt;xterm.faceName&lt;/code&gt; 和 &lt;code&gt;xterm.faceNameDoubleSize&lt;/code&gt; 来指定英文和中文字体。不过要注意的是，像某这样使用 inconsolata-g 有 &lt;code&gt;-&lt;/code&gt; 符号的，&lt;code&gt;fc-list&lt;/code&gt; 会显示实际的名字要使用 "Inconsolata-g"，这个用法在 &lt;code&gt;urxvt -fn&lt;/code&gt; 的选项中是没有问题的。但如果要将这个配置写入到 .Xresources 当中，要将 &lt;code&gt;\&lt;/code&gt; 再 escape 一次，变成 &lt;code&gt;URxvt.font:xft:Inconsolata\\-g&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt; 第四条 &lt;/p&gt;
&lt;p&gt;xterm 不支持。urxvt 要通过 perl 扩展。可以参考 tabbed 和 tabbedex&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;。tabbed 是 urxvt 自带的扩展。不同的是 tabbed 只支持新建 tab 和 tab 之间的切换，而 tabbedex 还额外支持 tab 重命名和 tab 位置的相互调换。tabbedex 可以参考 AUR 中的，但是要注意的是 tabbedex 的实现目前有 bug，要手动注释掉其代码中的 &lt;code&gt;on_user_command&lt;/code&gt; 函数，这个并不影响 tabbedex 的功能，只是一个留给用户进行键位绑定的 hook，可以 &lt;code&gt;man urxvtperl&lt;/code&gt; 确认。其实如果是配合 tmux 使用的话，tab 支持可以不考虑，可以用 tmux 的 window 来模拟 tab。&lt;/p&gt;
&lt;p&gt; 第五条 &lt;/p&gt;
&lt;p&gt;xterm 不能显示 powerline 中的 fancy symbol，即使将字体 patch 过也不行。urxvt 可以正常使用 powerline。但二者在配合 tmux 使用时，在使用 manpage 的时候，less 会的 reverse video 有问题，需要做一个 hack&lt;sup id="fnref-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt;。但是做完这个 hack 之后，会使得二者的可移植性大大降低。甚至在 urxvt 中使用 tmux 后，做 &lt;code&gt;sudo&lt;/code&gt; 的时候都会提示，root 下没有做这个 hack，更别说将这些配置直接拷贝到其它机器上了。需要将这个 hack 一同拷贝。&lt;/p&gt;
&lt;p&gt; 第六条 &lt;/p&gt;
&lt;p&gt; 不可否认 xterm 和 urxvt 都是轻量级的 terminal emulator，对系统资源占用较少。某粗略测算 urxvt 是 terminaotr 的 1/5，xterm 是 terminator 的 1/10。但考虑到目前笔电的硬件配置，系统资源占用少已经不能算是一个 killer feature 了。而且就算考虑到系统资源占用，完全可以换装 xfce4-terminal，它的资源使用和 urxvt 和 xterm 完全是可比的。再者说，也没有人会在高负载的 server 上使用图形介面吧 ? 如果还要使用 VNC 来连接 server 的话，这个做法本身就有问题了。&lt;/p&gt;
&lt;p&gt; 第七条 &lt;/p&gt;
&lt;p&gt;xterm 和 urxvt 都需要进行额外的配置。因为做到这一步，某已经决定就到这里了，所以就没有再继续进行这一项的具体配置了。&lt;/p&gt;
&lt;p&gt; 这上面几条来看，虽然 urxvt 和 xterm 可以在经过配置后达到这些目的，但是对应的移植性和维护性都要有所降低，与 terminaotr 这些 terminal 相比，已经不具有即装即用性了。当然，urxvt 也并非全然没有它的特点。比如，在 urxvt 中通过 perl 扩展，可以开启 url 选择模式，完全通过键盘就可以选择 url 并在 browser 中打开。还可以通过 &lt;code&gt;URxvt.colorUL&lt;/code&gt; 来让有下划线的 text 有不同的样式，这个在 manpage 中还是蛮方便的。&lt;/p&gt;
&lt;p&gt; 上所述，某最后决定还是继续使用 terminator 好了。正如一些同学批评的那样 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 有这个时间还不如多写现行代码 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;&lt;a href="https://aur.archlinux.org/packages/urxvt-fullscreen/"&gt;https://aur.archlinux.org/packages/urxvt-fullscreen/&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;&lt;a href="https://aur.archlinux.org/packages/urxvt-tabbedex-git/"&gt;https://aur.archlinux.org/packages/urxvt-tabbedex-git/&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;&lt;a href="http://tmux.svn.sourceforge.net/viewvc/tmux/trunk/FAQ"&gt;http://tmux.svn.sourceforge.net/viewvc/tmux/trunk/FAQ&lt;/a&gt; search "reverse video"&amp;#160;&lt;a class="footnote-backref" href="#fnref-3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="terminal"></category><category term="xterm"></category><category term="urxvt"></category></entry><entry><title>Archlinux 环境下 pdf 注记工具推荐</title><link href="http://yuex.in/post/2013/03/pdf-annotation.html" rel="alternate"></link><published>2013-03-16T00:00:00+08:00</published><updated>2013-03-16T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2013-03-16:/post/2013/03/pdf-annotation.html</id><summary type="html">&lt;p&gt; 从事学术工作的朋友可能像笔者一样，经常会遇到要帮助别人修改文章，或者自己阅读文献要进行批注的情况。由于并不是人人都使用 Linux 和 Latex，所以一般大家会默认地将写好的文章转换为 pdf 格式，然后再进行修改 &lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;。这样在 Linux 下选择一款得心应手的带有注记功能的 pdf viewer 软件就十分重要了。&lt;/p&gt;
&lt;p&gt; 在 Archlinux 上，有如下几种选择 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Okular          - extra, kde&lt;/li&gt;
&lt;li&gt;evince          - extra, gnome&lt;/li&gt;
&lt;li&gt;masterpdfeditor - aur&lt;/li&gt;
&lt;li&gt;xournal         - extra&lt;/li&gt;
&lt;li&gt;mendeleydesktop - aur&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 不过这些都和 Adobe Acrobat 的用户体验有所差距。有些虽然具有 sticky note 和 highlight 功能，但是 export 之后，在某些 pdf viewer 当中查看存在兼容性问题。几经比较，最后笔者选择了如下的组合 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.tracker-software.com/product/pdf-xchange-viewer"&gt;PDF-XChange Viewer&lt;/a&gt; - needs wine support&lt;/li&gt;
&lt;li&gt;acroread - aur …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt; 从事学术工作的朋友可能像笔者一样，经常会遇到要帮助别人修改文章，或者自己阅读文献要进行批注的情况。由于并不是人人都使用 Linux 和 Latex，所以一般大家会默认地将写好的文章转换为 pdf 格式，然后再进行修改 &lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;。这样在 Linux 下选择一款得心应手的带有注记功能的 pdf viewer 软件就十分重要了。&lt;/p&gt;
&lt;p&gt; 在 Archlinux 上，有如下几种选择 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Okular          - extra, kde&lt;/li&gt;
&lt;li&gt;evince          - extra, gnome&lt;/li&gt;
&lt;li&gt;masterpdfeditor - aur&lt;/li&gt;
&lt;li&gt;xournal         - extra&lt;/li&gt;
&lt;li&gt;mendeleydesktop - aur&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 不过这些都和 Adobe Acrobat 的用户体验有所差距。有些虽然具有 sticky note 和 highlight 功能，但是 export 之后，在某些 pdf viewer 当中查看存在兼容性问题。几经比较，最后笔者选择了如下的组合 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.tracker-software.com/product/pdf-xchange-viewer"&gt;PDF-XChange Viewer&lt;/a&gt; - needs wine support&lt;/li&gt;
&lt;li&gt;acroread - aur, acrobat reader linux version&lt;/li&gt;
&lt;li&gt;mendeleydesktop&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PDF-Xchange Viewer 需要 wine 的支持，但却比较好的提供了与 acrobat pro 相同的体验，并且生成的注记内容的兼容性非常好。&lt;/p&gt;
&lt;p&gt;acroread 是 acrobat reader 的 linux 版本，可以用来验证 linux 下生成的 pdf 文档在 windows 上打开的效果。&lt;/p&gt;
&lt;p&gt;mendeleydesktop 的注记功能在输出的时候虽然存在兼容性的问题，但用来做个人的文献整理还是非常不错的。&lt;/p&gt;
&lt;p&gt; 另外，以下字体也比较建议安装 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ttf-mac-fonts - aur&lt;/li&gt;
&lt;li&gt;ttf-ms-fonts - aur&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 这两个字体基本提供了 mac 和 microsoft 系统常用的字体，可以保证不会出现字体缺少造成相同文档在不同系统上的字体差异 &lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt; 使用 word 的朋友，一定要先在 windows 上用 word 将 doc 文档转换好 pdf 再发给 Linux 的朋友进行修改。Linux 下虽然也可以对 doc 进行转换，但转换效果并不理想。&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="pdf"></category><category term="archlinux"></category></entry><entry><title>在 shell 中区分 option 与 args</title><link href="http://yuex.in/post/2013/03/differ-optons-from-args-in-shell.html" rel="alternate"></link><published>2013-03-02T00:00:00+08:00</published><updated>2013-03-02T00:00:00+08:00</updated><author><name>yuex</name></author><id>tag:yuex.in,2013-03-02:/post/2013/03/differ-optons-from-args-in-shell.html</id><summary type="html">&lt;p&gt; 使用 &lt;code&gt;--&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt; 如下，&lt;code&gt;-rf&lt;/code&gt; 会解析为 option，而 &lt;code&gt;--help&lt;/code&gt; 会解析为 args&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ rm -rf -- --help
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;&lt;code&gt;man bash&lt;/code&gt; 之后 &lt;code&gt;/--&lt;/code&gt;，可以了解更多信息 &amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><content type="html">&lt;p&gt; 使用 &lt;code&gt;--&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt; 如下，&lt;code&gt;-rf&lt;/code&gt; 会解析为 option，而 &lt;code&gt;--help&lt;/code&gt; 会解析为 args&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ rm -rf -- --help
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;&lt;code&gt;man bash&lt;/code&gt; 之后 &lt;code&gt;/--&lt;/code&gt;，可以了解更多信息 &amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="bash"></category></entry></feed>